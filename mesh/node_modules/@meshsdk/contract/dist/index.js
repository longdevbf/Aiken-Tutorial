// src/content-ownership/offchain/offchain.ts
import {
  deserializeAddress,
  ForgeScript,
  mConStr,
  mConStr0,
  mConStr1,
  mOutputReference,
  mScriptAddress,
  resolveScriptHash as resolveScriptHash2,
  serializeNativeScript,
  stringToHex,
  toUTF8
} from "@meshsdk/core";
import {
  applyParamsToScript as applyParamsToScript2,
  parseDatumCbor,
  parseInlineDatum
} from "@meshsdk/core-csl";

// src/common.ts
import {
  serializePlutusScript
} from "@meshsdk/core";
var MeshTxInitiator = class {
  mesh;
  fetcher;
  wallet;
  stakeCredential;
  networkId = 0;
  version = 2;
  languageVersion = "V2";
  constructor({
    mesh,
    fetcher,
    wallet,
    networkId = 0,
    stakeCredential = "c08f0294ead5ab7ae0ce5471dd487007919297ba95230af22f25e575",
    version = 2
  }) {
    this.mesh = mesh;
    if (fetcher) {
      this.fetcher = fetcher;
    }
    if (wallet) {
      this.wallet = wallet;
    }
    this.networkId = networkId;
    switch (this.networkId) {
      case 1:
        this.mesh.setNetwork("mainnet");
        break;
      default:
        this.mesh.setNetwork("preprod");
    }
    this.version = version;
    switch (this.version) {
      case 1:
        this.languageVersion = "V2";
        break;
      default:
        this.languageVersion = "V3";
    }
    if (stakeCredential) {
      this.stakeCredential = stakeCredential;
    }
  }
  getScriptAddress = (scriptCbor) => {
    const { address } = serializePlutusScript(
      { code: scriptCbor, version: this.languageVersion },
      this.stakeCredential,
      this.networkId
    );
    return address;
  };
  signSubmitReset = async () => {
    const signedTx = this.mesh.completeSigning();
    const txHash = await this.mesh.submitTx(signedTx);
    this.mesh.reset();
    return txHash;
  };
  queryUtxos = async (walletAddress) => {
    if (this.fetcher) {
      const utxos = await this.fetcher.fetchAddressUTxOs(walletAddress);
      return utxos;
    }
    return [];
  };
  getWalletDappAddress = async () => {
    if (this.wallet) {
      const usedAddresses = await this.wallet.getUsedAddresses();
      if (usedAddresses.length > 0) {
        return usedAddresses[0];
      }
      const unusedAddresses = await this.wallet.getUnusedAddresses();
      if (unusedAddresses.length > 0) {
        return unusedAddresses[0];
      }
    }
    return "";
  };
  getWalletCollateral = async () => {
    if (this.wallet) {
      const utxos = await this.wallet.getCollateral();
      return utxos[0];
    }
    return void 0;
  };
  getWalletUtxosWithMinLovelace = async (lovelace, providedUtxos = []) => {
    let utxos = providedUtxos;
    if (this.wallet && (!providedUtxos || providedUtxos.length === 0)) {
      utxos = await this.wallet.getUtxos();
    }
    return utxos.filter((u) => {
      const lovelaceAmount = u.output.amount.find(
        (a) => a.unit === "lovelace"
      )?.quantity;
      return Number(lovelaceAmount) > lovelace;
    });
  };
  getWalletUtxosWithToken = async (assetHex, userUtxos = []) => {
    let utxos = userUtxos;
    if (this.wallet && userUtxos.length === 0) {
      utxos = await this.wallet.getUtxos();
    }
    return utxos.filter((u) => {
      const assetAmount = u.output.amount.find(
        (a) => a.unit === assetHex
      )?.quantity;
      return Number(assetAmount) >= 1;
    });
  };
  getAddressUtxosWithMinLovelace = async (walletAddress, lovelace, providedUtxos = []) => {
    let utxos = providedUtxos;
    if (this.fetcher && (!providedUtxos || providedUtxos.length === 0)) {
      utxos = await this.fetcher.fetchAddressUTxOs(walletAddress);
    }
    return utxos.filter((u) => {
      const lovelaceAmount = u.output.amount.find(
        (a) => a.unit === "lovelace"
      )?.quantity;
      return Number(lovelaceAmount) > lovelace;
    });
  };
  getAddressUtxosWithToken = async (walletAddress, assetHex, userUtxos = []) => {
    let utxos = userUtxos;
    if (this.fetcher && userUtxos.length === 0) {
      utxos = await this.fetcher.fetchAddressUTxOs(walletAddress);
    }
    return utxos.filter((u) => {
      const assetAmount = u.output.amount.find(
        (a) => a.unit === assetHex
      )?.quantity;
      return Number(assetAmount) >= 1;
    });
  };
  getWalletInfoForTx = async () => {
    const utxos = await this.wallet?.getUtxos();
    const collateral = await this.getWalletCollateral();
    const walletAddress = await this.getWalletDappAddress();
    if (!utxos || utxos?.length === 0) {
      throw new Error("No utxos found");
    }
    if (!collateral) {
      throw new Error("No collateral found");
    }
    if (!walletAddress) {
      throw new Error("No wallet address found");
    }
    return { utxos, collateral, walletAddress };
  };
  _getUtxoByTxHash = async (txHash, scriptCbor) => {
    if (this.fetcher) {
      const utxos = await this.fetcher?.fetchUTxOs(txHash);
      let scriptUtxo = utxos[0];
      if (scriptCbor) {
        const scriptAddr = serializePlutusScript(
          { code: scriptCbor, version: this.languageVersion },
          this.stakeCredential,
          this.networkId
        ).address;
        scriptUtxo = utxos.filter((utxo) => utxo.output.address === scriptAddr)[0] || utxos[0];
      }
      return scriptUtxo;
    }
    return void 0;
  };
};

// src/content-ownership/offchain/common.ts
import {
  builtinByteString,
  outputReference,
  resolveScriptHash,
  serializePlutusScript as serializePlutusScript2
} from "@meshsdk/core";
import { applyParamsToScript } from "@meshsdk/core-csl";

// src/content-ownership/aiken-workspace/plutus.json
var plutus_default = {
  preamble: {
    title: "meshjs/content-ownership",
    description: "Aiken contracts for project 'meshjs/content-ownership'",
    version: "0.0.0",
    plutusVersion: "v3",
    compiler: {
      name: "Aiken",
      version: "v1.1.3+3d77b5c"
    },
    license: "Apache-2.0"
  },
  validators: [
    {
      title: "content_registry.content_registry.spend",
      datum: {
        title: "_datum",
        schema: {
          $ref: "#/definitions/content_ownership~1types~1ContentRegistryDatum"
        }
      },
      redeemer: {
        title: "redeemer",
        schema: {
          $ref: "#/definitions/content_ownership~1types~1ContentRegistryRedeemer"
        }
      },
      parameters: [
        {
          title: "oracle_nft",
          schema: {
            $ref: "#/definitions/PolicyId"
          }
        }
      ],
      compiledCode: "590d4c0101003232323232323223225333004323232323253323300a3001300b375400426464646464646464a6660246006002264646464a666032603800426601200244a6660360042a0102646004603e0066eb8c07400858dd6180d000980d0011bae3018001301437540162a6660246012002264646464a66603260380042a00c2c6eb4c068004c068008dd7180c000980a1baa00b15333012300400115333015301437540162a0042c2c60246ea80284c8c8c8c8c8c8c8c8c8c8c8c8c8c94ccc0840045280a9998109812000899192999810180918109baa001132533302130123022375400226464646464646464646464646464646464646464a6660706076004264646600202626600201e26600201226464646464646464646464a6660846066016264646464646464a6660980040022a666098609e004264a66609a0080042a66609a60a00082646464a66609a607c609c6ea80044c8c94ccc13cc100c140dd500089919191919299982b982d001899299982c182d801899299982b1824182b9baa001132325333058304a305937540022646603a00626603c002264a6660b4609860b66ea80044c8c94ccc170c138c174dd50008991981080189981100089919191919299983119b8f01501315333062005153330620021533306200115333062004100314a029405280a5014a060a6604e60446eacc118c18cdd50069829181318109bab30453062375401a66ebc00cc118cc18cdd418139bad30223061375400e660c66e9ccc88c8cc00400400c894ccc198004400c4cc19cc1a0004cc008008c1a4004dd6182218309baa00733063374e03697ae04bd7019baf0043045330623750604c6eb4c084c180dd5004198311ba73301d3758608660c06ea8020cc188dd480da5eb812f5c066e1cdd69810182f9baa007375a604060be6ea8014c184c178dd50008b181e982e9baa007305f305c37540022c607660b66ea8018c174c168dd50008b181c982c9baa303c3059375401a60b660b06ea800458c0dcc15cdd5181d182b9baa00c163059002163058002375860ae60b00046eb0c158004cc150dd3999980901d8140150019982a1ba7333301203b0220240014bd701bae30543055375860a860a26ea800458cc00cc03cdd5981998281baa303330503754008466e3cdd718090008119bae30523053375860a4609e6ea800458cc004c034dd5981898271baa3031304e3754006466e3cdd718080008139119198008008019129998290008a60103d87a800013232533305130050021303833055374e00497ae01330040040013056002375860a8002609e008004609c0040022940dd618260011bac304b304c00133049374e66600a06803a03e660926e9cccc0140d005c0652f5c06eb0c124c128008dd7182400098221baa03b1325333043303a00c13232323232533304b304e0021325333049303a304a375400226464646464a6660a260a8006264a6660a460aa00626464a6660a2608660a46ea80044c8cc05c0044c94ccc14cc110c150dd500089919299982a8030a99982a80108008a5014a0608c6034602a6eacc0e4c158dd500319b8848000c8c8c8c94ccc168c1740084c8cc004004c8cc004004120894ccc17400452f5c02660bc6ea0ccc100dd5981f982e1baa303f305c375460be00200c0086600400460c000244a6660b800229000099b80375a60bc0026600400460be0022c6eb8c16c004c16c008dd7182c8009bac3058305537540022c66646002002444a6660b00042980103d87a800013232533305730480031303e3305b374e00497ae01333005005001337000069000982e0019bac305a0023758606e60a86ea8004034c158c14cdd50008b181918291baa30353052375401266646444a6660a6608a60a86ea80084c8cc06000454ccc150c118c154dd50010991980c800899baf001303c33059301830573754004660b26e9cc8c94ccc15cc120c160dd500089980b1bac301a0023305b37520266eb0c170c164dd50008b19299982d0008a60103d87a80001303e3305b374e60ba00297ae0375860760026600a6eb0c0e8c15cdd500100825eb80c164c158dd50010b182c182a9baa002163001001222533305500214bd70810180008101800009919299982a19b89003480004cc16130101800033058374e00897ae013233059374e660b26ea400cdd6182d0009982c982d182d800a5eb80ccc014014004cdc0001a400260b20066eb8c15c008c0c4c144dd5181a18289baa0023031305137540022c60a60042c60a40046eb0c144c148008dd61828000998271ba7323302f03a2533304c3375e601e609c6ea8c0c4c138dd5000812098219998191bab3031304e37546062609c6ea80040980085281bae302f0013304e374e666601806a0440486eb8c0bc0052f5c06eb0c138c12cdd50008b1929998260008a60103d87a8000130303304d304e0014bd70180498031bab302d304a3754605a60946ea800458c130004cc0a80cc8cdd7980518249baa302c304937540020326eb4c128c12c008dd7182480098229baa03c132533304700114a02a66608e6094002264a66608a646600200205c44a66609400229404c94ccc120cdc79bae304d00201414a2266006006002609a00220022940cdd79ba602d374c646600200260066eacc0a8c11cdd5181518239baa304a00222533304900114bd6f7b6300991982599bb03048001374c64660020026eacc128008894ccc13000452f5bded8c02646609c66ec0c12c004dd419b8148000dd69826000998018019828001182700099801801982680118258008a5033300303201b01d2323300100100222533304800114bd6f7b630099191919299982499b9148900002153330493371e9101000021003100513304d337606ea4008dd3000998030030019bab304a003375c60900046098004609400244646600200200644a666090002200626609260940026600400460960024446604e0064a66608866ebcc01cc118dd5181498231baa00100313233001001300637566054608e6ea8c0a8c11cdd50011129998248008a5013253330473371e6eb8c028dd618260010028a51133003003001304c00114a04646600200200444a66608a002297ae0132333222323300100100322533304b00110031323304d374e6609a6ea4018cc134c128004cc134c12c0052f5c066006006609e004609a0026eb8c110004dd5982280099801801982480118238009111198130021299982199baf300630453754002008260746660526eacc0a0c114dd50008018010a502304300122533303e302f303f3754004264646464a66608a609000426606a00244a66608e0042a00e264600460960066eb8c12400858dd6182300098230011bad3044001304037540042c44a66607a605c607c6ea80084c8c8c8c94ccc110c11c0084cc0d0004894ccc1180085401c4cc0d8dd61824001112999824001098019825802099180118260019bae304a002163758608a002608a0046eb4c10c004c0fcdd50010b180080091299981f0008a4000260066600400460820026e0120023038375406044a666070605260726ea80084c8c8c8c94ccc0fcc1080084cc01c00c4c8c94ccc0f8c0bc0044c8c94ccc10cc1180084c8c94ccc108c0cc0044c8c94ccc11cc1280084cc03c0045401058c120004c110dd50018a999821181c8008991919191919299982598270010a8040b1bad304c001304c002375a609400260940046eb4c120004c110dd50018b18211baa00215004163044001304037540062a66607c606a0022a66608260806ea800c540085858c0f8dd50010a8028b18200009820001181f000981d1baa0021622325333038302900113232533303d30400021500416375c607c00260746ea800c54ccc0e0c0bc0044c8c94ccc0f4c1000085401058dd7181f000981d1baa00316303837540042c6eb8c0e4004c0e4008dd7181b800981b8011bad3035001303500230330013033002375c606200260620046eb4c0bc004c0bc008c0b4004c0b4008dd718158009815801181480098148011bae3027001302337540022c604a60446ea800458c004c084dd5180218109baa3024002230243025302500114a0660020144602a6660086eacc00cc080dd5180198101baa00101c4890022323300100100322533302300114bd700991929998111802801099813001198020020008998020020009813801181280091810981100091119299980f180a980f9baa0011480004dd6981198101baa00132533301e3015301f3754002298103d87a8000132330010013756604860426ea8008894ccc08c004530103d87a80001323232325333024337220100042a66604866e3c0200084c02ccc0a0dd4000a5eb80530103d87a8000133006006003375a604a0066eb8c08c008c09c008c094004c8cc004004010894ccc0880045300103d87a80001323232325333023337220100042a66604666e3c0200084c028cc09cdd3000a5eb80530103d87a8000133006006003375660480066eb8c088008c098008c090004dd2a40006eb0c074c078c078c078c078008dd5980e000980e180e0011bac301a001301a0023758603000260300046eb0c058004c048dd50059b8748000dc3a40084464660020020064466006002600400460226024004602000260186ea8008dc3a40042c601a601c004601800260180046014002600c6ea800452613656375c002ae6955ceaab9e5573eae815d0aba201",
      hash: "f940075f7ed85d5f5c5045aef04e4c946e831be31b28e25bd90aab6c"
    },
    {
      title: "content_registry.content_registry.else",
      parameters: [
        {
          title: "oracle_nft",
          schema: {
            $ref: "#/definitions/PolicyId"
          }
        }
      ],
      compiledCode: "590d4c0101003232323232323223225333004323232323253323300a3001300b375400426464646464646464a6660246006002264646464a666032603800426601200244a6660360042a0102646004603e0066eb8c07400858dd6180d000980d0011bae3018001301437540162a6660246012002264646464a66603260380042a00c2c6eb4c068004c068008dd7180c000980a1baa00b15333012300400115333015301437540162a0042c2c60246ea80284c8c8c8c8c8c8c8c8c8c8c8c8c8c94ccc0840045280a9998109812000899192999810180918109baa001132533302130123022375400226464646464646464646464646464646464646464a6660706076004264646600202626600201e26600201226464646464646464646464a6660846066016264646464646464a6660980040022a666098609e004264a66609a0080042a66609a60a00082646464a66609a607c609c6ea80044c8c94ccc13cc100c140dd500089919191919299982b982d001899299982c182d801899299982b1824182b9baa001132325333058304a305937540022646603a00626603c002264a6660b4609860b66ea80044c8c94ccc170c138c174dd50008991981080189981100089919191919299983119b8f01501315333062005153330620021533306200115333062004100314a029405280a5014a060a6604e60446eacc118c18cdd50069829181318109bab30453062375401a66ebc00cc118cc18cdd418139bad30223061375400e660c66e9ccc88c8cc00400400c894ccc198004400c4cc19cc1a0004cc008008c1a4004dd6182218309baa00733063374e03697ae04bd7019baf0043045330623750604c6eb4c084c180dd5004198311ba73301d3758608660c06ea8020cc188dd480da5eb812f5c066e1cdd69810182f9baa007375a604060be6ea8014c184c178dd50008b181e982e9baa007305f305c37540022c607660b66ea8018c174c168dd50008b181c982c9baa303c3059375401a60b660b06ea800458c0dcc15cdd5181d182b9baa00c163059002163058002375860ae60b00046eb0c158004cc150dd3999980901d8140150019982a1ba7333301203b0220240014bd701bae30543055375860a860a26ea800458cc00cc03cdd5981998281baa303330503754008466e3cdd718090008119bae30523053375860a4609e6ea800458cc004c034dd5981898271baa3031304e3754006466e3cdd718080008139119198008008019129998290008a60103d87a800013232533305130050021303833055374e00497ae01330040040013056002375860a8002609e008004609c0040022940dd618260011bac304b304c00133049374e66600a06803a03e660926e9cccc0140d005c0652f5c06eb0c124c128008dd7182400098221baa03b1325333043303a00c13232323232533304b304e0021325333049303a304a375400226464646464a6660a260a8006264a6660a460aa00626464a6660a2608660a46ea80044c8cc05c0044c94ccc14cc110c150dd500089919299982a8030a99982a80108008a5014a0608c6034602a6eacc0e4c158dd500319b8848000c8c8c8c94ccc168c1740084c8cc004004c8cc004004120894ccc17400452f5c02660bc6ea0ccc100dd5981f982e1baa303f305c375460be00200c0086600400460c000244a6660b800229000099b80375a60bc0026600400460be0022c6eb8c16c004c16c008dd7182c8009bac3058305537540022c66646002002444a6660b00042980103d87a800013232533305730480031303e3305b374e00497ae01333005005001337000069000982e0019bac305a0023758606e60a86ea8004034c158c14cdd50008b181918291baa30353052375401266646444a6660a6608a60a86ea80084c8cc06000454ccc150c118c154dd50010991980c800899baf001303c33059301830573754004660b26e9cc8c94ccc15cc120c160dd500089980b1bac301a0023305b37520266eb0c170c164dd50008b19299982d0008a60103d87a80001303e3305b374e60ba00297ae0375860760026600a6eb0c0e8c15cdd500100825eb80c164c158dd50010b182c182a9baa002163001001222533305500214bd70810180008101800009919299982a19b89003480004cc16130101800033058374e00897ae013233059374e660b26ea400cdd6182d0009982c982d182d800a5eb80ccc014014004cdc0001a400260b20066eb8c15c008c0c4c144dd5181a18289baa0023031305137540022c60a60042c60a40046eb0c144c148008dd61828000998271ba7323302f03a2533304c3375e601e609c6ea8c0c4c138dd5000812098219998191bab3031304e37546062609c6ea80040980085281bae302f0013304e374e666601806a0440486eb8c0bc0052f5c06eb0c138c12cdd50008b1929998260008a60103d87a8000130303304d304e0014bd70180498031bab302d304a3754605a60946ea800458c130004cc0a80cc8cdd7980518249baa302c304937540020326eb4c128c12c008dd7182480098229baa03c132533304700114a02a66608e6094002264a66608a646600200205c44a66609400229404c94ccc120cdc79bae304d00201414a2266006006002609a00220022940cdd79ba602d374c646600200260066eacc0a8c11cdd5181518239baa304a00222533304900114bd6f7b6300991982599bb03048001374c64660020026eacc128008894ccc13000452f5bded8c02646609c66ec0c12c004dd419b8148000dd69826000998018019828001182700099801801982680118258008a5033300303201b01d2323300100100222533304800114bd6f7b630099191919299982499b9148900002153330493371e9101000021003100513304d337606ea4008dd3000998030030019bab304a003375c60900046098004609400244646600200200644a666090002200626609260940026600400460960024446604e0064a66608866ebcc01cc118dd5181498231baa00100313233001001300637566054608e6ea8c0a8c11cdd50011129998248008a5013253330473371e6eb8c028dd618260010028a51133003003001304c00114a04646600200200444a66608a002297ae0132333222323300100100322533304b00110031323304d374e6609a6ea4018cc134c128004cc134c12c0052f5c066006006609e004609a0026eb8c110004dd5982280099801801982480118238009111198130021299982199baf300630453754002008260746660526eacc0a0c114dd50008018010a502304300122533303e302f303f3754004264646464a66608a609000426606a00244a66608e0042a00e264600460960066eb8c12400858dd6182300098230011bad3044001304037540042c44a66607a605c607c6ea80084c8c8c8c94ccc110c11c0084cc0d0004894ccc1180085401c4cc0d8dd61824001112999824001098019825802099180118260019bae304a002163758608a002608a0046eb4c10c004c0fcdd50010b180080091299981f0008a4000260066600400460820026e0120023038375406044a666070605260726ea80084c8c8c8c94ccc0fcc1080084cc01c00c4c8c94ccc0f8c0bc0044c8c94ccc10cc1180084c8c94ccc108c0cc0044c8c94ccc11cc1280084cc03c0045401058c120004c110dd50018a999821181c8008991919191919299982598270010a8040b1bad304c001304c002375a609400260940046eb4c120004c110dd50018b18211baa00215004163044001304037540062a66607c606a0022a66608260806ea800c540085858c0f8dd50010a8028b18200009820001181f000981d1baa0021622325333038302900113232533303d30400021500416375c607c00260746ea800c54ccc0e0c0bc0044c8c94ccc0f4c1000085401058dd7181f000981d1baa00316303837540042c6eb8c0e4004c0e4008dd7181b800981b8011bad3035001303500230330013033002375c606200260620046eb4c0bc004c0bc008c0b4004c0b4008dd718158009815801181480098148011bae3027001302337540022c604a60446ea800458c004c084dd5180218109baa3024002230243025302500114a0660020144602a6660086eacc00cc080dd5180198101baa00101c4890022323300100100322533302300114bd700991929998111802801099813001198020020008998020020009813801181280091810981100091119299980f180a980f9baa0011480004dd6981198101baa00132533301e3015301f3754002298103d87a8000132330010013756604860426ea8008894ccc08c004530103d87a80001323232325333024337220100042a66604866e3c0200084c02ccc0a0dd4000a5eb80530103d87a8000133006006003375a604a0066eb8c08c008c09c008c094004c8cc004004010894ccc0880045300103d87a80001323232325333023337220100042a66604666e3c0200084c028cc09cdd3000a5eb80530103d87a8000133006006003375660480066eb8c088008c098008c090004dd2a40006eb0c074c078c078c078c078008dd5980e000980e180e0011bac301a001301a0023758603000260300046eb0c058004c048dd50059b8748000dc3a40084464660020020064466006002600400460226024004602000260186ea8008dc3a40042c601a601c004601800260180046014002600c6ea800452613656375c002ae6955ceaab9e5573eae815d0aba201",
      hash: "f940075f7ed85d5f5c5045aef04e4c946e831be31b28e25bd90aab6c"
    },
    {
      title: "content_registry_ref_token.content_registry_ref_token.mint",
      redeemer: {
        title: "redeemer",
        schema: {
          $ref: "#/definitions/content_ownership~1types~1MintPolarity"
        }
      },
      parameters: [
        {
          title: "oracle_nft",
          schema: {
            $ref: "#/definitions/PolicyId"
          }
        }
      ],
      compiledCode: "5907090101003232323232323223225333004323232323253323300a3001300b3754004264646464a66601c600a0022a66602260206ea801c540085854ccc038c00c00454ccc044c040dd50038a8010b0b18071baa0061323232323232323232323232323232533301b3012301c37540042a66603c0060022a66603c6042006264a6646603a6002603c6ea80084c8c8c8c8cc0040104c8c8c8c8c8c8c8c94ccc0b000800454ccc0b0c0bc0084c94ccc0b401000854ccc0b4c0c00104c8c94ccc0b0c040c0b4dd5000899192999817180918179baa0011323300f0031533302f302630303754002264646464a66606c6072004264660020020044464a6660720042646464646464a66607866ebc040c8c8c8c8c0bccc110c114010cc110c11400ccc110c114008cc110c114004cc110dd419b8001c48008c118c118004c114004c110004c10c004c0f8dd500f8a99981e0030a99981e00108008a5014a02940c07cc008dd59814181e9baa011301e30013756604e60786ea80448c008c094004c004004894ccc0f000452000133700900119801001181f800a99981b1816803099baf374e00898101800014a02646004607a0066eb8c0ec008c00800858dd6181b800981b8011bad3035001303137540022c606660606ea800458c058c0bcdd5001981898171baa001163014302d3754004605e008004605c0040022940dd618160011bac302b302c001323302a374e6666002030605600a0489101003302a374e666600203060560066eb8c0ac010c8c8c8c8c8cdc5000a441012900337149110a5265676973747279202800330010063300300648008c0040048894ccc0acc0800044cdc599b80002481812210013371666e00cdc1801000a40c066600600666e18008004cdc1800a40286002002444a66605266e2000920141001133300300333706004900a19b82001480512f5c04444660320084a66605466ebcc050c0b0dd50008020980f99980c1bab3017302c37540020060042940dd69814981500098148009814000981398119baa00422533302230193023375400426464646464646464646464646464646464646464a666072607800426602e02226602e01a26602e00e2a02a2c6eb8c0e8004c0e8008dd7181c000981c0011bad3036001303600230340013034002375c606400260640046eb4c0c0004c0c0008c0b8004c0b8008dd718160009816001181500098150011bae3028001302437540042c44a666042603060446ea80084c8c8c8c94ccc0a0c0ac0084cc01c00c4c8c94ccc09cc0780044c8c94ccc0b0c0bc0084c8c94ccc0acc0880044c8c94ccc0c0c0cc0084cc03c0045401058c0c4004c0b4dd50018a99981598100008991919191919299981a181b8010a8040b1bad30350013035002375a606600260660046eb4c0c4004c0b4dd50018b18159baa0021500416302d001302937540062a66604e60380022a66605460526ea800c540085858c09cdd50010a8028b18148009814801181380098119baa0021622325333021301800113232533302630290021500416375c604e00260466ea800c54ccc084c0580044c8c94ccc098c0a40085401058dd7181380098119baa00316302137540046044603e6ea8008dc3a40082c6008603a6ea8c020c074dd518100018008008a99980d1807980d9baa00113233001001300600c22533301f00114a2264a66603a64a66603c66e3cdd7180400080a099b88375a600e00290000a51375860440042660060060022940c088004528180f0029bac301d301e0042301d301e301e0012301c0012323300100100222533301b00114bd7009919991119198008008019129998108008801899198119ba733023375200c66046604000266046604200297ae03300300330250023023001375c60340026eacc06c004cc00c00cc07c008c074004cc060034cc060dd3998021bac30190082300a33300337566004602e6ea8c008c05cdd5000809a45004bd701180c980d00091119299980b1805980b9baa0011480004dd6980d980c1baa001325333016300b301737540022980103d87a8000132330010013756603860326ea8008894ccc06c004530103d87a8000132323232533301c337220100042a66603866e3c0200084c02ccc080dd4000a5eb80530103d87a8000133006006003375a603a0066eb8c06c008c07c008c074004c8cc004004010894ccc0680045300103d87a8000132323232533301b337220100042a66603666e3c0200084c028cc07cdd3000a5eb80530103d87a8000133006006003375660380066eb8c068008c078008c070004dd2a400044646600200200644a66602e002297ae0132325333016300500213301a00233004004001133004004001301b002301900137566028602a602a0046eb0c04c004c04cc04c004c038dd50039b8748008dd7180798061baa002370e90000b1806980700118060009806001180500098031baa00114984d958dd7000ab9a5573aaae7955cfaba05742ae89",
      hash: "5b692922e6ea97bd96497fb96c7a6e03f8a8d3544e85d4815e74b6e3"
    },
    {
      title: "content_registry_ref_token.content_registry_ref_token.else",
      parameters: [
        {
          title: "oracle_nft",
          schema: {
            $ref: "#/definitions/PolicyId"
          }
        }
      ],
      compiledCode: "5907090101003232323232323223225333004323232323253323300a3001300b3754004264646464a66601c600a0022a66602260206ea801c540085854ccc038c00c00454ccc044c040dd50038a8010b0b18071baa0061323232323232323232323232323232533301b3012301c37540042a66603c0060022a66603c6042006264a6646603a6002603c6ea80084c8c8c8c8cc0040104c8c8c8c8c8c8c8c94ccc0b000800454ccc0b0c0bc0084c94ccc0b401000854ccc0b4c0c00104c8c94ccc0b0c040c0b4dd5000899192999817180918179baa0011323300f0031533302f302630303754002264646464a66606c6072004264660020020044464a6660720042646464646464a66607866ebc040c8c8c8c8c0bccc110c114010cc110c11400ccc110c114008cc110c114004cc110dd419b8001c48008c118c118004c114004c110004c10c004c0f8dd500f8a99981e0030a99981e00108008a5014a02940c07cc008dd59814181e9baa011301e30013756604e60786ea80448c008c094004c004004894ccc0f000452000133700900119801001181f800a99981b1816803099baf374e00898101800014a02646004607a0066eb8c0ec008c00800858dd6181b800981b8011bad3035001303137540022c606660606ea800458c058c0bcdd5001981898171baa001163014302d3754004605e008004605c0040022940dd618160011bac302b302c001323302a374e6666002030605600a0489101003302a374e666600203060560066eb8c0ac010c8c8c8c8c8cdc5000a441012900337149110a5265676973747279202800330010063300300648008c0040048894ccc0acc0800044cdc599b80002481812210013371666e00cdc1801000a40c066600600666e18008004cdc1800a40286002002444a66605266e2000920141001133300300333706004900a19b82001480512f5c04444660320084a66605466ebcc050c0b0dd50008020980f99980c1bab3017302c37540020060042940dd69814981500098148009814000981398119baa00422533302230193023375400426464646464646464646464646464646464646464a666072607800426602e02226602e01a26602e00e2a02a2c6eb8c0e8004c0e8008dd7181c000981c0011bad3036001303600230340013034002375c606400260640046eb4c0c0004c0c0008c0b8004c0b8008dd718160009816001181500098150011bae3028001302437540042c44a666042603060446ea80084c8c8c8c94ccc0a0c0ac0084cc01c00c4c8c94ccc09cc0780044c8c94ccc0b0c0bc0084c8c94ccc0acc0880044c8c94ccc0c0c0cc0084cc03c0045401058c0c4004c0b4dd50018a99981598100008991919191919299981a181b8010a8040b1bad30350013035002375a606600260660046eb4c0c4004c0b4dd50018b18159baa0021500416302d001302937540062a66604e60380022a66605460526ea800c540085858c09cdd50010a8028b18148009814801181380098119baa0021622325333021301800113232533302630290021500416375c604e00260466ea800c54ccc084c0580044c8c94ccc098c0a40085401058dd7181380098119baa00316302137540046044603e6ea8008dc3a40082c6008603a6ea8c020c074dd518100018008008a99980d1807980d9baa00113233001001300600c22533301f00114a2264a66603a64a66603c66e3cdd7180400080a099b88375a600e00290000a51375860440042660060060022940c088004528180f0029bac301d301e0042301d301e301e0012301c0012323300100100222533301b00114bd7009919991119198008008019129998108008801899198119ba733023375200c66046604000266046604200297ae03300300330250023023001375c60340026eacc06c004cc00c00cc07c008c074004cc060034cc060dd3998021bac30190082300a33300337566004602e6ea8c008c05cdd5000809a45004bd701180c980d00091119299980b1805980b9baa0011480004dd6980d980c1baa001325333016300b301737540022980103d87a8000132330010013756603860326ea8008894ccc06c004530103d87a8000132323232533301c337220100042a66603866e3c0200084c02ccc080dd4000a5eb80530103d87a8000133006006003375a603a0066eb8c06c008c07c008c074004c8cc004004010894ccc0680045300103d87a8000132323232533301b337220100042a66603666e3c0200084c028cc07cdd3000a5eb80530103d87a8000133006006003375660380066eb8c068008c078008c070004dd2a400044646600200200644a66602e002297ae0132325333016300500213301a00233004004001133004004001301b002301900137566028602a602a0046eb0c04c004c04cc04c004c038dd50039b8748008dd7180798061baa002370e90000b1806980700118060009806001180500098031baa00114984d958dd7000ab9a5573aaae7955cfaba05742ae89",
      hash: "5b692922e6ea97bd96497fb96c7a6e03f8a8d3544e85d4815e74b6e3"
    },
    {
      title: "one_time_minting_policy.one_time_minting_policy.mint",
      redeemer: {
        title: "redeemer",
        schema: {
          $ref: "#/definitions/content_ownership~1types~1MintPolarity"
        }
      },
      parameters: [
        {
          title: "utxo_ref",
          schema: {
            $ref: "#/definitions/cardano~1transaction~1OutputReference"
          }
        }
      ],
      compiledCode: "59019e0101003232323232323222533300332323232325332330093001300a37540042646464a66601860080022a66601e601c6ea8018540085854ccc030cdc3a40040022a66601e601c6ea8018540085858c030dd50028992999805980198061baa0051533300b3003300c375464660020026eb0c044c038dd50041129998080008a60103d87a800013232533300f3375e01c600a60226ea80084cdd2a40006602600497ae01330040040013014002301200114a229404c8cc004004c8cc004004dd59809180998099809980998079baa00922533301100114bd70099199911191980080080191299980b80088018991980c9ba733019375200c66032602c00266032602e00297ae033003003301b0023019001375c60200026eacc044004cc00c00cc054008c04c004894ccc040004528899299980719299980799b8f375c600a00200c266e20dd6980a180a980a800a40002944dd618098010998018018008a50301300123010001375c601c60166ea8008dc3a40002c6018601a004601600260160046012002600a6ea8004526136565734aae7555cf2ab9f5740ae855d101",
      hash: "55ada3bfe32c4ff89d50cfdd86956e013a011fa28279112e424e596a"
    },
    {
      title: "one_time_minting_policy.one_time_minting_policy.else",
      parameters: [
        {
          title: "utxo_ref",
          schema: {
            $ref: "#/definitions/cardano~1transaction~1OutputReference"
          }
        }
      ],
      compiledCode: "59019e0101003232323232323222533300332323232325332330093001300a37540042646464a66601860080022a66601e601c6ea8018540085854ccc030cdc3a40040022a66601e601c6ea8018540085858c030dd50028992999805980198061baa0051533300b3003300c375464660020026eb0c044c038dd50041129998080008a60103d87a800013232533300f3375e01c600a60226ea80084cdd2a40006602600497ae01330040040013014002301200114a229404c8cc004004c8cc004004dd59809180998099809980998079baa00922533301100114bd70099199911191980080080191299980b80088018991980c9ba733019375200c66032602c00266032602e00297ae033003003301b0023019001375c60200026eacc044004cc00c00cc054008c04c004894ccc040004528899299980719299980799b8f375c600a00200c266e20dd6980a180a980a800a40002944dd618098010998018018008a50301300123010001375c601c60166ea8008dc3a40002c6018601a004601600260160046012002600a6ea8004526136565734aae7555cf2ab9f5740ae855d101",
      hash: "55ada3bfe32c4ff89d50cfdd86956e013a011fa28279112e424e596a"
    },
    {
      title: "oracle_validator.oracle_validator.spend",
      datum: {
        title: "datum_opt",
        schema: {
          $ref: "#/definitions/content_ownership~1types~1OracleDatum"
        }
      },
      redeemer: {
        title: "redeemer",
        schema: {
          $ref: "#/definitions/content_ownership~1types~1OracleRedeemer"
        }
      },
      compiledCode: "5906cd01010032323232323232253330023232323232533233008300130093754004264646464646464a66601e60060022a66602460226ea8028540085854ccc03cc02000454ccc048c044dd50050a8010b0a9998079802000899191919299980b180c8010a8030b1bae30170013017002375c602a00260226ea802854ccc03ccdc3a400c0022a66602460226ea8028540085858c03cdd5004899191919192999809180318099baa008132323232323232323232323232323232323232323232325333029301d00713333001019011300200f4800854ccc0a4c08801c4cccc004064034c00802d2002132533302a301f00813232323232325333033303600213253330313026303237540022646464a6660686050606a6ea800c4c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c94ccc12cc1380084cc0540444cc0540344cc05401c4c94ccc124c8cc004004cc138dd4815198271ba90294bd701129998270008a51132533304c3302303b375c60a20042660060060022940c144004400452819baf0173232323232323230223305330540073305330540063305330540053305330540043305330540033305330540023305330540013305330543055001330533752048660a66ea408d2f5c060a800260a600260a400260a200260a0002609e00260946ea80d858dd7182600098260011bae304a001304a002375a60900026090004608c002608c0046eb8c110004c110008dd698210009821001182000098200011bae303e001303e002303c001303c002375c6074002606c6ea800c58894ccc0d4c0a4c0d8dd5001099191919299981e181f80109980380189919299981d9817800899192999820182180109919299981f981980089919299982218238010998078008a8020b182280098209baa0031533303f303800113232323232325333048304b0021500816375a609200260920046eb4c11c004c11c008dd6982280098209baa00316303f37540042a0082c6082002607a6ea800c54ccc0ecc0d000454ccc0f8c0f4dd50018a8010b0b181d9baa0021500516303d001303d002303b001303737540042c4464a66606a605200226464a666074607a0042a0082c6eb8c0ec004c0dcdd50018a99981a981700089919299981d181e8010a8020b1bae303b001303737540062c606a6ea8008c0d8c0ccdd50008b181a981b181b18191baa001163034001323300100102122533303300114bd70099192999819299981919baf3037303437540040382605664a666066605860686ea8004520001375a6070606a6ea8004c94ccc0ccc0b0c0d0dd50008a60103d87a80001323300100137566072606c6ea8008894ccc0e0004530103d87a800013232323253330393372291100002153330393371e9101000021300c3303d375000297ae014c0103d87a8000133006006003375a60740066eb8c0e0008c0f0008c0e8004c8cc004004dd5981c181c981a9baa00322533303700114c103d87a80001323232325333038337220480042a66607066e3c0900084c02ccc0f0dd3000a5eb80530103d87a8000133006006003375660720066eb8c0dc008c0ec008c0e400452809981b00119802002000899802002000981b801181a8009ba548000dd7181898190011bae3030001302c375404a2a666054660020320122666600403402c91100480045281119198008008019129998180008a50132533302e3371e6eb8c0cc008010528899801801800981980091111929998180008a50153330303033001132323253330303371e6eb8c0d400c01c54ccc0c0cdc7800803099b8700200514a02940dd7181a181a8011bad303330343034001375860640022940c8cc004004014894ccc0c400452f5c0264666444646600200200644a66606e0022006264660726e9ccc0e4dd48031981c981b0009981c981b800a5eb80cc00c00cc0ec008c0e4004dd718180009bab30310013300300330350023033001232337140029101012900337149110a5265676973747279202800330020013300400148008c0040048894ccc0a0c0840044cdc599b80002481812210013371666e00cdc1801000a40c066600600666e18008004cdc1800a40286002002444a66604c66e2000920141001133300300333706004900a19b8200148050c08cdd500e9bae30263027002375c604a002604a0046eb4c08c004c08cc08c008dd7181080098108011bad301f001301f301f002375c603a002603a004603600260360046eb8c064004c054dd5000980b980a1baa008163758602c602e602e602e602e0046eacc054004c054c054008dd618098009809980998079baa00a370e90001b8748010c03cc040008c038004c028dd50011b874800858c02cc030008c028004c028008c020004c010dd50008a4c26cacae6955ceaab9e5573eae815d0aba201",
      hash: "d9c639433a3de1adeb247053b7556dd637be9398b245fa0ab351fbbf"
    },
    {
      title: "oracle_validator.oracle_validator.else",
      compiledCode: "5906cd01010032323232323232253330023232323232533233008300130093754004264646464646464a66601e60060022a66602460226ea8028540085854ccc03cc02000454ccc048c044dd50050a8010b0a9998079802000899191919299980b180c8010a8030b1bae30170013017002375c602a00260226ea802854ccc03ccdc3a400c0022a66602460226ea8028540085858c03cdd5004899191919192999809180318099baa008132323232323232323232323232323232323232323232325333029301d00713333001019011300200f4800854ccc0a4c08801c4cccc004064034c00802d2002132533302a301f00813232323232325333033303600213253330313026303237540022646464a6660686050606a6ea800c4c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c94ccc12cc1380084cc0540444cc0540344cc05401c4c94ccc124c8cc004004cc138dd4815198271ba90294bd701129998270008a51132533304c3302303b375c60a20042660060060022940c144004400452819baf0173232323232323230223305330540073305330540063305330540053305330540043305330540033305330540023305330540013305330543055001330533752048660a66ea408d2f5c060a800260a600260a400260a200260a0002609e00260946ea80d858dd7182600098260011bae304a001304a002375a60900026090004608c002608c0046eb8c110004c110008dd698210009821001182000098200011bae303e001303e002303c001303c002375c6074002606c6ea800c58894ccc0d4c0a4c0d8dd5001099191919299981e181f80109980380189919299981d9817800899192999820182180109919299981f981980089919299982218238010998078008a8020b182280098209baa0031533303f303800113232323232325333048304b0021500816375a609200260920046eb4c11c004c11c008dd6982280098209baa00316303f37540042a0082c6082002607a6ea800c54ccc0ecc0d000454ccc0f8c0f4dd50018a8010b0b181d9baa0021500516303d001303d002303b001303737540042c4464a66606a605200226464a666074607a0042a0082c6eb8c0ec004c0dcdd50018a99981a981700089919299981d181e8010a8020b1bae303b001303737540062c606a6ea8008c0d8c0ccdd50008b181a981b181b18191baa001163034001323300100102122533303300114bd70099192999819299981919baf3037303437540040382605664a666066605860686ea8004520001375a6070606a6ea8004c94ccc0ccc0b0c0d0dd50008a60103d87a80001323300100137566072606c6ea8008894ccc0e0004530103d87a800013232323253330393372291100002153330393371e9101000021300c3303d375000297ae014c0103d87a8000133006006003375a60740066eb8c0e0008c0f0008c0e8004c8cc004004dd5981c181c981a9baa00322533303700114c103d87a80001323232325333038337220480042a66607066e3c0900084c02ccc0f0dd3000a5eb80530103d87a8000133006006003375660720066eb8c0dc008c0ec008c0e400452809981b00119802002000899802002000981b801181a8009ba548000dd7181898190011bae3030001302c375404a2a666054660020320122666600403402c91100480045281119198008008019129998180008a50132533302e3371e6eb8c0cc008010528899801801800981980091111929998180008a50153330303033001132323253330303371e6eb8c0d400c01c54ccc0c0cdc7800803099b8700200514a02940dd7181a181a8011bad303330343034001375860640022940c8cc004004014894ccc0c400452f5c0264666444646600200200644a66606e0022006264660726e9ccc0e4dd48031981c981b0009981c981b800a5eb80cc00c00cc0ec008c0e4004dd718180009bab30310013300300330350023033001232337140029101012900337149110a5265676973747279202800330020013300400148008c0040048894ccc0a0c0840044cdc599b80002481812210013371666e00cdc1801000a40c066600600666e18008004cdc1800a40286002002444a66604c66e2000920141001133300300333706004900a19b8200148050c08cdd500e9bae30263027002375c604a002604a0046eb4c08c004c08cc08c008dd7181080098108011bad301f001301f301f002375c603a002603a004603600260360046eb8c064004c054dd5000980b980a1baa008163758602c602e602e602e602e0046eacc054004c054c054008dd618098009809980998079baa00a370e90001b8748010c03cc040008c038004c028dd50011b874800858c02cc030008c028004c028008c020004c010dd50008a4c26cacae6955ceaab9e5573eae815d0aba201",
      hash: "d9c639433a3de1adeb247053b7556dd637be9398b245fa0ab351fbbf"
    },
    {
      title: "ownership_registry.ownership_registry.spend",
      datum: {
        title: "_datum",
        schema: {
          $ref: "#/definitions/content_ownership~1types~1OwnershipRegistryDatum"
        }
      },
      redeemer: {
        title: "redeemer",
        schema: {
          $ref: "#/definitions/content_ownership~1types~1OwnershipRegistryRedeemer"
        }
      },
      parameters: [
        {
          title: "oracle_nft",
          schema: {
            $ref: "#/definitions/PolicyId"
          }
        }
      ],
      compiledCode: "590bb40101003232323232323223225333004323232323253323300a3001300b375400426464646464646464a66602460060022a66602a60286ea802c540085854ccc048c0240044c8c8c8c94ccc064c0700084cc02400c894ccc06c008540204c8c008c07c00cdd7180e8010b1bad301a001301a0023758603000260286ea802c54ccc048c01000454ccc054c050dd50058a8010b0b18091baa00a1323232323232323232323232323232533302200114a02a666044604a00226464a666042602660446ea80044c8c8c8c8c94ccc098c05c01054ccc098c05cc09cdd500289919191919191919191919191919191919191919299981e982000109980b00889980b00689980b003899299981f0008a501533303e3041001132533303c302d303d37540022646464a66607e6060002264646464a66608c609200426606c00244a6660900042a010264600460980066eb8c12800858dd6182380098238011bae3045001304137540062a66607e606c002264646464a66608c60920042a00c2c6eb4c11c004c11c008dd7182280098209baa0031533303f303100115333042304137540062a0042c2c607e6ea800854ccc0f4c0b8c0f8dd50008a5114a06082607c6ea800458c8c8cc004004090894ccc104004530103d87a8000132323253330413375e00c60840062604c6608a00297ae01330050050023042002304500230430013374a90011981f980b181e9baa30400014bd700a503301d02923375e602c607a6ea8c084c0f4dd50008070b1bae303e001303e002375c607800260780046eb4c0e8004c0e8008c0e0004c0e0008dd7181b000981b0011bad3034001303400230320013032002375c60600026060004605c002605c0046eb8c0b0004c0a0dd50028b09919192999814981000389919192999816180e98169baa00b132323232323232323232323232323232323232325333043304600213301c01113301c00d13301c007132323232533304700200115333047304a002132533304800400215333048304b0041323253330473039304837540022646466002004264a666094607860966ea80044c8cc00c0044c94ccc130c0f4c134dd50008991919192999829982b00109919299982919b8848000c8c8cc004004c8cc004004110894ccc16400452f5c02660b46ea0ccc0e8dd5981e182c1baa303c3058375460b60026eb8c0c4010dd7181e00219801001182e00091299982c0008a4000266e00dd6982d00099801001182d8009982b1ba900533056375200697ae015333052002100114a02940c10ccc8c004004894ccc15800452000133700900119801001182c80098151bab30373053375401866ebc018c0d4cc150c0acc148dd50049982a1ba7323232533305330443054375400226644646600200200644a6660b400220062660b660b80026600400460ba0026eb0c0b8008cc15cdd38149bac3058305537540022c64a6660ac002298103d87a80001303833057374e60b200297ae0375860700026660020026eb0c0dcc14cdd5005013111299982b0010a5eb8410180008101800009919299982a99b89003480004cc16530101800033059374e00897ae01323305a374e660b46e9c00cdd6182d8009982d182d982e000a5eb80ccc014014004cdc0001a400260b40066eb0c1600092f5c02c6eb8c150004c150008dd718290009bac3051304e37540022c66646002002444a6660a20042980103d87a800013232533305030410031303533054374e00497ae01333005005001337000069000982a8019bac305300237586062609a6ea8010080c13cc130dd50008b181518259baa00422533304a303b304b3754004264646464a6660a260a800426608200244a6660a60042a00e2660866eb0c154008894ccc1540084c00cc1600104c8c008c16400cdd7182b8010b1bac30520013052002375a60a000260986ea800858c130c124dd50008b181398241baa302c30483754004609400800460920040022940dd618238011bac3046304700133044374e66603005e00e012660886e9ccc08c0b094ccc104cdd7980e18219baa00100813301b301a3756604e60866ea80048cdc79bae301d00100b14a097ae016375c608800260880046eb8c108004c108008dd698200009820001181f000981f0011bae303c001303c002375a60740026074004607000260700046eb8c0d8004c0d8008c0d0004c0d0008dd7181900098171baa00b16375a606060620046eb0c0bc004c0acdd50110a999814980d18151baa008132323232323232323232323232323232323232325333040304300213301901113301900d133019007132533304100114a02a6660826088002264a66607e646600200205044a66608800229404c94ccc108cdc79bae304700200614a2266006006002608e00220022940cdd79ba6028374c646600200264660020026eacc098c108dd5181318211baa304500322533304400114bd6f7b630099191919299982299b9148900002153330453371e91010000210031005133049337606ea4008dd3000998030030019bab3046003375c60880046090004608c00244a666086002297adef6c60132330453376060840026e98c8cc004004dd598220011129998230008a5eb7bdb1804c8cc120cdd818228009ba83370290001bad304600133003003304a0023048001330030033047002304500114a066602a05800e0122c6eb8c104004c104008dd7181f800981f8011bad303d001303d002303b001303b002375c607200260720046eb4c0dc004c0dc008c0d4004c0d4008dd718198009819801181880098188011bae302f001302b37540102c4446601c0064a66605866ebcc01cc0b8dd5180918171baa001003133006300537566024605c6ea8c048c0b8dd5000919b8f375c601000200629408c8cc004004008894ccc0b400452f5c0264666444646600200200644a66606600220062646606a6e9ccc0d4dd48031981a98190009981a9819800a5eb80cc00c00cc0dc008c0d4004dd718160009bab302d001330030033031002302f00122323300100100322533302d00114a0264a66605660086eb0c0c0008528899801801800981800091815800912999813180b98139baa002132323232533302d303000213300700313232533302c301d00113232533303130340021323253330303021001132325333035303800213300f00115004163036001303237540062a666060604e0022646464646464a66607260780042a0102c6eb4c0e8004c0e8008dd6981c000981c0011bad3036001303237540062c60606ea80085401058c0c8004c0b8dd50018a99981618118008a99981798171baa003150021616302c37540042a00a2c605c002605c004605800260506ea80085888c94ccc098c05c0044c8c94ccc0acc0b80085401058dd7181600098141baa00315333026301d00113232533302b302e0021500416375c605800260506ea800c58c098dd500118119baa01b3026302337540022c600260446ea8c018c088dd5181280111812981318130008a5033001375860460184602c6660066eacc014c084dd5180298109baa00101d48810022323300100100322533302400114bd7009919299981198028010998138011980200200089980200200098140011813000911192999810180b98109baa0011480004dd6981298111baa001325333020301730213754002298103d87a8000132330010013756604c60466ea8008894ccc094004530103d87a80001323232325333026337220100042a66604c66e3c0200084c02ccc0a8dd4000a5eb80530103d87a8000133006006003375a604e0066eb8c094008c0a4008c09c004c8cc004004010894ccc0900045300103d87a80001323232325333025337220100042a66604a66e3c0200084c028cc0a4dd3000a5eb80530103d87a80001330060060033756604c0066eb8c090008c0a0008c098004dd2a40004604060420026eacc078c07c008dd6180e800980e980e980e980e8011bab301b001301b301b00237586032002603200260300046eb0c058004c048dd50059b8748000dc3a40084464660020020064466006002600400460226024004602000260186ea8008dc3a40042c601a601c004601800260180046014002600c6ea800452613656375c002ae6955ceaab9e5573eae815d0aba21",
      hash: "12114eef00bfb34d7a7d42893b01f6395508fa5a275e2e2c96013446"
    },
    {
      title: "ownership_registry.ownership_registry.else",
      parameters: [
        {
          title: "oracle_nft",
          schema: {
            $ref: "#/definitions/PolicyId"
          }
        }
      ],
      compiledCode: "590bb40101003232323232323223225333004323232323253323300a3001300b375400426464646464646464a66602460060022a66602a60286ea802c540085854ccc048c0240044c8c8c8c94ccc064c0700084cc02400c894ccc06c008540204c8c008c07c00cdd7180e8010b1bad301a001301a0023758603000260286ea802c54ccc048c01000454ccc054c050dd50058a8010b0b18091baa00a1323232323232323232323232323232533302200114a02a666044604a00226464a666042602660446ea80044c8c8c8c8c94ccc098c05c01054ccc098c05cc09cdd500289919191919191919191919191919191919191919299981e982000109980b00889980b00689980b003899299981f0008a501533303e3041001132533303c302d303d37540022646464a66607e6060002264646464a66608c609200426606c00244a6660900042a010264600460980066eb8c12800858dd6182380098238011bae3045001304137540062a66607e606c002264646464a66608c60920042a00c2c6eb4c11c004c11c008dd7182280098209baa0031533303f303100115333042304137540062a0042c2c607e6ea800854ccc0f4c0b8c0f8dd50008a5114a06082607c6ea800458c8c8cc004004090894ccc104004530103d87a8000132323253330413375e00c60840062604c6608a00297ae01330050050023042002304500230430013374a90011981f980b181e9baa30400014bd700a503301d02923375e602c607a6ea8c084c0f4dd50008070b1bae303e001303e002375c607800260780046eb4c0e8004c0e8008c0e0004c0e0008dd7181b000981b0011bad3034001303400230320013032002375c60600026060004605c002605c0046eb8c0b0004c0a0dd50028b09919192999814981000389919192999816180e98169baa00b132323232323232323232323232323232323232325333043304600213301c01113301c00d13301c007132323232533304700200115333047304a002132533304800400215333048304b0041323253330473039304837540022646466002004264a666094607860966ea80044c8cc00c0044c94ccc130c0f4c134dd50008991919192999829982b00109919299982919b8848000c8c8cc004004c8cc004004110894ccc16400452f5c02660b46ea0ccc0e8dd5981e182c1baa303c3058375460b60026eb8c0c4010dd7181e00219801001182e00091299982c0008a4000266e00dd6982d00099801001182d8009982b1ba900533056375200697ae015333052002100114a02940c10ccc8c004004894ccc15800452000133700900119801001182c80098151bab30373053375401866ebc018c0d4cc150c0acc148dd50049982a1ba7323232533305330443054375400226644646600200200644a6660b400220062660b660b80026600400460ba0026eb0c0b8008cc15cdd38149bac3058305537540022c64a6660ac002298103d87a80001303833057374e60b200297ae0375860700026660020026eb0c0dcc14cdd5005013111299982b0010a5eb8410180008101800009919299982a99b89003480004cc16530101800033059374e00897ae01323305a374e660b46e9c00cdd6182d8009982d182d982e000a5eb80ccc014014004cdc0001a400260b40066eb0c1600092f5c02c6eb8c150004c150008dd718290009bac3051304e37540022c66646002002444a6660a20042980103d87a800013232533305030410031303533054374e00497ae01333005005001337000069000982a8019bac305300237586062609a6ea8010080c13cc130dd50008b181518259baa00422533304a303b304b3754004264646464a6660a260a800426608200244a6660a60042a00e2660866eb0c154008894ccc1540084c00cc1600104c8c008c16400cdd7182b8010b1bac30520013052002375a60a000260986ea800858c130c124dd50008b181398241baa302c30483754004609400800460920040022940dd618238011bac3046304700133044374e66603005e00e012660886e9ccc08c0b094ccc104cdd7980e18219baa00100813301b301a3756604e60866ea80048cdc79bae301d00100b14a097ae016375c608800260880046eb8c108004c108008dd698200009820001181f000981f0011bae303c001303c002375a60740026074004607000260700046eb8c0d8004c0d8008c0d0004c0d0008dd7181900098171baa00b16375a606060620046eb0c0bc004c0acdd50110a999814980d18151baa008132323232323232323232323232323232323232325333040304300213301901113301900d133019007132533304100114a02a6660826088002264a66607e646600200205044a66608800229404c94ccc108cdc79bae304700200614a2266006006002608e00220022940cdd79ba6028374c646600200264660020026eacc098c108dd5181318211baa304500322533304400114bd6f7b630099191919299982299b9148900002153330453371e91010000210031005133049337606ea4008dd3000998030030019bab3046003375c60880046090004608c00244a666086002297adef6c60132330453376060840026e98c8cc004004dd598220011129998230008a5eb7bdb1804c8cc120cdd818228009ba83370290001bad304600133003003304a0023048001330030033047002304500114a066602a05800e0122c6eb8c104004c104008dd7181f800981f8011bad303d001303d002303b001303b002375c607200260720046eb4c0dc004c0dc008c0d4004c0d4008dd718198009819801181880098188011bae302f001302b37540102c4446601c0064a66605866ebcc01cc0b8dd5180918171baa001003133006300537566024605c6ea8c048c0b8dd5000919b8f375c601000200629408c8cc004004008894ccc0b400452f5c0264666444646600200200644a66606600220062646606a6e9ccc0d4dd48031981a98190009981a9819800a5eb80cc00c00cc0dc008c0d4004dd718160009bab302d001330030033031002302f00122323300100100322533302d00114a0264a66605660086eb0c0c0008528899801801800981800091815800912999813180b98139baa002132323232533302d303000213300700313232533302c301d00113232533303130340021323253330303021001132325333035303800213300f00115004163036001303237540062a666060604e0022646464646464a66607260780042a0102c6eb4c0e8004c0e8008dd6981c000981c0011bad3036001303237540062c60606ea80085401058c0c8004c0b8dd50018a99981618118008a99981798171baa003150021616302c37540042a00a2c605c002605c004605800260506ea80085888c94ccc098c05c0044c8c94ccc0acc0b80085401058dd7181600098141baa00315333026301d00113232533302b302e0021500416375c605800260506ea800c58c098dd500118119baa01b3026302337540022c600260446ea8c018c088dd5181280111812981318130008a5033001375860460184602c6660066eacc014c084dd5180298109baa00101d48810022323300100100322533302400114bd7009919299981198028010998138011980200200089980200200098140011813000911192999810180b98109baa0011480004dd6981298111baa001325333020301730213754002298103d87a8000132330010013756604c60466ea8008894ccc094004530103d87a80001323232325333026337220100042a66604c66e3c0200084c02ccc0a8dd4000a5eb80530103d87a8000133006006003375a604e0066eb8c094008c0a4008c09c004c8cc004004010894ccc0900045300103d87a80001323232325333025337220100042a66604a66e3c0200084c028cc0a4dd3000a5eb80530103d87a80001330060060033756604c0066eb8c090008c0a0008c098004dd2a40004604060420026eacc078c07c008dd6180e800980e980e980e980e8011bab301b001301b301b00237586032002603200260300046eb0c058004c048dd50059b8748000dc3a40084464660020020064466006002600400460226024004602000260186ea8008dc3a40042c601a601c004601800260180046014002600c6ea800452613656375c002ae6955ceaab9e5573eae815d0aba21",
      hash: "12114eef00bfb34d7a7d42893b01f6395508fa5a275e2e2c96013446"
    },
    {
      title: "ownership_registry_ref_token.ownership_registry_ref_token.mint",
      redeemer: {
        title: "redeemer",
        schema: {
          $ref: "#/definitions/content_ownership~1types~1MintPolarity"
        }
      },
      parameters: [
        {
          title: "oracle_nft",
          schema: {
            $ref: "#/definitions/PolicyId"
          }
        }
      ],
      compiledCode: "59074d0101003232323232323223225333004323232323253323300a3001300b3754004264646464a66601c600a0022a66602260206ea801c540085854ccc038c00c00454ccc044c040dd50038a8010b0b18071baa0061323232323232323232323232323232533301b3012301c37540042a66603c0060022a66603c6042006264a6646603a6002603c6ea80084c8c8c8c8cc0040104c8c8c8c8c8c8c8c94ccc0b000800454ccc0b0c0bc0084c94ccc0b401000854ccc0b4c0c00104c8c94ccc0b0c040c0b4dd5000899192999817180918179baa0011323300f0031533302f302630303754002264646464a66606c60720042646600200444a6660720042646464646464a66607866ebc040c8c8c8c8c8c8c8c0c8cc11cc12001ccc11cc120018cc11cc120014cc11cc120010cc11cc12000ccc11cc120008cc11cc120004cc11cdd419b8001f48008c124c124004c120004c11c004c118004c114004c110004c10c004c0f8dd500f8a99981e0030a99981e00108008a5014a02940c07cc008dd59814181e9baa011301e30013756604e60786ea80448c008c094004c004004894ccc0f000452000133700900119801001181f800a99981b1816803099baf374e00898101800014a02660066eb0c0ec008894ccc0ec0084c00cc0f80104c8c008c0fc00cdd7181e801111919800800801911980180098010010b1bac30370013037002375a606a00260626ea800458c0ccc0c0dd50008b180b18179baa0033031302e37540022c6028605a6ea8008c0bc010008c0b80080045281bac302c00237586056605800264660546e9ccccc004060c0ac0140912201003302a374e666600203060560066eb8c0ac010c8c8c8c8c8cdc5000a441012900337149110a5265676973747279202800330010063300300648008c0040048894ccc0acc0800044cdc599b80002481812210013371666e00cdc1801000a40c066600600666e18008004cdc1800a40286002002444a66605266e2000920141001133300300333706004900a19b82001480512f5c04444660320084a66605466ebcc050c0b0dd50008020980f99980c1bab3017302c37540020060042940dd69814981500098148009814181418141814000981398119baa00422533302230193023375400426464646464646464646464646464646464646464a666072607800426602e02226602e01a26602e00e2a02a2c6eb8c0e8004c0e8008dd7181c000981c0011bad3036001303600230340013034002375c606400260640046eb4c0c0004c0c0008c0b8004c0b8008dd718160009816001181500098150011bae3028001302437540042c44a666042603060446ea80084c8c8c8c94ccc0a0c0ac0084cc01c00c4c8c94ccc09cc0780044c8c94ccc0b0c0bc0084c8c94ccc0acc0880044c8c94ccc0c0c0cc0084cc03c0045401058c0c4004c0b4dd50018a99981598100008991919191919299981a181b8010a8040b1bad30350013035002375a606600260660046eb4c0c4004c0b4dd50018b18159baa0021500416302d001302937540062a66604e60380022a66605460526ea800c540085858c09cdd50010a8028b18148009814801181380098119baa0021622325333021301800113232533302630290021500416375c604e00260466ea800c54ccc084c0580044c8c94ccc098c0a40085401058dd7181380098119baa00316302137540046044603e6ea8008dc3a40082c6008603a6ea8c020c074dd518100018008008a99980d1807980d9baa00113233001001300600c22533301f00114a2264a66603a64a66603c66e3cdd7180400080a099b88375a600e00290000a51375860440042660060060022940c088004528180f0029bac301d301e0042301d301e301e0012301c0012323300100100222533301b00114bd7009919991119198008008019129998108008801899198119ba733023375200c66046604000266046604200297ae03300300330250023023001375c60340026eacc06c004cc00c00cc07c008c074004cc060034cc060dd3998021bac30190082300a33300337566004602e6ea8c008c05cdd5000809a45004bd701180c980d00091119299980b1805980b9baa0011480004dd6980d980c1baa001325333016300b301737540022980103d87a8000132330010013756603860326ea8008894ccc06c004530103d87a8000132323232533301c337220100042a66603866e3c0200084c02ccc080dd4000a5eb80530103d87a8000133006006003375a603a0066eb8c06c008c07c008c074004c8cc004004010894ccc0680045300103d87a8000132323232533301b337220100042a66603666e3c0200084c028cc07cdd3000a5eb80530103d87a8000133006006003375660380066eb8c068008c078008c070004dd2a400044646600200200644a66602e002297ae0132325333016300500213301a00233004004001133004004001301b002301900137566028602a602a0046eb0c04c004c04cc04c004c038dd50039b8748008dd7180798061baa002370e90000b1806980700118060009806001180500098031baa00114984d958dd7000ab9a5573aaae7955cfaba05742ae89",
      hash: "fff25ccc074dc16f05defe497e8e250b15cd491c5565a63c260eb2b4"
    },
    {
      title: "ownership_registry_ref_token.ownership_registry_ref_token.else",
      parameters: [
        {
          title: "oracle_nft",
          schema: {
            $ref: "#/definitions/PolicyId"
          }
        }
      ],
      compiledCode: "59074d0101003232323232323223225333004323232323253323300a3001300b3754004264646464a66601c600a0022a66602260206ea801c540085854ccc038c00c00454ccc044c040dd50038a8010b0b18071baa0061323232323232323232323232323232533301b3012301c37540042a66603c0060022a66603c6042006264a6646603a6002603c6ea80084c8c8c8c8cc0040104c8c8c8c8c8c8c8c94ccc0b000800454ccc0b0c0bc0084c94ccc0b401000854ccc0b4c0c00104c8c94ccc0b0c040c0b4dd5000899192999817180918179baa0011323300f0031533302f302630303754002264646464a66606c60720042646600200444a6660720042646464646464a66607866ebc040c8c8c8c8c8c8c8c0c8cc11cc12001ccc11cc120018cc11cc120014cc11cc120010cc11cc12000ccc11cc120008cc11cc120004cc11cdd419b8001f48008c124c124004c120004c11c004c118004c114004c110004c10c004c0f8dd500f8a99981e0030a99981e00108008a5014a02940c07cc008dd59814181e9baa011301e30013756604e60786ea80448c008c094004c004004894ccc0f000452000133700900119801001181f800a99981b1816803099baf374e00898101800014a02660066eb0c0ec008894ccc0ec0084c00cc0f80104c8c008c0fc00cdd7181e801111919800800801911980180098010010b1bac30370013037002375a606a00260626ea800458c0ccc0c0dd50008b180b18179baa0033031302e37540022c6028605a6ea8008c0bc010008c0b80080045281bac302c00237586056605800264660546e9ccccc004060c0ac0140912201003302a374e666600203060560066eb8c0ac010c8c8c8c8c8cdc5000a441012900337149110a5265676973747279202800330010063300300648008c0040048894ccc0acc0800044cdc599b80002481812210013371666e00cdc1801000a40c066600600666e18008004cdc1800a40286002002444a66605266e2000920141001133300300333706004900a19b82001480512f5c04444660320084a66605466ebcc050c0b0dd50008020980f99980c1bab3017302c37540020060042940dd69814981500098148009814181418141814000981398119baa00422533302230193023375400426464646464646464646464646464646464646464a666072607800426602e02226602e01a26602e00e2a02a2c6eb8c0e8004c0e8008dd7181c000981c0011bad3036001303600230340013034002375c606400260640046eb4c0c0004c0c0008c0b8004c0b8008dd718160009816001181500098150011bae3028001302437540042c44a666042603060446ea80084c8c8c8c94ccc0a0c0ac0084cc01c00c4c8c94ccc09cc0780044c8c94ccc0b0c0bc0084c8c94ccc0acc0880044c8c94ccc0c0c0cc0084cc03c0045401058c0c4004c0b4dd50018a99981598100008991919191919299981a181b8010a8040b1bad30350013035002375a606600260660046eb4c0c4004c0b4dd50018b18159baa0021500416302d001302937540062a66604e60380022a66605460526ea800c540085858c09cdd50010a8028b18148009814801181380098119baa0021622325333021301800113232533302630290021500416375c604e00260466ea800c54ccc084c0580044c8c94ccc098c0a40085401058dd7181380098119baa00316302137540046044603e6ea8008dc3a40082c6008603a6ea8c020c074dd518100018008008a99980d1807980d9baa00113233001001300600c22533301f00114a2264a66603a64a66603c66e3cdd7180400080a099b88375a600e00290000a51375860440042660060060022940c088004528180f0029bac301d301e0042301d301e301e0012301c0012323300100100222533301b00114bd7009919991119198008008019129998108008801899198119ba733023375200c66046604000266046604200297ae03300300330250023023001375c60340026eacc06c004cc00c00cc07c008c074004cc060034cc060dd3998021bac30190082300a33300337566004602e6ea8c008c05cdd5000809a45004bd701180c980d00091119299980b1805980b9baa0011480004dd6980d980c1baa001325333016300b301737540022980103d87a8000132330010013756603860326ea8008894ccc06c004530103d87a8000132323232533301c337220100042a66603866e3c0200084c02ccc080dd4000a5eb80530103d87a8000133006006003375a603a0066eb8c06c008c07c008c074004c8cc004004010894ccc0680045300103d87a8000132323232533301b337220100042a66603666e3c0200084c028cc07cdd3000a5eb80530103d87a8000133006006003375660380066eb8c068008c078008c070004dd2a400044646600200200644a66602e002297ae0132325333016300500213301a00233004004001133004004001301b002301900137566028602a602a0046eb0c04c004c04cc04c004c038dd50039b8748008dd7180798061baa002370e90000b1806980700118060009806001180500098031baa00114984d958dd7000ab9a5573aaae7955cfaba05742ae89",
      hash: "fff25ccc074dc16f05defe497e8e250b15cd491c5565a63c260eb2b4"
    }
  ],
  definitions: {
    ByteArray: {
      dataType: "bytes"
    },
    Int: {
      dataType: "integer"
    },
    List$ByteArray: {
      dataType: "list",
      items: {
        $ref: "#/definitions/ByteArray"
      }
    },
    List$List$ByteArray: {
      dataType: "list",
      items: {
        $ref: "#/definitions/List$ByteArray"
      }
    },
    Option$StakeCredential: {
      title: "Option",
      anyOf: [
        {
          title: "Some",
          description: "An optional value.",
          dataType: "constructor",
          index: 0,
          fields: [
            {
              $ref: "#/definitions/StakeCredential"
            }
          ]
        },
        {
          title: "None",
          description: "Nothing.",
          dataType: "constructor",
          index: 1,
          fields: []
        }
      ]
    },
    PaymentCredential: {
      title: "PaymentCredential",
      description: "A general structure for representing an on-chain `Credential`.\n\n Credentials are always one of two kinds: a direct public/private key\n pair, or a script (native or Plutus).",
      anyOf: [
        {
          title: "VerificationKey",
          dataType: "constructor",
          index: 0,
          fields: [
            {
              $ref: "#/definitions/VerificationKeyHash"
            }
          ]
        },
        {
          title: "Script",
          dataType: "constructor",
          index: 1,
          fields: [
            {
              $ref: "#/definitions/ScriptHash"
            }
          ]
        }
      ]
    },
    PolicyId: {
      title: "PolicyId",
      dataType: "bytes"
    },
    ScriptHash: {
      title: "ScriptHash",
      dataType: "bytes"
    },
    StakeCredential: {
      title: "StakeCredential",
      description: "Represent a type of object that can be represented either inline (by hash)\n or via a reference (i.e. a pointer to an on-chain location).\n\n This is mainly use for capturing pointers to a stake credential\n registration certificate in the case of so-called pointer addresses.",
      anyOf: [
        {
          title: "Inline",
          dataType: "constructor",
          index: 0,
          fields: [
            {
              $ref: "#/definitions/cardano~1address~1Credential"
            }
          ]
        },
        {
          title: "Pointer",
          dataType: "constructor",
          index: 1,
          fields: [
            {
              title: "slot_number",
              $ref: "#/definitions/Int"
            },
            {
              title: "transaction_index",
              $ref: "#/definitions/Int"
            },
            {
              title: "certificate_index",
              $ref: "#/definitions/Int"
            }
          ]
        }
      ]
    },
    VerificationKeyHash: {
      title: "VerificationKeyHash",
      dataType: "bytes"
    },
    "cardano/address/Address": {
      title: "Address",
      description: "A Cardano `Address` typically holding one or two credential references.\n\n Note that legacy bootstrap addresses (a.k.a. 'Byron addresses') are\n completely excluded from Plutus contexts. Thus, from an on-chain\n perspective only exists addresses of type 00, 01, ..., 07 as detailed\n in [CIP-0019 :: Shelley Addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019/#shelley-addresses).",
      anyOf: [
        {
          title: "Address",
          dataType: "constructor",
          index: 0,
          fields: [
            {
              title: "payment_credential",
              $ref: "#/definitions/PaymentCredential"
            },
            {
              title: "stake_credential",
              $ref: "#/definitions/Option$StakeCredential"
            }
          ]
        }
      ]
    },
    "cardano/address/Credential": {
      title: "Credential",
      description: "A general structure for representing an on-chain `Credential`.\n\n Credentials are always one of two kinds: a direct public/private key\n pair, or a script (native or Plutus).",
      anyOf: [
        {
          title: "VerificationKey",
          dataType: "constructor",
          index: 0,
          fields: [
            {
              $ref: "#/definitions/VerificationKeyHash"
            }
          ]
        },
        {
          title: "Script",
          dataType: "constructor",
          index: 1,
          fields: [
            {
              $ref: "#/definitions/ScriptHash"
            }
          ]
        }
      ]
    },
    "cardano/transaction/OutputReference": {
      title: "OutputReference",
      description: "An `OutputReference` is a unique reference to an output on-chain. The `output_index`\n corresponds to the position in the output list of the transaction (identified by its id)\n that produced that output",
      anyOf: [
        {
          title: "OutputReference",
          dataType: "constructor",
          index: 0,
          fields: [
            {
              title: "transaction_id",
              $ref: "#/definitions/ByteArray"
            },
            {
              title: "output_index",
              $ref: "#/definitions/Int"
            }
          ]
        }
      ]
    },
    "content_ownership/types/ContentRegistryDatum": {
      title: "ContentRegistryDatum",
      anyOf: [
        {
          title: "ContentRegistryDatum",
          dataType: "constructor",
          index: 0,
          fields: [
            {
              title: "count",
              $ref: "#/definitions/Int"
            },
            {
              title: "registry",
              $ref: "#/definitions/List$ByteArray"
            }
          ]
        }
      ]
    },
    "content_ownership/types/ContentRegistryRedeemer": {
      title: "ContentRegistryRedeemer",
      anyOf: [
        {
          title: "CreateContent",
          dataType: "constructor",
          index: 0,
          fields: [
            {
              title: "content_hash",
              $ref: "#/definitions/ByteArray"
            },
            {
              title: "owner",
              $ref: "#/definitions/List$ByteArray"
            }
          ]
        },
        {
          title: "UpdateContent",
          dataType: "constructor",
          index: 1,
          fields: [
            {
              title: "new_content_hash",
              $ref: "#/definitions/ByteArray"
            },
            {
              title: "content_number",
              $ref: "#/definitions/Int"
            }
          ]
        },
        {
          title: "StopContentRegistry",
          dataType: "constructor",
          index: 2,
          fields: []
        }
      ]
    },
    "content_ownership/types/MintPolarity": {
      title: "MintPolarity",
      anyOf: [
        {
          title: "RMint",
          dataType: "constructor",
          index: 0,
          fields: []
        },
        {
          title: "RBurn",
          dataType: "constructor",
          index: 1,
          fields: []
        }
      ]
    },
    "content_ownership/types/OracleDatum": {
      title: "OracleDatum",
      anyOf: [
        {
          title: "OracleDatum",
          dataType: "constructor",
          index: 0,
          fields: [
            {
              title: "oracle_nft",
              $ref: "#/definitions/PolicyId"
            },
            {
              title: "oracle_address",
              $ref: "#/definitions/cardano~1address~1Address"
            },
            {
              title: "content_registry_ref_token",
              $ref: "#/definitions/PolicyId"
            },
            {
              title: "content_registry_address",
              $ref: "#/definitions/cardano~1address~1Address"
            },
            {
              title: "content_registry_count",
              $ref: "#/definitions/Int"
            },
            {
              title: "ownership_registry_ref_token",
              $ref: "#/definitions/PolicyId"
            },
            {
              title: "ownership_registry_address",
              $ref: "#/definitions/cardano~1address~1Address"
            },
            {
              title: "ownership_registry_count",
              $ref: "#/definitions/Int"
            },
            {
              title: "operation_key",
              $ref: "#/definitions/ByteArray"
            },
            {
              title: "stop_key",
              $ref: "#/definitions/ByteArray"
            }
          ]
        }
      ]
    },
    "content_ownership/types/OracleRedeemer": {
      title: "OracleRedeemer",
      anyOf: [
        {
          title: "CreateContentRegistry",
          dataType: "constructor",
          index: 0,
          fields: []
        },
        {
          title: "CreateOwnershipRegistry",
          dataType: "constructor",
          index: 1,
          fields: []
        },
        {
          title: "RotateKey",
          dataType: "constructor",
          index: 2,
          fields: [
            {
              title: "new_operation_key",
              $ref: "#/definitions/ByteArray"
            },
            {
              title: "new_stop_key",
              $ref: "#/definitions/ByteArray"
            }
          ]
        },
        {
          title: "StopApp",
          dataType: "constructor",
          index: 3,
          fields: []
        }
      ]
    },
    "content_ownership/types/OwnershipRegistryDatum": {
      title: "OwnershipRegistryDatum",
      anyOf: [
        {
          title: "OwnershipRegistryDatum",
          dataType: "constructor",
          index: 0,
          fields: [
            {
              title: "count",
              $ref: "#/definitions/Int"
            },
            {
              title: "registry",
              $ref: "#/definitions/List$List$ByteArray"
            }
          ]
        }
      ]
    },
    "content_ownership/types/OwnershipRegistryRedeemer": {
      title: "OwnershipRegistryRedeemer",
      anyOf: [
        {
          title: "CreateOwnershipRecord",
          dataType: "constructor",
          index: 0,
          fields: []
        },
        {
          title: "TransferOwnership",
          dataType: "constructor",
          index: 1,
          fields: [
            {
              title: "new_owner_token",
              $ref: "#/definitions/List$ByteArray"
            },
            {
              title: "content_number",
              $ref: "#/definitions/Int"
            }
          ]
        },
        {
          title: "StopOwnershipRegistry",
          dataType: "constructor",
          index: 2,
          fields: []
        }
      ]
    }
  }
};

// src/content-ownership/offchain/common.ts
var getScriptCbor = (oracleParamUtxo, scriptIndex) => {
  const validators = plutus_default.validators;
  const oracleNFTCbor = applyParamsToScript(
    validators[4].compiledCode,
    [outputReference(oracleParamUtxo.txHash, oracleParamUtxo.outputIndex)],
    "JSON"
  );
  const oracleNFTToParam = builtinByteString(
    resolveScriptHash(oracleNFTCbor, "V3")
  );
  switch (scriptIndex) {
    case "OracleNFT":
      return oracleNFTCbor;
    case "OracleValidator":
      return applyParamsToScript(validators[6].compiledCode, [], "JSON");
    case "ContentRegistry":
      return applyParamsToScript(
        validators[0].compiledCode,
        [oracleNFTToParam],
        "JSON"
      );
    case "ContentRefToken":
      return applyParamsToScript(
        validators[2].compiledCode,
        [oracleNFTToParam],
        "JSON"
      );
    case "OwnershipRegistry":
      return applyParamsToScript(
        validators[8].compiledCode,
        [oracleNFTToParam],
        "JSON"
      );
    case "OwnershipRefToken":
      return applyParamsToScript(
        validators[10].compiledCode,
        [oracleNFTToParam],
        "JSON"
      );
  }
};
var getScriptHash = (oracleParamUtxo, scriptIndex) => {
  const scriptCbor = getScriptCbor(oracleParamUtxo, scriptIndex);
  return resolveScriptHash(scriptCbor, "V3");
};
var getScriptInfo = (oracleParamUtxo, stakeCredential, networkId = 0) => {
  const info = {
    oracleNFT: {
      hash: getScriptHash(oracleParamUtxo, "OracleNFT"),
      cbor: getScriptCbor(oracleParamUtxo, "OracleNFT")
    },
    oracleValidator: {
      hash: getScriptHash(oracleParamUtxo, "OracleValidator"),
      cbor: getScriptCbor(oracleParamUtxo, "OracleValidator"),
      address: ""
    },
    contentRegistry: {
      hash: getScriptHash(oracleParamUtxo, "ContentRegistry"),
      cbor: getScriptCbor(oracleParamUtxo, "ContentRegistry"),
      address: ""
    },
    contentRefToken: {
      hash: getScriptHash(oracleParamUtxo, "ContentRefToken"),
      cbor: getScriptCbor(oracleParamUtxo, "ContentRefToken")
    },
    ownershipRegistry: {
      hash: getScriptHash(oracleParamUtxo, "OwnershipRegistry"),
      cbor: getScriptCbor(oracleParamUtxo, "OwnershipRegistry"),
      address: ""
    },
    ownershipRefToken: {
      hash: getScriptHash(oracleParamUtxo, "OwnershipRefToken"),
      cbor: getScriptCbor(oracleParamUtxo, "OwnershipRefToken")
    }
  };
  const oracleAddress = serializePlutusScript2(
    { code: info.oracleValidator.cbor, version: "V3" },
    stakeCredential,
    networkId
  ).address;
  const contentRegistryAddress = serializePlutusScript2(
    { code: info.contentRegistry.cbor, version: "V3" },
    stakeCredential,
    networkId
  ).address;
  const ownershipRegistryAddress = serializePlutusScript2(
    { code: info.ownershipRegistry.cbor, version: "V3" },
    stakeCredential,
    networkId
  ).address;
  info.oracleValidator.address = oracleAddress;
  info.contentRegistry.address = contentRegistryAddress;
  info.ownershipRegistry.address = ownershipRegistryAddress;
  return info;
};

// src/content-ownership/offchain/offchain.ts
var MeshContentOwnershipContract = class extends MeshTxInitiator {
  paramUtxo = {
    txHash: "0000000000000000000000000000000000000000000000000000000000000000",
    outputIndex: 0
  };
  scriptInfo = getScriptInfo({
    outputIndex: 0,
    txHash: "0000000000000000000000000000000000000000000000000000000000000000"
  });
  refScriptUtxos = {
    contentRefToken: {
      txHash: "0000000000000000000000000000000000000000000000000000000000000000",
      outputIndex: 0
    },
    ownershipRefToken: {
      txHash: "0000000000000000000000000000000000000000000000000000000000000000",
      outputIndex: 0
    },
    contentRegistry: {
      txHash: "0000000000000000000000000000000000000000000000000000000000000000",
      outputIndex: 0
    },
    ownershipRegistry: {
      txHash: "0000000000000000000000000000000000000000000000000000000000000000",
      outputIndex: 0
    }
  };
  operationAddress;
  opsKey;
  constructor(inputs, contract) {
    super(inputs);
    this.paramUtxo = contract.paramUtxo || this.paramUtxo;
    this.refScriptUtxos = contract.refScriptUtxos || this.refScriptUtxos;
    this.scriptInfo = getScriptInfo(
      this.paramUtxo,
      this.stakeCredential,
      this.networkId
    );
    this.operationAddress = contract.operationAddress;
    const serializedOpsPlutusAddr = deserializeAddress(this.operationAddress);
    this.opsKey = serializedOpsPlutusAddr.pubKeyHash;
  }
  getOwnerNativeScript = () => {
    const { pubKeyHash: keyHash } = deserializeAddress(this.operationAddress);
    const nativeScript = {
      type: "all",
      scripts: [
        {
          type: "sig",
          keyHash
        }
      ]
    };
    const { address: scriptAddress } = serializeNativeScript(
      nativeScript,
      void 0,
      this.networkId
    );
    return {
      nativeScript,
      scriptAddress
    };
  };
  /**
   * [Setup phase]
   * This is the first transaction you need to setup the contract.
   *
   * This transaction mints the one-time minting policy (a NFT) for the contract.
   * It will be attached with the datum which serves as the single source of truth for the contract oracle.
   *
   * Note: You must save the `paramUtxo` for future transactions.
   *
   * @returns {Promise<{ txHexMintOneTimeMintingPolicy: string, txHexSetupOracleUtxo: string, paramUtxo: UTxO["input"] }>}
   *
   * @example
   * ```typescript
   * const { tx, paramUtxo } = await contract.mintOneTimeMintingPolicy();
   * const signedTx = await wallet.signTx(tx);
   * const txHash = await wallet.submitTx(signedTx);
   * ```
   */
  mintOneTimeMintingPolicy = async () => {
    const { utxos, collateral, walletAddress } = await this.getWalletInfoForTx();
    if (utxos?.length <= 0) {
      throw new Error("No UTxOs found");
    }
    const paramUtxo = utxos[0];
    const script = plutus_default.validators[4].compiledCode;
    const param = mOutputReference(
      paramUtxo.input.txHash,
      paramUtxo.input.outputIndex
    );
    const paramScript = applyParamsToScript2(script, [param]);
    const policyId = resolveScriptHash2(paramScript, "V3");
    const tokenName2 = "";
    const txHex = await this.mesh.txIn(
      paramUtxo.input.txHash,
      paramUtxo.input.outputIndex,
      paramUtxo.output.amount,
      paramUtxo.output.address
    ).mintPlutusScriptV3().mint("1", policyId, tokenName2).mintingScript(paramScript).mintRedeemerValue(mConStr0([])).txInCollateral(
      collateral.input.txHash,
      collateral.input.outputIndex,
      collateral.output.amount,
      collateral.output.address
    ).changeAddress(walletAddress).selectUtxosFrom(utxos).complete();
    this.scriptInfo = getScriptInfo(
      paramUtxo.input,
      this.stakeCredential,
      this.networkId
    );
    this.paramUtxo = paramUtxo.input;
    return { tx: txHex, paramUtxo: paramUtxo.input };
  };
  /**
   * [Setup phase]
   * This is the second transaction you need to setup the contract.
   *
   * This transaction send the NFT to a oracle contract locking the datum,
   * which serves as the single source of truth for the contract oracle with data integrity.
   *
   * Note: You must provide the `paramUtxo` from the `mintOneTimeMintingPolicy` transaction.
   *
   * @returns {Promise<string>}
   *
   * @example
   * ```typescript
   * const txHex = await contract.setupOracleUtxo();
   * const signedTx = await wallet.signTx(txHex);
   * const txHash = await wallet.submitTx(signedTx);
   * ```
   */
  setupOracleUtxo = async () => {
    const { utxos, walletAddress } = await this.getWalletInfoForTx();
    const datumValue = this.getOracleDatum(0, 0);
    const txHex = await this.mesh.txOut(this.scriptInfo.oracleValidator.address, [
      { unit: this.scriptInfo.oracleNFT.hash + "", quantity: "1" }
    ]).txOutInlineDatumValue(datumValue).changeAddress(walletAddress).selectUtxosFrom(utxos).complete();
    return txHex;
  };
  /**
   * [Setup phase]
   * This are the next transactions you need to setup the contract.
   * You need to run once for each script, and you would likely have to run one after the previous one is confirmed.
   *
   * This transaction sends the reference scripts to the blockchain for later transactions,
   * boosting efficiency and avoid exceeding 16kb of transaction size limits enforced by protocol parameter.
   *
   * Note: You must provide the `paramUtxo` from the `mintOneTimeMintingPolicy` transaction.
   * Note: You must save txHash (after signed and submitted) for `ContentRegistry`, `ContentRefToken`, `OwnershipRegistry`, `OwnershipRefToken` transactions for future transactions.
   *
   * @param scriptIndex - "OracleNFT" | "OracleValidator" | "ContentRegistry" | "ContentRefToken" | "OwnershipRegistry" | "OwnershipRefToken"
   * @returns {Promise<string>}
   *
   * @example
   * ```typescript
   * const txHexOracleNFT = await contract.sendRefScriptOnchain("OracleNFT");
   * const signedTxOracleNFT = await wallet.signTx(txHexOracleNFT);
   * const txHashOracleNFT = await wallet.submitTx(signedTxOracleNFT);
   *
   * const txHexOracleValidator = await contract.sendRefScriptOnchain("OracleValidator");
   * ... // repeat for each script
   *
   * const txHexOwnershipRefToken = await contract.sendRefScriptOnchain("OwnershipRefToken");
   * const signedTxOwnershipRefToken = await wallet.signTx(txHexOwnershipRefToken);
   * const txHashOwnershipRefToken = await wallet.submitTx(signedTxOwnershipRefToken);
   * ```
   */
  sendRefScriptOnchain = async (scriptIndex) => {
    const { utxos, walletAddress } = await this.getWalletInfoForTx();
    const { scriptAddress } = this.getOwnerNativeScript();
    const txHex = await this.mesh.txOut(scriptAddress, []).txOutReferenceScript(getScriptCbor(this.paramUtxo, scriptIndex)).changeAddress(walletAddress).selectUtxosFrom(utxos, "experimental", "20000000").complete();
    return txHex;
  };
  /**
   * [Setup phase]
   * This is the next transaction you need to setup the contract after completing all the `sendRefScriptOnchain` transactions.
   *
   * This transaction creates one content registry. Each registry should comes in pair with one ownership registry and
   * each pair of registry serves around 50 records of content ownership. The application can be scaled indefinitely
   * according to the number of parallelization needed and volumes of content expected to be managed.
   *
   * Note: You must provide the `paramUtxo` from the `mintOneTimeMintingPolicy` transaction.
   * Note: You must provide the txHash for `ContentRegistry`, `ContentRefToken`, `OwnershipRegistry`, `OwnershipRefToken`
   *
   * @returns {Promise<string>}
   *
   * @example
   * ```typescript
   * const txHex = await contract.createContentRegistry();
   * const signedTx = await wallet.signTx(txHex);
   * const txHash = await wallet.submitTx(signedTx);
   * ```
   */
  createContentRegistry = async () => {
    const { utxos, collateral, walletAddress } = await this.getWalletInfoForTx();
    const scriptUtxo = await this.fetcher.fetchAddressUTxOs(
      this.scriptInfo.oracleValidator.address,
      this.scriptInfo.oracleNFT.hash
    );
    const currentOracleDatum = await this.getCurrentOracleDatum(scriptUtxo);
    const contentNumber = currentOracleDatum.fields[4].int;
    const ownershipNumber = currentOracleDatum.fields[7].int;
    const contentTokenName = stringToHex(`Registry (${contentNumber})`);
    const {
      input: { txHash: oracleTxHash, outputIndex: oracleTxId },
      output: { address: oracleAddress, amount: oracleValue }
    } = scriptUtxo[0];
    const oracleDatumValue = this.getOracleDatum(
      contentNumber + 1,
      ownershipNumber
    );
    console.log("Oracle Datum", oracleDatumValue);
    console.log("this.refScriptUtxos", this.refScriptUtxos);
    const txHex = await this.mesh.spendingPlutusScriptV3().txIn(oracleTxHash, oracleTxId, oracleValue, oracleAddress).txInInlineDatumPresent().txInRedeemerValue(mConStr0([])).txInScript(this.scriptInfo.oracleValidator.cbor).txOut(this.scriptInfo.oracleValidator.address, [
      { unit: this.scriptInfo.oracleNFT.hash + "", quantity: "1" }
    ]).txOutInlineDatumValue(oracleDatumValue).txOut(this.scriptInfo.contentRegistry.address, [
      {
        unit: this.scriptInfo.contentRefToken.hash + contentTokenName,
        quantity: "1"
      }
    ]).txOutInlineDatumValue(mConStr0([0, []])).mintPlutusScriptV3().mint("1", this.scriptInfo.contentRefToken.hash, contentTokenName).mintTxInReference(
      this.refScriptUtxos.contentRefToken.txHash,
      this.refScriptUtxos.contentRefToken.outputIndex,
      (this.scriptInfo.contentRefToken.cbor.length / 2).toString(),
      this.scriptInfo.contentRefToken.hash
    ).mintRedeemerValue(mConStr0([])).txInCollateral(
      collateral.input.txHash,
      collateral.input.outputIndex,
      collateral.output.amount,
      collateral.output.address
    ).changeAddress(walletAddress).selectUtxosFrom(utxos, "largestFirstMultiAsset").complete();
    return txHex;
  };
  /**
   * [Setup phase]
   * This is the last transaction you need to setup the contract after completing all the `sendRefScriptOnchain` transactions.
   *
   * This transaction creates one content registry. Each registry should comes in pair with one content registry and
   * each pair of registry serves around 50 records of content ownership. The application can be scaled indefinitely
   * according to the number of parallelization needed and volumes of content expected to be managed.
   *
   * Note: You must provide the `paramUtxo` from the `mintOneTimeMintingPolicy` transaction.
   * Note: You must provide the txHash for `ContentRegistry`, `ContentRefToken`, `OwnershipRegistry`, `OwnershipRefToken`
   *
   * @returns {Promise<string>}
   *
   * @example
   * ```typescript
   * const txHex = await contract.createOwnershipRegistry();
   * const signedTx = await wallet.signTx(txHex);
   * const txHash = await wallet.submitTx(signedTx);
   * ```
   */
  createOwnershipRegistry = async () => {
    const { utxos, collateral, walletAddress } = await this.getWalletInfoForTx();
    const scriptUtxo = await this.fetcher.fetchAddressUTxOs(
      this.scriptInfo.oracleValidator.address,
      this.scriptInfo.oracleNFT.hash
    );
    const currentOracleDatum = await this.getCurrentOracleDatum(scriptUtxo);
    const contentNumber = currentOracleDatum.fields[4].int;
    const ownershipNumber = currentOracleDatum.fields[7].int;
    const ownershipTokenName = stringToHex(`Registry (${ownershipNumber})`);
    const {
      input: { txHash: oracleTxHash, outputIndex: oracleTxId },
      output: { address: oracleAddress, amount: oracleValue }
    } = scriptUtxo[0];
    const oracleDatumValue = this.getOracleDatum(
      contentNumber,
      ownershipNumber + 1
    );
    console.log("Oracle Datum", oracleDatumValue);
    const txHex = await this.mesh.spendingPlutusScriptV3().txIn(oracleTxHash, oracleTxId, oracleValue, oracleAddress).txInInlineDatumPresent().txInRedeemerValue(mConStr1([])).txInScript(this.scriptInfo.oracleValidator.cbor).txOut(this.scriptInfo.oracleValidator.address, [
      { unit: this.scriptInfo.oracleNFT.hash + "", quantity: "1" }
    ]).txOutInlineDatumValue(oracleDatumValue).txOut(this.scriptInfo.ownershipRegistry.address, [
      {
        unit: this.scriptInfo.ownershipRefToken.hash + ownershipTokenName,
        quantity: "1"
      }
    ]).txOutInlineDatumValue(mConStr0([0, []])).mintPlutusScriptV3().mint("1", this.scriptInfo.ownershipRefToken.hash, ownershipTokenName).mintTxInReference(
      this.refScriptUtxos.ownershipRefToken.txHash,
      this.refScriptUtxos.ownershipRefToken.outputIndex,
      (this.scriptInfo.ownershipRefToken.cbor.length / 2).toString(),
      this.scriptInfo.ownershipRefToken.hash
    ).mintRedeemerValue(mConStr0([])).txInCollateral(
      collateral.input.txHash,
      collateral.input.outputIndex,
      collateral.output.amount,
      collateral.output.address
    ).changeAddress(walletAddress).selectUtxosFrom(utxos, "largestFirstMultiAsset").complete();
    return txHex;
  };
  /**
   * Get the current oracle data.
   *
   * @returns {Promise<{
   *  contentNumber: number,
   *  ownershipNumber: number,
   * }>}
   *
   * @example
   * ```typescript
   * const oracleData = await contract.getOracleData();
   * ```
   */
  getOracleData = async () => {
    const scriptUtxo = await this.fetcher.fetchAddressUTxOs(
      this.scriptInfo.oracleValidator.address,
      this.scriptInfo.oracleNFT.hash
    );
    const currentOracleDatum = await this.getCurrentOracleDatum(scriptUtxo);
    const contentNumber = currentOracleDatum.fields[4].int;
    const ownershipNumber = currentOracleDatum.fields[7].int;
    return {
      contentNumber,
      ownershipNumber
    };
  };
  /**
   * [User]
   *
   * This transaction mints a user token which can be used to represent the ownership of the content. This token is used in `createContent()` transaction.
   *
   * @param tokenName - The name of the token that you can specify.
   * @param tokenMetadata - The metadata of the token that you can specify.
   * @returns {Promise<string>}
   *
   * @example
   * ```typescript
   * const tx = await contract.mintUserToken("MeshContentOwnership", {
   *   name: "Mesh Content Ownership",
   *   description: "Demo at https://meshjs.dev/smart-contracts/content-ownership",
   * });
   * const signedTx = await wallet.signTx(tx, true);
   * const txHash = await wallet.submitTx(signedTx);
   */
  mintUserToken = async (tokenName2, tokenMetadata = {}) => {
    const { utxos, walletAddress } = await this.getWalletInfoForTx();
    const { pubKeyHash: keyHash } = deserializeAddress(walletAddress);
    const nativeScript = {
      type: "all",
      scripts: [
        {
          type: "sig",
          keyHash
        }
      ]
    };
    const forgingScript = ForgeScript.fromNativeScript(nativeScript);
    const policyId = resolveScriptHash2(forgingScript);
    const tokenNameHex = stringToHex(tokenName2);
    const metadata = { [policyId]: { [tokenName2]: { ...tokenMetadata } } };
    const txHex = await this.mesh.mint("1", policyId, tokenNameHex).mintingScript(forgingScript).metadataValue(721, metadata).changeAddress(walletAddress).selectUtxosFrom(utxos).complete();
    return txHex;
  };
  /**
   *
   * @param ownerAssetHex
   * @param contentHashHex
   * @param registryNumber
   * @returns
   */
  createContent = async (ownerAssetHex, contentHashHex, registryNumber = 0) => {
    const { utxos, collateral, walletAddress } = await this.getWalletInfoForTx();
    const registryName = stringToHex(`Registry (${registryNumber})`);
    const oracleUtxo = await this.fetcher.fetchAddressUTxOs(
      this.scriptInfo.oracleValidator.address,
      this.scriptInfo.oracleNFT.hash
    );
    const contentUtxo = await this.fetcher.fetchAddressUTxOs(
      this.scriptInfo.contentRegistry.address,
      this.scriptInfo.contentRefToken.hash + registryName
    );
    const ownershipUtxo = await this.fetcher.fetchAddressUTxOs(
      this.scriptInfo.ownershipRegistry.address,
      this.scriptInfo.ownershipRefToken.hash + registryName
    );
    const { txHash: oracleTxHash, outputIndex: oracleTxId } = oracleUtxo[0].input;
    const {
      input: { txHash: contentTxHash, outputIndex: contentTxId },
      output: { address: _contentAddress, amount: contentAmount }
    } = contentUtxo[0];
    const {
      input: { txHash: ownershipTxHash, outputIndex: ownershipTxId },
      output: { amount: ownershipValue, address: ownershipAddress }
    } = ownershipUtxo[0];
    const ownerAssetClass = [
      ownerAssetHex.slice(0, 56),
      ownerAssetHex.slice(56)
    ];
    const newContentRegistry = this.insertContentRegistry(
      contentUtxo[0].output.plutusData,
      contentHashHex
    );
    const newOwnershipRegistry = this.insertOwnershipRegistry(
      ownershipUtxo[0].output.plutusData,
      ownerAssetClass
    );
    const txHex = await this.mesh.spendingPlutusScriptV3().txIn(
      contentTxHash,
      contentTxId,
      contentAmount,
      this.scriptInfo.contentRegistry.address
    ).txInInlineDatumPresent().txInRedeemerValue(mConStr(0, [contentHashHex, ownerAssetClass])).spendingTxInReference(
      this.refScriptUtxos.contentRegistry.txHash,
      this.refScriptUtxos.contentRegistry.outputIndex,
      (this.scriptInfo.contentRegistry.cbor.length / 2).toString(),
      this.scriptInfo.contentRegistry.hash
    ).txOut(this.scriptInfo.contentRegistry.address, [
      {
        unit: this.scriptInfo.contentRefToken.hash + registryName,
        quantity: "1"
      }
    ]).txOutInlineDatumValue(newContentRegistry).spendingPlutusScriptV3().txIn(ownershipTxHash, ownershipTxId, ownershipValue, ownershipAddress).txInInlineDatumPresent().txInRedeemerValue(mConStr(0, [])).spendingTxInReference(
      this.refScriptUtxos.ownershipRegistry.txHash,
      this.refScriptUtxos.ownershipRegistry.outputIndex,
      (this.scriptInfo.ownershipRegistry.cbor.length / 2).toString(),
      this.scriptInfo.ownershipRegistry.hash
    ).txOut(this.scriptInfo.ownershipRegistry.address, [
      {
        unit: this.scriptInfo.ownershipRefToken.hash + registryName,
        quantity: "1"
      }
    ]).txOutInlineDatumValue(newOwnershipRegistry).readOnlyTxInReference(oracleTxHash, oracleTxId).changeAddress(walletAddress).txInCollateral(
      collateral.input.txHash,
      collateral.input.outputIndex,
      collateral.output.amount,
      collateral.output.address
    ).selectUtxosFrom(utxos).complete();
    return txHex;
  };
  /**
   * Get the content at the registry given the registry number and content number.
   * @param registryNumber
   * @param contentNumber
   * @returns
   */
  getContent = async (registryNumber, contentNumber) => {
    const [content] = await this.getScriptUtxos(registryNumber, ["content"]);
    if (content === void 0) throw new Error("Content registry not found");
    const contentDatam = parseDatumCbor(
      content.output.plutusData
    );
    const contentAtRegistry = contentDatam.fields[1].list;
    if (contentAtRegistry.length <= contentNumber)
      throw new Error("Content not found");
    const decoded = toUTF8(contentAtRegistry[contentNumber]?.bytes);
    return decoded;
  };
  updateContent = async ({
    ownerTokenUtxo,
    registryNumber,
    newContentHashHex,
    contentNumber
  }) => {
    const { utxos, collateral, walletAddress } = await this.getWalletInfoForTx();
    const registryTokenNameHex = stringToHex(`Registry (${registryNumber})`);
    const [oracle, content, ownership] = await this.getScriptUtxos(registryNumber);
    const newContentRegistry = this.updateContentRegistry(
      content.output.plutusData,
      contentNumber,
      newContentHashHex
    );
    await this.mesh.txIn(
      ownerTokenUtxo.input.txHash,
      ownerTokenUtxo.input.outputIndex,
      ownerTokenUtxo.output.amount,
      ownerTokenUtxo.output.address
    ).spendingPlutusScriptV3().txIn(
      content.input.txHash,
      content.input.outputIndex,
      content.output.amount,
      content.output.address
    ).txInInlineDatumPresent().txInRedeemerValue(mConStr(1, [newContentHashHex, contentNumber])).spendingTxInReference(
      this.refScriptUtxos.contentRegistry.txHash,
      this.refScriptUtxos.contentRegistry.outputIndex,
      (this.scriptInfo.contentRegistry.cbor.length / 2).toString(),
      this.scriptInfo.contentRegistry.hash
    ).txOut(this.scriptInfo.contentRegistry.address, [
      {
        unit: this.scriptInfo.contentRefToken.hash + registryTokenNameHex,
        quantity: "1"
      }
    ]).txOutInlineDatumValue(newContentRegistry).readOnlyTxInReference(oracle.input.txHash, oracle.input.outputIndex).readOnlyTxInReference(
      ownership.input.txHash,
      ownership.input.outputIndex
    ).changeAddress(walletAddress).txInCollateral(
      collateral.input.txHash,
      collateral.input.outputIndex,
      collateral.output.amount,
      collateral.output.address
    ).selectUtxosFrom(utxos).complete();
    const txBody = this.mesh.completeSigning();
    return txBody;
  };
  transferContent = async ({
    ownerTokenUtxo,
    registryNumber,
    newOwnerAssetHex,
    contentNumber
  }) => {
    const { utxos, collateral, walletAddress } = await this.getWalletInfoForTx();
    const registryTokenNameHex = stringToHex(`Registry (${registryNumber})`);
    const [oracle, ownership] = await this.getScriptUtxos(registryNumber, [
      "oracle",
      "ownership"
    ]);
    const newOwnerAssetClass = [
      newOwnerAssetHex.slice(0, 56),
      newOwnerAssetHex.slice(56)
    ];
    const newOwnershipRegistry = this.updateOwnershipRegistry(
      ownership.output.plutusData,
      contentNumber,
      newOwnerAssetClass
    );
    await this.mesh.txIn(
      ownerTokenUtxo.input.txHash,
      ownerTokenUtxo.input.outputIndex,
      ownerTokenUtxo.output.amount,
      ownerTokenUtxo.output.address
    ).spendingPlutusScriptV3().txIn(
      ownership.input.txHash,
      ownership.input.outputIndex,
      ownership.output.amount,
      ownership.output.address
    ).txInInlineDatumPresent().txInRedeemerValue(mConStr(1, [newOwnerAssetClass, contentNumber])).spendingTxInReference(
      this.refScriptUtxos.ownershipRegistry.txHash,
      this.refScriptUtxos.ownershipRegistry.outputIndex,
      (this.scriptInfo.ownershipRegistry.cbor.length / 2).toString(),
      this.scriptInfo.ownershipRegistry.hash
    ).txOut(this.scriptInfo.ownershipRegistry.address, [
      {
        unit: this.scriptInfo.ownershipRefToken.hash + registryTokenNameHex,
        quantity: "1"
      }
    ]).txOutInlineDatumValue(newOwnershipRegistry).readOnlyTxInReference(oracle.input.txHash, oracle.input.outputIndex).changeAddress(walletAddress).txInCollateral(
      collateral.input.txHash,
      collateral.input.outputIndex,
      collateral.output.amount,
      collateral.output.address
    ).selectUtxosFrom(utxos).complete();
    const txBody = this.mesh.completeSigning();
    return txBody;
  };
  // Admin
  stopContentRegistry = async (registryNumber) => {
    const { utxos, collateral, walletAddress } = await this.getWalletInfoForTx();
    const registryTokenNameHex = stringToHex(`Registry (${registryNumber})`);
    const scriptUtxos = await this.fetcher.fetchAddressUTxOs(
      this.scriptInfo.contentRegistry.address,
      this.scriptInfo.contentRefToken.hash + registryTokenNameHex
    );
    const oracleUtxo = await this.fetcher.fetchAddressUTxOs(
      this.scriptInfo.oracleValidator.address,
      this.scriptInfo.oracleNFT.hash
    );
    const { txHash: oracleTxHash, outputIndex: oracleTxId } = oracleUtxo[0].input;
    const {
      input: { txHash: validatorTxHash, outputIndex: validatorTxId },
      output: { amount: scriptValue, address: scriptAddress }
    } = scriptUtxos[0];
    const txHex = await this.mesh.spendingPlutusScriptV3().txIn(validatorTxHash, validatorTxId, scriptValue, scriptAddress).txInInlineDatumPresent().txInRedeemerValue(mConStr(2, [])).txInScript(this.scriptInfo.contentRegistry.cbor).mintPlutusScriptV2().mint("-1", this.scriptInfo.contentRefToken.hash, registryTokenNameHex).mintTxInReference(
      this.refScriptUtxos.contentRefToken.txHash,
      this.refScriptUtxos.contentRefToken.outputIndex,
      (this.scriptInfo.contentRefToken.cbor.length / 2).toString(),
      this.scriptInfo.contentRefToken.hash
    ).mintRedeemerValue(mConStr1([])).readOnlyTxInReference(oracleTxHash, oracleTxId).changeAddress(walletAddress).txInCollateral(
      collateral.input.txHash,
      collateral.input.outputIndex,
      collateral.output.amount,
      collateral.output.address
    ).requiredSignerHash(this.opsKey).selectUtxosFrom(utxos).complete();
    return txHex;
  };
  stopOwnershipRegistry = async (registryNumber) => {
    const { utxos, collateral, walletAddress } = await this.getWalletInfoForTx();
    const registryTokenNameHex = stringToHex(`Registry (${registryNumber})`);
    const scriptUtxos = await this.fetcher.fetchAddressUTxOs(
      this.scriptInfo.ownershipRegistry.address,
      this.scriptInfo.ownershipRefToken.hash + registryTokenNameHex
    );
    const oracleUtxo = await this.fetcher.fetchAddressUTxOs(
      this.scriptInfo.oracleValidator.address,
      this.scriptInfo.oracleNFT.hash
    );
    const { txHash: oracleTxHash, outputIndex: oracleTxId } = oracleUtxo[0].input;
    const {
      input: { txHash: validatorTxHash, outputIndex: validatorTxId },
      output: { amount: scriptValue, address: scriptAddress }
    } = scriptUtxos[0];
    const txHex = await this.mesh.spendingPlutusScriptV3().txIn(validatorTxHash, validatorTxId, scriptValue, scriptAddress).txInInlineDatumPresent().txInRedeemerValue(mConStr(2, [])).txInScript(this.scriptInfo.ownershipRegistry.cbor).mintPlutusScriptV2().mint("-1", this.scriptInfo.ownershipRefToken.hash, registryTokenNameHex).mintTxInReference(
      this.refScriptUtxos.ownershipRefToken.txHash,
      this.refScriptUtxos.ownershipRefToken.outputIndex,
      (this.scriptInfo.ownershipRefToken.cbor.length / 2).toString(),
      this.scriptInfo.ownershipRefToken.hash
    ).mintRedeemerValue(mConStr1([])).readOnlyTxInReference(oracleTxHash, oracleTxId).changeAddress(walletAddress).txInCollateral(
      collateral.input.txHash,
      collateral.input.outputIndex,
      collateral.output.amount,
      collateral.output.address
    ).requiredSignerHash(this.opsKey).selectUtxosFrom(utxos).complete();
    return txHex;
  };
  stopOracle = async (txInHash, txInId) => {
    const { utxos, collateral, walletAddress } = await this.getWalletInfoForTx();
    const oracleUtxo = await this.fetcher.fetchAddressUTxOs(
      this.scriptInfo.oracleValidator.address,
      this.scriptInfo.oracleNFT.hash
    );
    const { txHash, outputIndex } = oracleUtxo[0].input;
    const txHex = await this.mesh.txIn(txInHash, txInId).spendingPlutusScriptV3().txIn(txHash, outputIndex).txInInlineDatumPresent().txInRedeemerValue(mConStr(3, [])).txInScript(this.scriptInfo.oracleValidator.cbor).mintPlutusScriptV2().mint("-1", this.scriptInfo.oracleNFT.hash, "").mintingScript(this.scriptInfo.oracleNFT.cbor).mintRedeemerValue(mConStr1([])).changeAddress(walletAddress).txInCollateral(
      collateral.input.txHash,
      collateral.input.outputIndex,
      collateral.output.amount,
      collateral.output.address
    ).requiredSignerHash(this.opsKey).requiredSignerHash(this.opsKey).selectUtxosFrom(utxos).complete();
    return txHex;
  };
  // Helpers
  getCurrentOracleDatum = async (utxos) => {
    let oracleUtxo = utxos || [];
    if (oracleUtxo.length === 0) {
      oracleUtxo = await this.fetcher.fetchAddressUTxOs(
        this.scriptInfo.oracleValidator.address,
        this.scriptInfo.oracleNFT.hash
      );
    }
    const oracleDatum = parseInlineDatum({
      inline_datum: oracleUtxo[0].output.plutusData
    });
    return oracleDatum;
  };
  getOracleDatum = (contentRegistryCount, ownershipRegistryCount) => {
    const oracleAddr = mScriptAddress(
      this.scriptInfo.oracleValidator.hash,
      this.stakeCredential
    );
    const contentRegistryAddr = mScriptAddress(
      this.scriptInfo.contentRegistry.hash,
      this.stakeCredential
    );
    const ownershipRegistryAddr = mScriptAddress(
      this.scriptInfo.ownershipRegistry.hash,
      this.stakeCredential
    );
    return mConStr0([
      this.scriptInfo.oracleNFT.hash,
      oracleAddr,
      this.scriptInfo.contentRefToken.hash,
      contentRegistryAddr,
      contentRegistryCount,
      this.scriptInfo.ownershipRefToken.hash,
      ownershipRegistryAddr,
      ownershipRegistryCount,
      this.opsKey,
      this.opsKey
    ]);
  };
  getContentDatum = (contentArray) => {
    return mConStr0([contentArray.length, contentArray]);
  };
  getOwnershipDatum = (ownershipArray) => {
    return mConStr0([ownershipArray.length, ownershipArray]);
  };
  getScriptUtxos = async (registryNumber, toFetch = [
    "oracle",
    "content",
    "ownership"
  ]) => {
    const registryTokenNameHex = stringToHex(`Registry (${registryNumber})`);
    const promises = [];
    toFetch.forEach((script) => {
      switch (script) {
        case "oracle":
          promises.push(
            this.fetcher.fetchAddressUTxOs(
              this.scriptInfo.oracleValidator.address,
              this.scriptInfo.oracleNFT.hash
            )
          );
          break;
        case "content":
          promises.push(
            this.fetcher.fetchAddressUTxOs(
              this.scriptInfo.contentRegistry.address,
              this.scriptInfo.contentRefToken.hash + registryTokenNameHex
            )
          );
        case "ownership":
          promises.push(
            this.fetcher.fetchAddressUTxOs(
              this.scriptInfo.ownershipRegistry.address,
              this.scriptInfo.ownershipRefToken.hash + registryTokenNameHex
            )
          );
          break;
      }
    });
    const scriptsInput = await Promise.all(promises);
    return scriptsInput.map((utxos) => utxos[0]);
  };
  insertContentRegistry = (plutusData, newContentHash) => {
    const contentRegistry = parseInlineDatum({
      inline_datum: plutusData
    }).fields[1].list.map((plutusBytes) => plutusBytes.bytes);
    const newContentRegistry = this.getContentDatum([
      ...contentRegistry,
      newContentHash
    ]);
    return newContentRegistry;
  };
  insertOwnershipRegistry = (plutusData, ownerAssetClass) => {
    const ownershipRegistry = parseInlineDatum({
      inline_datum: plutusData
    }).fields[1].list.map((plutusBytesArray) => [
      plutusBytesArray.list[0].bytes,
      plutusBytesArray.list[1].bytes
    ]);
    const newContentRegistry = this.getOwnershipDatum([
      ...ownershipRegistry,
      ownerAssetClass
    ]);
    return newContentRegistry;
  };
  updateContentRegistry = (plutusData, contentNumber, newContentHash) => {
    const contentRegistry = parseInlineDatum({
      inline_datum: plutusData
    }).fields[1].list.map((plutusBytes) => plutusBytes.bytes);
    contentRegistry[contentNumber] = newContentHash;
    const newContentRegistry = this.getContentDatum(contentRegistry);
    return newContentRegistry;
  };
  updateOwnershipRegistry = (plutusData, contentNumber, ownerAssetClass) => {
    const ownershipRegistry = parseInlineDatum({
      inline_datum: plutusData
    }).fields[1].list.map((plutusBytesArray) => [
      plutusBytesArray.list[0].bytes,
      plutusBytesArray.list[1].bytes
    ]);
    ownershipRegistry[contentNumber] = ownerAssetClass;
    const newContentRegistry = this.getOwnershipDatum(ownershipRegistry);
    return newContentRegistry;
  };
};

// src/escrow/offchain.ts
import {
  conStr0,
  conStr1,
  DEFAULT_REDEEMER_BUDGET,
  mConStr1 as mConStr12,
  mConStr2,
  MeshValue,
  pubKeyAddress,
  value
} from "@meshsdk/common";
import {
  deserializeAddress as deserializeAddress2,
  deserializeDatum,
  mergeAssets,
  serializeAddressObj
} from "@meshsdk/core";
import { applyParamsToScript as applyParamsToScript3 } from "@meshsdk/core-csl";

// src/escrow/aiken-workspace-v1/plutus.json
var plutus_default2 = {
  preamble: {
    title: "meshjs/escrow",
    description: "Aiken contracts for project 'meshjs/escrow'",
    version: "0.0.0",
    plutusVersion: "v2",
    compiler: {
      name: "Aiken",
      version: "v1.0.29-alpha+unknown"
    },
    license: "Apache-2.0"
  },
  validators: [
    {
      title: "escrow.escrow",
      datum: {
        title: "_datum",
        schema: {
          $ref: "#/definitions/escrow~1types~1EscrowDatum"
        }
      },
      redeemer: {
        title: "redeemer",
        schema: {
          $ref: "#/definitions/escrow~1types~1EscrowRedeemer"
        }
      },
      compiledCode: "590c2f01000032323232323232232323232323232232322533300d3232533300f300c3010375400226464646464646464a66602e602a60306ea80044c8c8c8c8c8c8c8c8c8c94ccc084c07c0244c8c8c8c8c8c8c94ccc0acc0b800c4c94ccc0b0c0bc00c4c94ccc0a8c080c0acdd5000899192999816181118169baa001132533302d302b302e3754006264646464a666068606e004264646464a66606a66ebc024cdd2a40046607200e660726e98014cc0e404ccc0e4dd300925eb8040045281980b9bab302730363754018660326eacc09cc0d8dd51813981b1baa00d301a011302c0073302c0022323302e3756606c0044646eb4c0e0008dd7181b0009bae3034001302c003163756606a002606a0046066002605e6ea800c58c0c4c0b8dd50008b180798169baa003302f302c37540022c601a60566ea8c070c0acdd50010b18168010b18160011bac302b302c00237586054002660506e9ccc01004c034cc0a0dd399802808806a5eb80dd598141814801181380098119baa01813232325333024302100c132323232533302b302e0031533302b0021325333029301f302a375400226464a666056605260586ea80084c94ccc0b0c0a8c0b4dd500089980500c1bae3031302e37540022c60106060605a6ea80084c8c8c8c8c8c8c8c94ccc0ccc0c4c0d0dd500089919299981a9819981b1baa0011533303532330010013303a375200666074607660706ea80092f5c044a66607400229404c94ccc0e0cc058090dd7181e8010a51133003003001303d00115333035005100414a0294058c044014dd7181c181a9baa00116300f006330143301001e00230173756606c606e006660266601e03a008602c6eacc0d400cc0d0004c0d0004c0cc008c0c4004c0b4dd50011811800981718159baa00116300c302a3754603660546ea80045858c0b0008dd6181598160011bac302a00133028374e6600802601a660506e9ccc0140440352f5c0264646464a666056605c0062a666056004264a666052603e60546ea80044c94ccc0a8c09cc0acdd500089919191919191919299981a981c001099191919191919299981c981b981d1baa00113232533303b3039303c37540022a6660766466002002660806ea400ccc100c104c0f8dd500125eb80894ccc100004528899299981f1980e0151bae304300213300300300114a060860022a66607600a200829405280b180b8059bae303e303b37540022c602a01a660346602c048010603a014660326602a046016603800a6605e008464660626eacc0e40088c8dd6981d8011bae3039001375c606e002605e00a6605a00c4646605e6eacc0dc0088c8dd6981c8011bae3037001375c606a002605a00e2c6eacc0d8004c0d8008c0d0004c0d0008dd598190009819001181800098161baa00116302e302b37540022c601860546ea8c06cc0a8dd50008b0b18160011bac302b302c00237586054002660506e9ccc01004c034cc0a0dd399802808806a5eb808c94ccc094c08cc098dd50008980819814981518139baa0014bd700a6103d87a800030153026375400244646600200200644a66605200229404c94ccc09ccdc79bae302c00200414a2266006006002605800244646600200200644a666050002297adef6c601332253330273375e603060526ea80080144cc030004dd5980d18149baa0021001302a00133002002302b001223300400223375e6028604a6ea8c058c094dd50008011119801801119baf30133024375400200444646600200200644a66604a002297ae013232533302430050021330280023300400400113300400400130290023027001223233001001323300100100322533302500114bd7009919991119198008008019129998158008801899198169ba73302d375200c6605a60540026605a605600297ae033003003302f002302d001375c60480026eacc094004cc00c00cc0a4008c09c004894ccc09000452889929998111919b89375a600e002664464a66604c6046604e6ea8004520001375a605660506ea8004c94ccc098c08cc09cdd50008a60103d87a8000132330010013756605860526ea8008894ccc0ac004530103d87a8000132323232533302c337220100042a66605866e3c0200084c05ccc0c0dd4000a5eb80530103d87a8000133006006003375a605a0066eb8c0ac008c0bc008c0b4004c8cc004004024894ccc0a80045300103d87a8000132323232533302b337220100042a66605666e3c0200084c058cc0bcdd3000a5eb80530103d87a8000133006006003375660580066eb8c0a8008c0b8008c0b0004dd7180a0009bae30160013758604e0042660060060022940c09c0048c088c08cc08c00488c8ccc00400400c0088894ccc08c00840044c8ccc010010c09c00ccccc020008dd718110009bab3023001222325333025533302800114a229405300103d87a80001301033029374c00297ae032333001001003002222533302a0021001132333004004302e0033322323300100100522533302f001133030337606ea4010dd4001a5eb7bdb1804c8c8c8c94ccc0c0cdc800400109981a19bb037520106ea001c01454ccc0c0cdc78040010992999818981798191baa001133035337606ea4024c0d8c0ccdd5000802080219299981898178008a60103d87a80001301c33035375000297ae03370000e00226606866ec0dd48011ba800133006006003375a60620066eb8c0bc008c0cc008c0c4004dd718148009bad302a001302c00230250022323300100100222533302000114bd6f7b6300999119191999804001801000911319190011919198008008019129998138008a4c264a6660500022a66604a60086eb4c09cc0a8008526161323232325333029337206eb8c0a8010dd718150018a9998149804000899803803998168018010b0b1bad302a003302d003302b002302a002302a001233302230200014a0944dd598110019bae3020002302200133002002302300122223233001001005225333022001133023337606ea4014dd300225eb7bdb1804c8c8c8c94ccc08ccdc800480109981399bb037520126e9802001454ccc08ccdc78048010992999812181118129baa001133028337606ea4028c0a4c098dd5000802080219980380480400089981399bb037520046e98004cc01801800cdd598120019bae3022002302600230240013019375401e601060326ea8c028c064dd5180e180c9baa0011632323300100100722533301c00114c0103d87a800013232533301b3375e6018603a6ea80080144c018cc07c0092f5c02660080080026040004603c002603660306ea8020dd2a40006eb0c064c068c068c068c068c068c068008dd6180c000980c180c0011bac301600130123754600260246ea80108c054004528180098081baa00223013301400114984d958c94ccc030c0280044c8c8c8c94ccc04cc0580084c8c9263300b0022323300d3756602a0044646eb4c05c008dd7180a8009bae3013001300b003163756602800260280046024002601c6ea800c54ccc030c02400454ccc03cc038dd50018a4c2c2a66601860040022a66601e601c6ea800c5261616300c37540046e1d20043001007232533300930070011323232325333010301300213232498cc0200088c8cc028dd598090011191bad3014002375c60240026eb8c040004c02000c58dd598088009808801180780098059baa0021533300930060011323232323232323253330143017002132323232498cc0380108c8cc040dd5980c0011191bad301a002375c60300026eb8c058004c038014cc0300188c8cc038dd5980b0011191bad3018002375c602c0026eb8c050004c03001c58dd5980a800980a801180980098098011bab30110013011002300f001300b37540042c60126ea800488c8cc00400400c894ccc0340045261323300300330110023003300f00125333006300430073754002264646464a66601a602000426464931929998061805000899192999808980a00109924c64a66601e601a00226464a666028602e0042649318068008b180a80098089baa0021533300f300c00113232323232325333018301b002149858dd6980c800980c8011bad30170013017002375a602a00260226ea800858c03cdd50008b180900098071baa0031533300c30090011533300f300e37540062930b0b18061baa002300600316300e001300e002300c001300837540022c464a66600c600800226464a666016601c0042930b1bae300c001300837540042a66600c600600226464a666016601c0042930b1bae300c001300837540042c600c6ea8004dc3a40046e1d20005734aae7555cf2ab9f5740ae855d101",
      hash: "8fa9284f5889972d7260c10e940a2e1acb2114bdcea845da3d52de7d"
    }
  ],
  definitions: {
    ByteArray: {
      dataType: "bytes"
    },
    Int: {
      dataType: "integer"
    },
    List$Pair$ByteArray_Int: {
      dataType: "map",
      keys: {
        $ref: "#/definitions/ByteArray"
      },
      values: {
        $ref: "#/definitions/Int"
      }
    },
    List$Pair$ByteArray_List$Pair$ByteArray_Int: {
      dataType: "map",
      keys: {
        $ref: "#/definitions/ByteArray"
      },
      values: {
        $ref: "#/definitions/List$Pair$ByteArray_Int"
      }
    },
    "Option$aiken/transaction/credential/Referenced$aiken/transaction/credential/Credential": {
      title: "Optional",
      anyOf: [
        {
          title: "Some",
          description: "An optional value.",
          dataType: "constructor",
          index: 0,
          fields: [
            {
              $ref: "#/definitions/aiken~1transaction~1credential~1Referenced$aiken~1transaction~1credential~1Credential"
            }
          ]
        },
        {
          title: "None",
          description: "Nothing.",
          dataType: "constructor",
          index: 1,
          fields: []
        }
      ]
    },
    "aiken/transaction/credential/Address": {
      title: "Address",
      description: "A Cardano `Address` typically holding one or two credential references.\n\n Note that legacy bootstrap addresses (a.k.a. 'Byron addresses') are\n completely excluded from Plutus contexts. Thus, from an on-chain\n perspective only exists addresses of type 00, 01, ..., 07 as detailed\n in [CIP-0019 :: Shelley Addresses](https://cips.cardano.org/cip/CIP-19).",
      anyOf: [
        {
          title: "Address",
          dataType: "constructor",
          index: 0,
          fields: [
            {
              title: "payment_credential",
              $ref: "#/definitions/aiken~1transaction~1credential~1Credential"
            },
            {
              title: "stake_credential",
              $ref: "#/definitions/Option$aiken~1transaction~1credential~1Referenced$aiken~1transaction~1credential~1Credential"
            }
          ]
        }
      ]
    },
    "aiken/transaction/credential/Credential": {
      title: "Credential",
      description: "A general structure for representing an on-chain `Credential`.\n\n Credentials are always one of two kinds: a direct public/private key\n pair, or a script (native or Plutus).",
      anyOf: [
        {
          title: "VerificationKeyCredential",
          dataType: "constructor",
          index: 0,
          fields: [
            {
              $ref: "#/definitions/ByteArray"
            }
          ]
        },
        {
          title: "ScriptCredential",
          dataType: "constructor",
          index: 1,
          fields: [
            {
              $ref: "#/definitions/ByteArray"
            }
          ]
        }
      ]
    },
    "aiken/transaction/credential/Referenced$aiken/transaction/credential/Credential": {
      title: "Referenced",
      description: "Represent a type of object that can be represented either inline (by hash)\n or via a reference (i.e. a pointer to an on-chain location).\n\n This is mainly use for capturing pointers to a stake credential\n registration certificate in the case of so-called pointer addresses.",
      anyOf: [
        {
          title: "Inline",
          dataType: "constructor",
          index: 0,
          fields: [
            {
              $ref: "#/definitions/aiken~1transaction~1credential~1Credential"
            }
          ]
        },
        {
          title: "Pointer",
          dataType: "constructor",
          index: 1,
          fields: [
            {
              title: "slot_number",
              $ref: "#/definitions/Int"
            },
            {
              title: "transaction_index",
              $ref: "#/definitions/Int"
            },
            {
              title: "certificate_index",
              $ref: "#/definitions/Int"
            }
          ]
        }
      ]
    },
    "escrow/types/EscrowDatum": {
      title: "EscrowDatum",
      anyOf: [
        {
          title: "Initiation",
          dataType: "constructor",
          index: 0,
          fields: [
            {
              title: "initiator",
              $ref: "#/definitions/aiken~1transaction~1credential~1Address"
            },
            {
              title: "initiator_assets",
              $ref: "#/definitions/List$Pair$ByteArray_List$Pair$ByteArray_Int"
            }
          ]
        },
        {
          title: "ActiveEscrow",
          dataType: "constructor",
          index: 1,
          fields: [
            {
              title: "initiator",
              $ref: "#/definitions/aiken~1transaction~1credential~1Address"
            },
            {
              title: "initiator_assets",
              $ref: "#/definitions/List$Pair$ByteArray_List$Pair$ByteArray_Int"
            },
            {
              title: "recipient",
              $ref: "#/definitions/aiken~1transaction~1credential~1Address"
            },
            {
              title: "recipient_assets",
              $ref: "#/definitions/List$Pair$ByteArray_List$Pair$ByteArray_Int"
            }
          ]
        }
      ]
    },
    "escrow/types/EscrowRedeemer": {
      title: "EscrowRedeemer",
      anyOf: [
        {
          title: "RecipientDeposit",
          dataType: "constructor",
          index: 0,
          fields: [
            {
              title: "recipient",
              $ref: "#/definitions/aiken~1transaction~1credential~1Address"
            },
            {
              title: "recipient_assets",
              $ref: "#/definitions/List$Pair$ByteArray_List$Pair$ByteArray_Int"
            }
          ]
        },
        {
          title: "CancelTrade",
          dataType: "constructor",
          index: 1,
          fields: []
        },
        {
          title: "CompleteTrade",
          dataType: "constructor",
          index: 2,
          fields: []
        }
      ]
    }
  }
};

// src/escrow/aiken-workspace-v2/plutus.json
var plutus_default3 = {
  preamble: {
    title: "meshjs/escrow",
    description: "Aiken contracts for project 'meshjs/escrow'",
    version: "0.0.0",
    plutusVersion: "v3",
    compiler: {
      name: "Aiken",
      version: "v1.1.0+unknown"
    },
    license: "Apache-2.0"
  },
  validators: [
    {
      title: "escrow.escrow.spend",
      datum: {
        title: "_datum",
        schema: {
          $ref: "#/definitions/escrow~1EscrowDatum"
        }
      },
      redeemer: {
        title: "redeemer",
        schema: {
          $ref: "#/definitions/escrow~1EscrowRedeemer"
        }
      },
      compiledCode: "590d2301010032323232323232253330023232323232533233008300130093754004264646464646464646464a666024600e002264646464a666032603800426601200626601000244a6660360042a01026464660186eacc070008894ccc07c0084c014c0880184c8c8c8c010c094014dd698100011bae301e0013021002375c6034002603a0042c6eacc068004c068008c060004c050dd50068a99980918058008a99980a980a1baa00d1500216153330123003001153330153014375401a2a0042c2c60246ea80304c8c8c8c8c8c8c8c94ccc060c034c064dd500089919191919191919191919192999812180c80509919191919191929998171818801899299981798190018992999816980f18171baa00113232533302f302030303754002264a666060604a60626ea800c4c8c8c8c94ccc0dcc0e80084cc09c00c4cc098004894ccc0e40084cc05801c4c94ccc0dccdd780419ba548008cc0ec018cc0ecdd30021981d8091981d9ba60114bd7008008a50330173756603c60706ea802ccc064dd5980f181c1baa301e30383754018603402026464660546eacc0e8008894ccc0f40084c014c1000184c8c8c8c010c10c014dd6981f0011bae303c001303f002375c607000260760042c6eacc0e0004c0e0008c0d8004c0c8dd50018b181a18189baa001163010303037540066064605e6ea800458c038c0b8dd5180a18171baa00216303000216302f0023758605c605e0046eb0c0b4004cc0acdd39980200b007198159ba73300501400e4bd701bab302b302c002302a0013026375403e2646464a66604e604001a264646464a66605c60620062a66605c004264a666058603a605a6ea80044c8cc03400454ccc0b4c088c0b8dd50008992999817181198179baa00113300901a375c606660606ea800458c01cc0c8c0bcdd500089919191919191919299981a9815181b1baa001132325333037302c303837540022a66606e6466002002660786ea400ccc0f0c0f4c0e8dd500125eb80894ccc0f0004528099299981d1980a8131bae303f00214a2266006006002607e0022a66606e00a200829405280b18080029bae303a303737540022c601c00c660286601e040004602e6eacc0e0c0e400ccc04ccc03807c010c058dd5981b801981b000981b000981a801181980098179baa0013031302e37540022c601a605a6ea8c04cc0b4dd50008b0b18178011bac302e302f0023758605a002660566e9ccc010058038cc0acdd39980280a00725eb804c8c8c8c94ccc0b8c0c400c54ccc0b80084c94ccc0b0c074c0b4dd50008992999816981318171baa001132323232323232325333038303b00213302800713302700522533303a00213302a00513302900322533303c0021323232533303c3031303d375400226464a66607c6066607e6ea800454ccc0f8c8cc004004cc10cdd480199821982218209baa0024bd701129998218008a5113253330413301c02d375c608c0042660060060022940c11800454ccc0f801440105280a5016301700b375c6082607c6ea800458c054034cc06ccc05809c020c078028cc068cc05409802cc0740144c8c8cc0b4dd5981e8011129998200010980298218030991919180218230029bad3041002375c607e00260840046eb8c0ec004c0f80084c8c8cc0acdd5981d80111299981f0010980298208030991919180218220029bad303f002375c607a00260800046eb8c0e4004c0f000858dd5981c800981c801181b800981b8011bab303500130350023033001302f37540022c6062605c6ea800458c034c0b4dd5180998169baa0011616302f0023758605c605e0046eb0c0b4004cc0acdd39980200b007198159ba73300501400e4bd701192999814180e98149baa001130123302c302d302a375400297ae014c103d87a800030123029375400244646600200200644a66605800229404c94ccc0a8cdc79bae302f00200414a2266006006002605e00244646600200200644a666056002297adef6c6013322533302a3375e602a60586ea80080144cc034004dd5980918161baa0021001302d00133002002302e001223300400223375e602260506ea8c038c0a0dd50008011119801801119baf30103027375400200444646600200200644a666050002297ae0132325333027300500213302b00233004004001133004004001302c002302a001223253330233018001132323232533302a302d00213301a00313301900122533302c00215008132323301d3756605a00444a6660600042600a606600c26464646008606c00a6eb4c0c4008dd7181780098190011bae302b001302e002163756605600260560046052002604a6ea800c54ccc08cc0700044c8c8c8c8c8c8c8c94ccc0b8c0c40084cc07801c4cc074014894ccc0c00084cc0800144cc07c00c894ccc0c8008540384c8c8cc08cdd5981980111299981b00109802981c80309919191802181e0029bad3037002375c606a00260700046eb8c0c4004c0d00084c8c8cc084dd5981880111299981a00109802981b80309919191802181d0029bad3035002375c6066002606c0046eb8c0bc004c0c800858dd598178009817801181680098168011bab302b001302b0023029001302537540062c60466ea800888c8cc004004c8cc00400400c894ccc09c00452f5c0264666444646600200200644a66605a00220062646605e6e9ccc0bcdd4803198179816000998179816800a5eb80cc00c00cc0c4008c0bc004dd718130009bab302700133003003302b002302900122533302600114a2264a6660486466e24dd698038009991192999814181098149baa0011480004dd6981698151baa0013253330283021302937540022980103d87a8000132330010013756605c60566ea8008894ccc0b4004530103d87a8000132323232533302e337220100042a66605c66e3c0200084c060cc0c8dd4000a5eb80530103d87a8000133006006003375a605e0066eb8c0b4008c0c4008c0bc004c8cc004004024894ccc0b00045300103d87a8000132323232533302d337220100042a66605a66e3c0200084c05ccc0c4dd3000a5eb80530103d87a80001330060060033756605c0066eb8c0b0008c0c0008c0b8004dd718080009bae300d001375860520042660060060022940c0a40048c090c094c09400488c8ccc00400400c0088894ccc09400840044c8ccc010010c0a400ccccc020008dd718120009bab3025001222325333027533302a00114a229405300103d87a8000130113302b374c00297ae032333001001003002222533302c0021001132333004004303000333223233001001005225333031001133032337606ea4010dd4001a5eb7bdb1804c8c8c8c94ccc0c8cdc800400109981b19bb037520106ea001c01454ccc0c8cdc780400109929998199814181a1baa001133037337606ea4024c0e0c0d4dd5000802080219299981998140008a60103d87a80001301d33037375000297ae03370000e00226606c66ec0dd48011ba800133006006003375a60660066eb8c0c4008c0d4008c0cc004dd718158009bad302c001302e00230270022323300100100222533302200114bd6f7b6300999119191999804001801000911319190011919198008008019129998148008a4c264a6660540022a66604e60086eb4c0a4c0b000852616132323232533302b337206eb8c0b0010dd718160018a9998159804000899803803998178018010b0b1bad302c003302f003302d002302c002302c001233302430190014a0944dd598120019bae3022002302400133002002302500122223233001001005225333024001133025337606ea4014dd300225eb7bdb1804c8c8c8c94ccc094cdc800480109981499bb037520126e9802001454ccc094cdc78048010992999813180d98139baa00113302a337606ea4028c0acc0a0dd5000802080219980380480400089981499bb037520046e98004cc01801800cdd598130019bae302400230280023026001301b375402a600860366ea8c004c06cdd5180f180d9baa0022301e301f00116323300100100722533301c00114c0103d87a800013232533301b3375e600c603a6ea80080484c014cc07c0092f5c02660080080026040004603c0026e9520002301b001375860326034603460346034603460340046eb0c060004c060c060008dd6180b00098091baa00d370e900211191980080080191198018009801001112999807980218081baa00213232323253330163019002133007003132325333015300a00113232533301a301d002132325333019300e00113232533301e302100213300f0011500416301f001301b37540062a66603260240022646464646464a666044604a0042a0102c6eb4c08c004c08c008dd6981080098108011bad301f001301b37540062c60326ea80085401058c06c004c05cdd50018a99980a98070008a99980c180b9baa003150021616301537540042a00a2c602e002602e004602a00260226ea80085888c94ccc03cc0100044c8c94ccc050c05c0085401058dd7180a80098089baa0031533300f300800113232533301430170021500416375c602a00260226ea800c58c03cdd50011b8748000c03cc040008c038004c028dd50011b874800858c02cc030008c028004c028008c020004c010dd50008a4c26cacae6955ceaab9e5573eae815d0aba21",
      hash: "6e95d24ab0579b9e44c7cd1c801e1527c63124cef086d39443696b6b"
    },
    {
      title: "escrow.escrow.else",
      compiledCode: "590d2301010032323232323232253330023232323232533233008300130093754004264646464646464646464a666024600e002264646464a666032603800426601200626601000244a6660360042a01026464660186eacc070008894ccc07c0084c014c0880184c8c8c8c010c094014dd698100011bae301e0013021002375c6034002603a0042c6eacc068004c068008c060004c050dd50068a99980918058008a99980a980a1baa00d1500216153330123003001153330153014375401a2a0042c2c60246ea80304c8c8c8c8c8c8c8c94ccc060c034c064dd500089919191919191919191919192999812180c80509919191919191929998171818801899299981798190018992999816980f18171baa00113232533302f302030303754002264a666060604a60626ea800c4c8c8c8c94ccc0dcc0e80084cc09c00c4cc098004894ccc0e40084cc05801c4c94ccc0dccdd780419ba548008cc0ec018cc0ecdd30021981d8091981d9ba60114bd7008008a50330173756603c60706ea802ccc064dd5980f181c1baa301e30383754018603402026464660546eacc0e8008894ccc0f40084c014c1000184c8c8c8c010c10c014dd6981f0011bae303c001303f002375c607000260760042c6eacc0e0004c0e0008c0d8004c0c8dd50018b181a18189baa001163010303037540066064605e6ea800458c038c0b8dd5180a18171baa00216303000216302f0023758605c605e0046eb0c0b4004cc0acdd39980200b007198159ba73300501400e4bd701bab302b302c002302a0013026375403e2646464a66604e604001a264646464a66605c60620062a66605c004264a666058603a605a6ea80044c8cc03400454ccc0b4c088c0b8dd50008992999817181198179baa00113300901a375c606660606ea800458c01cc0c8c0bcdd500089919191919191919299981a9815181b1baa001132325333037302c303837540022a66606e6466002002660786ea400ccc0f0c0f4c0e8dd500125eb80894ccc0f0004528099299981d1980a8131bae303f00214a2266006006002607e0022a66606e00a200829405280b18080029bae303a303737540022c601c00c660286601e040004602e6eacc0e0c0e400ccc04ccc03807c010c058dd5981b801981b000981b000981a801181980098179baa0013031302e37540022c601a605a6ea8c04cc0b4dd50008b0b18178011bac302e302f0023758605a002660566e9ccc010058038cc0acdd39980280a00725eb804c8c8c8c94ccc0b8c0c400c54ccc0b80084c94ccc0b0c074c0b4dd50008992999816981318171baa001132323232323232325333038303b00213302800713302700522533303a00213302a00513302900322533303c0021323232533303c3031303d375400226464a66607c6066607e6ea800454ccc0f8c8cc004004cc10cdd480199821982218209baa0024bd701129998218008a5113253330413301c02d375c608c0042660060060022940c11800454ccc0f801440105280a5016301700b375c6082607c6ea800458c054034cc06ccc05809c020c078028cc068cc05409802cc0740144c8c8cc0b4dd5981e8011129998200010980298218030991919180218230029bad3041002375c607e00260840046eb8c0ec004c0f80084c8c8cc0acdd5981d80111299981f0010980298208030991919180218220029bad303f002375c607a00260800046eb8c0e4004c0f000858dd5981c800981c801181b800981b8011bab303500130350023033001302f37540022c6062605c6ea800458c034c0b4dd5180998169baa0011616302f0023758605c605e0046eb0c0b4004cc0acdd39980200b007198159ba73300501400e4bd701192999814180e98149baa001130123302c302d302a375400297ae014c103d87a800030123029375400244646600200200644a66605800229404c94ccc0a8cdc79bae302f00200414a2266006006002605e00244646600200200644a666056002297adef6c6013322533302a3375e602a60586ea80080144cc034004dd5980918161baa0021001302d00133002002302e001223300400223375e602260506ea8c038c0a0dd50008011119801801119baf30103027375400200444646600200200644a666050002297ae0132325333027300500213302b00233004004001133004004001302c002302a001223253330233018001132323232533302a302d00213301a00313301900122533302c00215008132323301d3756605a00444a6660600042600a606600c26464646008606c00a6eb4c0c4008dd7181780098190011bae302b001302e002163756605600260560046052002604a6ea800c54ccc08cc0700044c8c8c8c8c8c8c8c94ccc0b8c0c40084cc07801c4cc074014894ccc0c00084cc0800144cc07c00c894ccc0c8008540384c8c8cc08cdd5981980111299981b00109802981c80309919191802181e0029bad3037002375c606a00260700046eb8c0c4004c0d00084c8c8cc084dd5981880111299981a00109802981b80309919191802181d0029bad3035002375c6066002606c0046eb8c0bc004c0c800858dd598178009817801181680098168011bab302b001302b0023029001302537540062c60466ea800888c8cc004004c8cc00400400c894ccc09c00452f5c0264666444646600200200644a66605a00220062646605e6e9ccc0bcdd4803198179816000998179816800a5eb80cc00c00cc0c4008c0bc004dd718130009bab302700133003003302b002302900122533302600114a2264a6660486466e24dd698038009991192999814181098149baa0011480004dd6981698151baa0013253330283021302937540022980103d87a8000132330010013756605c60566ea8008894ccc0b4004530103d87a8000132323232533302e337220100042a66605c66e3c0200084c060cc0c8dd4000a5eb80530103d87a8000133006006003375a605e0066eb8c0b4008c0c4008c0bc004c8cc004004024894ccc0b00045300103d87a8000132323232533302d337220100042a66605a66e3c0200084c05ccc0c4dd3000a5eb80530103d87a80001330060060033756605c0066eb8c0b0008c0c0008c0b8004dd718080009bae300d001375860520042660060060022940c0a40048c090c094c09400488c8ccc00400400c0088894ccc09400840044c8ccc010010c0a400ccccc020008dd718120009bab3025001222325333027533302a00114a229405300103d87a8000130113302b374c00297ae032333001001003002222533302c0021001132333004004303000333223233001001005225333031001133032337606ea4010dd4001a5eb7bdb1804c8c8c8c94ccc0c8cdc800400109981b19bb037520106ea001c01454ccc0c8cdc780400109929998199814181a1baa001133037337606ea4024c0e0c0d4dd5000802080219299981998140008a60103d87a80001301d33037375000297ae03370000e00226606c66ec0dd48011ba800133006006003375a60660066eb8c0c4008c0d4008c0cc004dd718158009bad302c001302e00230270022323300100100222533302200114bd6f7b6300999119191999804001801000911319190011919198008008019129998148008a4c264a6660540022a66604e60086eb4c0a4c0b000852616132323232533302b337206eb8c0b0010dd718160018a9998159804000899803803998178018010b0b1bad302c003302f003302d002302c002302c001233302430190014a0944dd598120019bae3022002302400133002002302500122223233001001005225333024001133025337606ea4014dd300225eb7bdb1804c8c8c8c94ccc094cdc800480109981499bb037520126e9802001454ccc094cdc78048010992999813180d98139baa00113302a337606ea4028c0acc0a0dd5000802080219980380480400089981499bb037520046e98004cc01801800cdd598130019bae302400230280023026001301b375402a600860366ea8c004c06cdd5180f180d9baa0022301e301f00116323300100100722533301c00114c0103d87a800013232533301b3375e600c603a6ea80080484c014cc07c0092f5c02660080080026040004603c0026e9520002301b001375860326034603460346034603460340046eb0c060004c060c060008dd6180b00098091baa00d370e900211191980080080191198018009801001112999807980218081baa00213232323253330163019002133007003132325333015300a00113232533301a301d002132325333019300e00113232533301e302100213300f0011500416301f001301b37540062a66603260240022646464646464a666044604a0042a0102c6eb4c08c004c08c008dd6981080098108011bad301f001301b37540062c60326ea80085401058c06c004c05cdd50018a99980a98070008a99980c180b9baa003150021616301537540042a00a2c602e002602e004602a00260226ea80085888c94ccc03cc0100044c8c94ccc050c05c0085401058dd7180a80098089baa0031533300f300800113232533301430170021500416375c602a00260226ea800c58c03cdd50011b8748000c03cc040008c038004c028dd50011b874800858c02cc030008c028004c028008c020004c010dd50008a4c26cacae6955ceaab9e5573eae815d0aba21",
      hash: "6e95d24ab0579b9e44c7cd1c801e1527c63124cef086d39443696b6b"
    }
  ],
  definitions: {
    AssetName: {
      title: "AssetName",
      dataType: "bytes"
    },
    Int: {
      dataType: "integer"
    },
    MValue: {
      title: "MValue",
      dataType: "map",
      keys: {
        $ref: "#/definitions/PolicyId"
      },
      values: {
        $ref: "#/definitions/Pairs$AssetName_Int"
      }
    },
    Option$StakeCredential: {
      title: "Option",
      anyOf: [
        {
          title: "Some",
          description: "An optional value.",
          dataType: "constructor",
          index: 0,
          fields: [
            {
              $ref: "#/definitions/StakeCredential"
            }
          ]
        },
        {
          title: "None",
          description: "Nothing.",
          dataType: "constructor",
          index: 1,
          fields: []
        }
      ]
    },
    Pairs$AssetName_Int: {
      title: "Pairs<AssetName, Int>",
      dataType: "map",
      keys: {
        $ref: "#/definitions/AssetName"
      },
      values: {
        $ref: "#/definitions/Int"
      }
    },
    PaymentCredential: {
      title: "PaymentCredential",
      description: "A general structure for representing an on-chain `Credential`.\n\n Credentials are always one of two kinds: a direct public/private key\n pair, or a script (native or Plutus).",
      anyOf: [
        {
          title: "VerificationKey",
          dataType: "constructor",
          index: 0,
          fields: [
            {
              $ref: "#/definitions/VerificationKeyHash"
            }
          ]
        },
        {
          title: "Script",
          dataType: "constructor",
          index: 1,
          fields: [
            {
              $ref: "#/definitions/ScriptHash"
            }
          ]
        }
      ]
    },
    PolicyId: {
      title: "PolicyId",
      dataType: "bytes"
    },
    ScriptHash: {
      title: "ScriptHash",
      dataType: "bytes"
    },
    StakeCredential: {
      title: "StakeCredential",
      description: "Represent a type of object that can be represented either inline (by hash)\n or via a reference (i.e. a pointer to an on-chain location).\n\n This is mainly use for capturing pointers to a stake credential\n registration certificate in the case of so-called pointer addresses.",
      anyOf: [
        {
          title: "Inline",
          dataType: "constructor",
          index: 0,
          fields: [
            {
              $ref: "#/definitions/cardano~1address~1Credential"
            }
          ]
        },
        {
          title: "Pointer",
          dataType: "constructor",
          index: 1,
          fields: [
            {
              title: "slot_number",
              $ref: "#/definitions/Int"
            },
            {
              title: "transaction_index",
              $ref: "#/definitions/Int"
            },
            {
              title: "certificate_index",
              $ref: "#/definitions/Int"
            }
          ]
        }
      ]
    },
    VerificationKeyHash: {
      title: "VerificationKeyHash",
      dataType: "bytes"
    },
    "cardano/address/Address": {
      title: "Address",
      description: "A Cardano `Address` typically holding one or two credential references.\n\n Note that legacy bootstrap addresses (a.k.a. 'Byron addresses') are\n completely excluded from Plutus contexts. Thus, from an on-chain\n perspective only exists addresses of type 00, 01, ..., 07 as detailed\n in [CIP-0019 :: Shelley Addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019/#shelley-addresses).",
      anyOf: [
        {
          title: "Address",
          dataType: "constructor",
          index: 0,
          fields: [
            {
              title: "payment_credential",
              $ref: "#/definitions/PaymentCredential"
            },
            {
              title: "stake_credential",
              $ref: "#/definitions/Option$StakeCredential"
            }
          ]
        }
      ]
    },
    "cardano/address/Credential": {
      title: "Credential",
      description: "A general structure for representing an on-chain `Credential`.\n\n Credentials are always one of two kinds: a direct public/private key\n pair, or a script (native or Plutus).",
      anyOf: [
        {
          title: "VerificationKey",
          dataType: "constructor",
          index: 0,
          fields: [
            {
              $ref: "#/definitions/VerificationKeyHash"
            }
          ]
        },
        {
          title: "Script",
          dataType: "constructor",
          index: 1,
          fields: [
            {
              $ref: "#/definitions/ScriptHash"
            }
          ]
        }
      ]
    },
    "escrow/EscrowDatum": {
      title: "EscrowDatum",
      anyOf: [
        {
          title: "Initiation",
          dataType: "constructor",
          index: 0,
          fields: [
            {
              title: "initiator",
              $ref: "#/definitions/cardano~1address~1Address"
            },
            {
              title: "initiator_assets",
              $ref: "#/definitions/MValue"
            }
          ]
        },
        {
          title: "ActiveEscrow",
          dataType: "constructor",
          index: 1,
          fields: [
            {
              title: "initiator",
              $ref: "#/definitions/cardano~1address~1Address"
            },
            {
              title: "initiator_assets",
              $ref: "#/definitions/MValue"
            },
            {
              title: "recipient",
              $ref: "#/definitions/cardano~1address~1Address"
            },
            {
              title: "recipient_assets",
              $ref: "#/definitions/MValue"
            }
          ]
        }
      ]
    },
    "escrow/EscrowRedeemer": {
      title: "EscrowRedeemer",
      anyOf: [
        {
          title: "RecipientDeposit",
          dataType: "constructor",
          index: 0,
          fields: [
            {
              title: "recipient",
              $ref: "#/definitions/cardano~1address~1Address"
            },
            {
              title: "recipient_assets",
              $ref: "#/definitions/MValue"
            }
          ]
        },
        {
          title: "CancelTrade",
          dataType: "constructor",
          index: 1,
          fields: []
        },
        {
          title: "CompleteTrade",
          dataType: "constructor",
          index: 2,
          fields: []
        }
      ]
    }
  }
};

// src/escrow/offchain.ts
var initiateEscrowDatum = (walletAddress, amount) => {
  const { pubKeyHash, stakeCredentialHash } = deserializeAddress2(walletAddress);
  return conStr0([
    pubKeyAddress(pubKeyHash, stakeCredentialHash),
    value(amount)
  ]);
};
var activeEscrowDatum = (initiationDatum, walletAddress, amount) => {
  const { pubKeyHash, stakeCredentialHash } = deserializeAddress2(walletAddress);
  const [initiator, initiatorAmount] = initiationDatum.fields;
  return conStr1([
    initiator,
    initiatorAmount,
    pubKeyAddress(pubKeyHash, stakeCredentialHash),
    value(amount)
  ]);
};
var recipientDepositRedeemer = (recipient, depositAmount) => initiateEscrowDatum(recipient, depositAmount);
var MeshEscrowContract = class extends MeshTxInitiator {
  scriptCbor;
  scriptAddress;
  constructor(inputs) {
    super(inputs);
    this.scriptCbor = this.getScriptCbor();
    this.scriptAddress = this.getScriptAddress(this.scriptCbor);
  }
  getScriptCbor = () => {
    switch (this.version) {
      case 2:
        return applyParamsToScript3(plutus_default3.validators[0].compiledCode, []);
      default:
        return applyParamsToScript3(plutus_default2.validators[0].compiledCode, []);
    }
  };
  initiateEscrow = async (escrowAmount) => {
    const { utxos, walletAddress } = await this.getWalletInfoForTx();
    await this.mesh.txOut(this.scriptAddress, escrowAmount).txOutInlineDatumValue(
      initiateEscrowDatum(walletAddress, escrowAmount),
      "JSON"
    ).changeAddress(walletAddress).selectUtxosFrom(utxos).complete();
    return this.mesh.txHex;
  };
  cancelEscrow = async (escrowUtxo) => {
    const { utxos, walletAddress, collateral } = await this.getWalletInfoForTx();
    const inputDatum = deserializeDatum(
      escrowUtxo.output.plutusData
    );
    if (inputDatum.constructor === 1) {
      const [
        initiatorAddressObj,
        initiatorAmount,
        recipientAddressObj,
        recipientAmount
      ] = inputDatum.fields;
      const initiatorAddress = serializeAddressObj(
        initiatorAddressObj,
        this.networkId
      );
      const recipientAddress = serializeAddressObj(
        recipientAddressObj,
        this.networkId
      );
      const initiatorToReceive = MeshValue.fromValue(initiatorAmount).toAssets();
      const recipientToReceive = MeshValue.fromValue(
        recipientAmount
      ).toAssets();
      this.mesh.txOut(initiatorAddress, initiatorToReceive).txOut(recipientAddress, recipientToReceive);
    }
    await this.mesh.spendingPlutusScript(this.languageVersion).txIn(
      escrowUtxo.input.txHash,
      escrowUtxo.input.outputIndex,
      escrowUtxo.output.amount,
      this.scriptAddress
    ).spendingReferenceTxInInlineDatumPresent().spendingReferenceTxInRedeemerValue(mConStr12([])).txInScript(this.scriptCbor).requiredSignerHash(deserializeAddress2(walletAddress).pubKeyHash).changeAddress(walletAddress).txInCollateral(
      collateral.input.txHash,
      collateral.input.outputIndex,
      collateral.output.amount,
      collateral.output.address
    ).selectUtxosFrom(utxos).complete();
    return this.mesh.txHex;
  };
  recipientDeposit = async (escrowUtxo, depositAmount) => {
    const { utxos, walletAddress, collateral } = await this.getWalletInfoForTx();
    const inputDatum = deserializeDatum(
      escrowUtxo.output.plutusData
    );
    const outputDatum = activeEscrowDatum(
      inputDatum,
      walletAddress,
      depositAmount
    );
    const inputAssets = MeshValue.fromValue(inputDatum.fields[1]).toAssets();
    const escrowAmount = mergeAssets([...depositAmount, ...inputAssets]);
    await this.mesh.spendingPlutusScript(this.languageVersion).txIn(
      escrowUtxo.input.txHash,
      escrowUtxo.input.outputIndex,
      escrowUtxo.output.amount,
      this.scriptAddress
    ).spendingReferenceTxInInlineDatumPresent().txInRedeemerValue(
      recipientDepositRedeemer(walletAddress, depositAmount),
      "JSON",
      DEFAULT_REDEEMER_BUDGET
    ).txInScript(this.scriptCbor).txOut(this.scriptAddress, escrowAmount).txOutInlineDatumValue(outputDatum, "JSON").changeAddress(walletAddress).txInCollateral(
      collateral.input.txHash,
      collateral.input.outputIndex,
      collateral.output.amount,
      collateral.output.address
    ).selectUtxosFrom(utxos).complete();
    return this.mesh.txHex;
  };
  completeEscrow = async (escrowUtxo) => {
    const { utxos, walletAddress, collateral } = await this.getWalletInfoForTx();
    const inputDatum = deserializeDatum(
      escrowUtxo.output.plutusData
    );
    const [
      initiatorAddressObj,
      initiatorAmount,
      recipientAddressObj,
      recipientAmount
    ] = inputDatum.fields;
    const initiatorAddress = serializeAddressObj(
      initiatorAddressObj,
      this.networkId
    );
    const recipientAddress = serializeAddressObj(
      recipientAddressObj,
      this.networkId
    );
    const initiatorToReceive = MeshValue.fromValue(recipientAmount).toAssets();
    const recipientToReceive = MeshValue.fromValue(initiatorAmount).toAssets();
    await this.mesh.spendingPlutusScript(this.languageVersion).txIn(
      escrowUtxo.input.txHash,
      escrowUtxo.input.outputIndex,
      escrowUtxo.output.amount,
      this.scriptAddress
    ).spendingReferenceTxInInlineDatumPresent().spendingReferenceTxInRedeemerValue(mConStr2([])).txInScript(this.scriptCbor).txOut(initiatorAddress, initiatorToReceive).txOut(recipientAddress, recipientToReceive).requiredSignerHash(deserializeAddress2(recipientAddress).pubKeyHash).requiredSignerHash(deserializeAddress2(initiatorAddress).pubKeyHash).changeAddress(walletAddress).txInCollateral(
      collateral.input.txHash,
      collateral.input.outputIndex,
      collateral.output.amount,
      collateral.output.address
    ).selectUtxosFrom(utxos).complete();
    return this.mesh.txHex;
  };
  getUtxoByTxHash = async (txHash) => {
    return await this._getUtxoByTxHash(txHash, this.scriptCbor);
  };
};

// src/giftcard/offchain.ts
import {
  builtinByteString as builtinByteString2,
  mConStr0 as mConStr02,
  mConStr1 as mConStr13,
  outputReference as outputReference2,
  stringToHex as stringToHex2,
  txOutRef
} from "@meshsdk/common";
import {
  deserializeDatum as deserializeDatum2,
  resolveScriptHash as resolveScriptHash3
} from "@meshsdk/core";
import { applyParamsToScript as applyParamsToScript4 } from "@meshsdk/core-csl";

// src/giftcard/aiken-workspace-v1/plutus.json
var plutus_default4 = {
  preamble: {
    title: "meshjs/giftcard",
    description: "Aiken contracts for project 'meshjs/giftcard'",
    version: "0.0.0",
    plutusVersion: "v2",
    compiler: {
      name: "Aiken",
      version: "v1.0.29-alpha+unknown"
    },
    license: "Apache-2.0"
  },
  validators: [
    {
      title: "oneshot.gift_card",
      redeemer: {
        title: "rdmr",
        schema: {
          $ref: "#/definitions/oneshot~1Action"
        }
      },
      parameters: [
        {
          title: "token_name",
          schema: {
            $ref: "#/definitions/ByteArray"
          }
        },
        {
          title: "utxo_ref",
          schema: {
            $ref: "#/definitions/aiken~1transaction~1OutputReference"
          }
        }
      ],
      compiledCode: "5901f5010000323232323232322322232323225333009323232533300c3007300d3754002264646464a666026602c00426464a666024601a60266ea803854ccc048c034c04cdd5191980080080311299980b8008a60103d87a80001323253330163375e603660306ea800804c4cdd2a40006603400497ae0133004004001301b002301900115333012300c00113371e00402029405854ccc048cdc3800a4002266e3c0080405281bad3013002375c60220022c602800264a66601e601260206ea800452f5bded8c026eacc050c044dd500099191980080099198008009bab3016301730173017301700522533301500114bd6f7b630099191919299980b19b91488100002153330163371e9101000021003100513301a337606ea4008dd3000998030030019bab3017003375c602a0046032004602e00244a666028002298103d87a800013232323253330153372200e0042a66602a66e3c01c0084cdd2a4000660326e980052f5c02980103d87a80001330060060033756602c0066eb8c050008c060008c058004dd7180998081baa00337586024002601c6ea800858c040c044008c03c004c02cdd50008a4c26cac64a66601060060022a66601660146ea8010526161533300830020011533300b300a37540082930b0b18041baa003370e90011b8748000dd7000ab9a5573aaae7955cfaba05742ae89",
      hash: "0c0d17d9095fe6b07a2727403e2c6f2dff8042ed7c300cb67a2577a2"
    },
    {
      title: "oneshot.redeem",
      datum: {
        title: "_d",
        schema: {
          $ref: "#/definitions/Data"
        }
      },
      redeemer: {
        title: "_r",
        schema: {
          $ref: "#/definitions/Data"
        }
      },
      parameters: [
        {
          title: "token_name",
          schema: {
            $ref: "#/definitions/ByteArray"
          }
        },
        {
          title: "policy_id",
          schema: {
            $ref: "#/definitions/ByteArray"
          }
        }
      ],
      compiledCode: "5901320100003232323232323223223222253330083232533300d3010002132533300b3370e6eb4c034009200113371e0020122940dd718058008b180700099299980499b8748008c028dd50008a5eb7bdb1804dd5980718059baa001323300100132330010013756601e602060206020602060186ea8c03cc030dd50019129998070008a5eb7bdb1804c8c8c8c94ccc03ccdc8a45000021533300f3371e91010000210031005133013337606ea4008dd3000998030030019bab3010003375c601c0046024004602000244a66601a002298103d87a8000132323232533300e337220140042a66601c66e3c0280084cdd2a4000660246e980052f5c02980103d87a80001330060060033756601e0066eb8c034008c044008c03c00452613656375c0026eb80055cd2ab9d5573caae7d5d02ba157441",
      hash: "39faa048196bb6b30f50815475e9d16b22e7a0ef6de5935b408ca617"
    }
  ],
  definitions: {
    ByteArray: {
      dataType: "bytes"
    },
    Data: {
      title: "Data",
      description: "Any Plutus data."
    },
    Int: {
      dataType: "integer"
    },
    "aiken/transaction/OutputReference": {
      title: "OutputReference",
      description: "An `OutputReference` is a unique reference to an output on-chain. The `output_index`\n corresponds to the position in the output list of the transaction (identified by its id)\n that produced that output",
      anyOf: [
        {
          title: "OutputReference",
          dataType: "constructor",
          index: 0,
          fields: [
            {
              title: "transaction_id",
              $ref: "#/definitions/aiken~1transaction~1TransactionId"
            },
            {
              title: "output_index",
              $ref: "#/definitions/Int"
            }
          ]
        }
      ]
    },
    "aiken/transaction/TransactionId": {
      title: "TransactionId",
      description: "A unique transaction identifier, as the hash of a transaction body. Note that the transaction id\n isn't a direct hash of the `Transaction` as visible on-chain. Rather, they correspond to hash\n digests of transaction body as they are serialized on the network.",
      anyOf: [
        {
          title: "TransactionId",
          dataType: "constructor",
          index: 0,
          fields: [
            {
              title: "hash",
              $ref: "#/definitions/ByteArray"
            }
          ]
        }
      ]
    },
    "oneshot/Action": {
      title: "Action",
      anyOf: [
        {
          title: "Mint",
          dataType: "constructor",
          index: 0,
          fields: []
        },
        {
          title: "Burn",
          dataType: "constructor",
          index: 1,
          fields: []
        }
      ]
    }
  }
};

// src/giftcard/aiken-workspace-v2/plutus.json
var plutus_default5 = {
  preamble: {
    title: "meshjs/giftcard",
    description: "Aiken contracts for project 'meshjs/giftcard'",
    version: "0.0.0",
    plutusVersion: "v3",
    compiler: {
      name: "Aiken",
      version: "v1.1.0+unknown"
    },
    license: "Apache-2.0"
  },
  validators: [
    {
      title: "oneshot.gift_card.mint",
      redeemer: {
        title: "rdmr",
        schema: {
          $ref: "#/definitions/oneshot~1Action"
        }
      },
      parameters: [
        {
          title: "token_name",
          schema: {
            $ref: "#/definitions/ByteArray"
          }
        },
        {
          title: "utxo_ref",
          schema: {
            $ref: "#/definitions/cardano~1transaction~1OutputReference"
          }
        }
      ],
      compiledCode: "5901ae01010032323232323232232225333005323232323253323300b3001300c3754004264646464a66601e600a0022a66602460226ea801c540085854ccc03cc00c00454ccc048c044dd50038a8010b0b18079baa006132323232533301430170021323253330133009301437540162a666026601260286ea8c8cc004004018894ccc0600045300103d87a80001323253330173375e603860326ea80080504cdd2a40006603600497ae0133004004001301c002301a00115333013300700113371e00402229405854ccc04ccdc3800a4002266e3c0080445281bad3014002375c60240022c602a00264a666020600860226ea800452f5bded8c026eacc054c048dd500099198008009bab3015301630163016301600322533301400114c103d87a80001323232325333015337220140042a66602a66e3c0280084cdd2a4000660326e980052f5c02980103d87a80001330060060033756602c0066eb8c050008c060008c058004dd6180980098079baa007370e90011bae3010300d37540046e1d200016300e300f002300d001300d002300b0013007375400229309b2b1bae0015734aae7555cf2ab9f5740ae855d11",
      hash: "401c967008d42885400991f9225715e1c3a8e43757b1fd36a1328195"
    },
    {
      title: "oneshot.gift_card.else",
      parameters: [
        {
          title: "token_name",
          schema: {
            $ref: "#/definitions/ByteArray"
          }
        },
        {
          title: "utxo_ref",
          schema: {
            $ref: "#/definitions/cardano~1transaction~1OutputReference"
          }
        }
      ],
      compiledCode: "5901ae01010032323232323232232225333005323232323253323300b3001300c3754004264646464a66601e600a0022a66602460226ea801c540085854ccc03cc00c00454ccc048c044dd50038a8010b0b18079baa006132323232533301430170021323253330133009301437540162a666026601260286ea8c8cc004004018894ccc0600045300103d87a80001323253330173375e603860326ea80080504cdd2a40006603600497ae0133004004001301c002301a00115333013300700113371e00402229405854ccc04ccdc3800a4002266e3c0080445281bad3014002375c60240022c602a00264a666020600860226ea800452f5bded8c026eacc054c048dd500099198008009bab3015301630163016301600322533301400114c103d87a80001323232325333015337220140042a66602a66e3c0280084cdd2a4000660326e980052f5c02980103d87a80001330060060033756602c0066eb8c050008c060008c058004dd6180980098079baa007370e90011bae3010300d37540046e1d200016300e300f002300d001300d002300b0013007375400229309b2b1bae0015734aae7555cf2ab9f5740ae855d11",
      hash: "401c967008d42885400991f9225715e1c3a8e43757b1fd36a1328195"
    },
    {
      title: "oneshot.redeem.spend",
      datum: {
        title: "_d",
        schema: {
          $ref: "#/definitions/Data"
        }
      },
      redeemer: {
        title: "_r",
        schema: {
          $ref: "#/definitions/Data"
        }
      },
      parameters: [
        {
          title: "token_name",
          schema: {
            $ref: "#/definitions/ByteArray"
          }
        },
        {
          title: "policy_id",
          schema: {
            $ref: "#/definitions/ByteArray"
          }
        }
      ],
      compiledCode: "59011501010032323232323232232232253330063232323232533300b3370e900118061baa001132323232325333013301600213253330113370e6eb4c04c009200113371e00201e2940dd718088008b180a00099299980799b8748008c040dd50008a5eb7bdb1804dd5980a18089baa001323300100137566028602a602a602a602a60226ea8020894ccc04c004530103d87a80001323232325333014337220200042a66602866e3c0400084cdd2a4000660306e980052f5c02980103d87a80001330060060033756602a0066eb8c04c008c05c008c054004c048c04c008c044004c034dd50008b1807980800118070009807001180600098041baa00114984d958dd70009bae0015734aae7555cf2ab9f5740ae855d101",
      hash: "b2386630f1b210c58d0e46f132e931b362c3f373685118018e4d956f"
    },
    {
      title: "oneshot.redeem.else",
      parameters: [
        {
          title: "token_name",
          schema: {
            $ref: "#/definitions/ByteArray"
          }
        },
        {
          title: "policy_id",
          schema: {
            $ref: "#/definitions/ByteArray"
          }
        }
      ],
      compiledCode: "59011501010032323232323232232232253330063232323232533300b3370e900118061baa001132323232325333013301600213253330113370e6eb4c04c009200113371e00201e2940dd718088008b180a00099299980799b8748008c040dd50008a5eb7bdb1804dd5980a18089baa001323300100137566028602a602a602a602a60226ea8020894ccc04c004530103d87a80001323232325333014337220200042a66602866e3c0400084cdd2a4000660306e980052f5c02980103d87a80001330060060033756602a0066eb8c04c008c05c008c054004c048c04c008c044004c034dd50008b1807980800118070009807001180600098041baa00114984d958dd70009bae0015734aae7555cf2ab9f5740ae855d101",
      hash: "b2386630f1b210c58d0e46f132e931b362c3f373685118018e4d956f"
    }
  ],
  definitions: {
    ByteArray: {
      dataType: "bytes"
    },
    Data: {
      title: "Data",
      description: "Any Plutus data."
    },
    Int: {
      dataType: "integer"
    },
    "cardano/transaction/OutputReference": {
      title: "OutputReference",
      description: "An `OutputReference` is a unique reference to an output on-chain. The `output_index`\n corresponds to the position in the output list of the transaction (identified by its id)\n that produced that output",
      anyOf: [
        {
          title: "OutputReference",
          dataType: "constructor",
          index: 0,
          fields: [
            {
              title: "transaction_id",
              $ref: "#/definitions/ByteArray"
            },
            {
              title: "output_index",
              $ref: "#/definitions/Int"
            }
          ]
        }
      ]
    },
    "oneshot/Action": {
      title: "Action",
      anyOf: [
        {
          title: "Mint",
          dataType: "constructor",
          index: 0,
          fields: []
        },
        {
          title: "Burn",
          dataType: "constructor",
          index: 1,
          fields: []
        }
      ]
    }
  }
};

// src/giftcard/offchain.ts
var MeshGiftCardContract = class extends MeshTxInitiator {
  tokenNameHex = "";
  paramUtxo = { outputIndex: 0, txHash: "" };
  constructor(inputs, tokenNameHex, paramUtxo) {
    super(inputs);
    if (tokenNameHex) {
      this.tokenNameHex = tokenNameHex;
    }
    if (paramUtxo) {
      this.paramUtxo = paramUtxo;
    }
  }
  giftCardCbor = (tokenNameHex, utxoTxHash, utxoTxId) => {
    let scriptCbor;
    let utxo;
    switch (this.version) {
      case 2:
        scriptCbor = plutus_default5.validators[0].compiledCode;
        utxo = outputReference2(utxoTxHash, utxoTxId);
        break;
      default:
        scriptCbor = plutus_default4.validators[0].compiledCode;
        utxo = txOutRef(utxoTxHash, utxoTxId);
        break;
    }
    return applyParamsToScript4(
      scriptCbor,
      [builtinByteString2(tokenNameHex), utxo],
      "JSON"
    );
  };
  redeemCbor = (tokenNameHex, policyId) => {
    let scriptCbor;
    switch (this.version) {
      case 2:
        scriptCbor = plutus_default5.validators[2].compiledCode;
        break;
      default:
        scriptCbor = plutus_default4.validators[1].compiledCode;
    }
    return applyParamsToScript4(scriptCbor, [tokenNameHex, policyId]);
  };
  createGiftCard = async (tokenName2, giftValue) => {
    const { utxos, walletAddress, collateral } = await this.getWalletInfoForTx();
    const tokenNameHex = stringToHex2(tokenName2);
    const firstUtxo = utxos[0];
    if (firstUtxo === void 0) throw new Error("No UTXOs available");
    const remainingUtxos = utxos.slice(1);
    const giftCardScript = this.giftCardCbor(
      tokenNameHex,
      firstUtxo.input.txHash,
      firstUtxo.input.outputIndex
    );
    const giftCardPolicy = resolveScriptHash3(
      giftCardScript,
      this.languageVersion
    );
    const redeemScript = {
      code: this.redeemCbor(tokenNameHex, giftCardPolicy),
      version: this.languageVersion
    };
    const redeemAddr = this.getScriptAddress(redeemScript.code);
    await this.mesh.txIn(
      firstUtxo.input.txHash,
      firstUtxo.input.outputIndex,
      firstUtxo.output.amount,
      firstUtxo.output.address
    ).mintPlutusScript(this.languageVersion).mint("1", giftCardPolicy, tokenNameHex).mintingScript(giftCardScript).mintRedeemerValue(mConStr02([])).txOut(redeemAddr, [
      ...giftValue,
      { unit: giftCardPolicy + tokenNameHex, quantity: "1" }
    ]).txOutInlineDatumValue([
      firstUtxo.input.txHash,
      firstUtxo.input.outputIndex,
      tokenNameHex
    ]).changeAddress(walletAddress).txInCollateral(
      collateral.input.txHash,
      collateral.input.outputIndex,
      collateral.output.amount,
      collateral.output.address
    ).selectUtxosFrom(remainingUtxos).complete();
    this.tokenNameHex = tokenNameHex;
    this.paramUtxo = firstUtxo.input;
    return this.mesh.txHex;
  };
  redeemGiftCard = async (giftCardUtxo) => {
    const { utxos, walletAddress, collateral } = await this.getWalletInfoForTx();
    const inlineDatum = deserializeDatum2(
      giftCardUtxo.output.plutusData
    ).list;
    const paramTxHash = inlineDatum[0].bytes;
    const paramTxId = inlineDatum[1].int;
    const tokenNameHex = inlineDatum[2].bytes;
    const giftCardScript = this.giftCardCbor(
      tokenNameHex,
      paramTxHash,
      paramTxId
    );
    const giftCardPolicy = resolveScriptHash3(
      giftCardScript,
      this.languageVersion
    );
    const redeemScript = this.redeemCbor(tokenNameHex, giftCardPolicy);
    await this.mesh.spendingPlutusScript(this.languageVersion).txIn(
      giftCardUtxo.input.txHash,
      giftCardUtxo.input.outputIndex,
      giftCardUtxo.output.amount,
      giftCardUtxo.output.address
    ).spendingReferenceTxInInlineDatumPresent().spendingReferenceTxInRedeemerValue("").txInScript(redeemScript).mintPlutusScript(this.languageVersion).mint("-1", giftCardPolicy, tokenNameHex).mintingScript(giftCardScript).mintRedeemerValue(mConStr13([])).changeAddress(walletAddress).txInCollateral(
      collateral.input.txHash,
      collateral.input.outputIndex,
      collateral.output.amount,
      collateral.output.address
    ).selectUtxosFrom(utxos).complete();
    return this.mesh.txHex;
  };
  getUtxoByTxHash = async (txHash) => {
    return await this._getUtxoByTxHash(txHash);
  };
};

// src/hello-world/offchain.ts
import {
  deserializeAddress as deserializeAddress3,
  mConStr0 as mConStr03,
  stringToHex as stringToHex3
} from "@meshsdk/core";
import { applyParamsToScript as applyParamsToScript5 } from "@meshsdk/core-csl";

// src/hello-world/aiken-workspace-v1/plutus.json
var plutus_default6 = {
  preamble: {
    title: "meshjs/aiken",
    description: "Aiken on MeshJS",
    version: "0.0.0",
    plutusVersion: "v2",
    compiler: {
      name: "Aiken",
      version: "v1.0.29-alpha+unknown"
    },
    license: "Apache-2.0"
  },
  validators: [
    {
      title: "hello_world.hello_world",
      datum: {
        title: "datum",
        schema: {
          $ref: "#/definitions/hello_world~1Datum"
        }
      },
      redeemer: {
        title: "redeemer",
        schema: {
          $ref: "#/definitions/hello_world~1Redeemer"
        }
      },
      compiledCode: "58e901000032323232323223223225333006323253330083371e6eb8c008c028dd5002a4410d48656c6c6f2c20576f726c642100100114a06644646600200200644a66601c00229404c94ccc030cdc79bae301000200414a226600600600260200026eb0c02cc030c030c030c030c030c030c030c030c024dd5180098049baa002375c600260126ea80188c02c0045261365653330043370e900018029baa001132325333009300b002149858dd7180480098031baa0011653330023370e900018019baa0011323253330073009002149858dd7180380098021baa001165734aae7555cf2ab9f5742ae881",
      hash: "c1fe430f19ac248a8a7ea47db106002c4327e542c3fdc60ad6481103"
    }
  ],
  definitions: {
    ByteArray: {
      dataType: "bytes"
    },
    "hello_world/Datum": {
      title: "Datum",
      anyOf: [
        {
          title: "Datum",
          dataType: "constructor",
          index: 0,
          fields: [
            {
              title: "owner",
              $ref: "#/definitions/ByteArray"
            }
          ]
        }
      ]
    },
    "hello_world/Redeemer": {
      title: "Redeemer",
      anyOf: [
        {
          title: "Redeemer",
          dataType: "constructor",
          index: 0,
          fields: [
            {
              title: "msg",
              $ref: "#/definitions/ByteArray"
            }
          ]
        }
      ]
    }
  }
};

// src/hello-world/aiken-workspace-v2/plutus.json
var plutus_default7 = {
  preamble: {
    title: "meshjs/aiken",
    description: "Aiken on MeshJS",
    version: "0.0.0",
    plutusVersion: "v3",
    compiler: {
      name: "Aiken",
      version: "v1.1.0+unknown"
    },
    license: "Apache-2.0"
  },
  validators: [
    {
      title: "hello_world.hello_world.spend",
      datum: {
        title: "datum_opt",
        schema: {
          $ref: "#/definitions/hello_world~1Datum"
        }
      },
      redeemer: {
        title: "redeemer",
        schema: {
          $ref: "#/definitions/hello_world~1Redeemer"
        }
      },
      compiledCode: "59010801010032323232323225333002323232323253330073370e900118041baa0011323232533300a3370e900018059baa00513232533300f30110021533300c3370e900018069baa00313232533300e3371e6eb8c008c040dd5004a450d48656c6c6f2c20576f726c642100100114a06644646600200200644a66602800229404c94ccc048cdc79bae301600200414a2266006006002602c0026eb0c044c048c048c048c048c048c048c048c048c03cdd50051bae3001300f37546022601e6ea80108c0440045858dd7180780098061baa00516300d300e002300c001300937540022c6014601600460120026012004600e00260086ea8004526136565734aae7555cf2ab9f5742ae89",
      hash: "7aef0f7e3fa04defd42c73815891623f7b56d4b98c47610dd59395fe"
    },
    {
      title: "hello_world.hello_world.else",
      compiledCode: "59010801010032323232323225333002323232323253330073370e900118041baa0011323232533300a3370e900018059baa00513232533300f30110021533300c3370e900018069baa00313232533300e3371e6eb8c008c040dd5004a450d48656c6c6f2c20576f726c642100100114a06644646600200200644a66602800229404c94ccc048cdc79bae301600200414a2266006006002602c0026eb0c044c048c048c048c048c048c048c048c048c03cdd50051bae3001300f37546022601e6ea80108c0440045858dd7180780098061baa00516300d300e002300c001300937540022c6014601600460120026012004600e00260086ea8004526136565734aae7555cf2ab9f5742ae89",
      hash: "7aef0f7e3fa04defd42c73815891623f7b56d4b98c47610dd59395fe"
    }
  ],
  definitions: {
    ByteArray: {
      dataType: "bytes"
    },
    VerificationKeyHash: {
      title: "VerificationKeyHash",
      dataType: "bytes"
    },
    "hello_world/Datum": {
      title: "Datum",
      anyOf: [
        {
          title: "Datum",
          dataType: "constructor",
          index: 0,
          fields: [
            {
              title: "owner",
              $ref: "#/definitions/VerificationKeyHash"
            }
          ]
        }
      ]
    },
    "hello_world/Redeemer": {
      title: "Redeemer",
      anyOf: [
        {
          title: "Redeemer",
          dataType: "constructor",
          index: 0,
          fields: [
            {
              title: "msg",
              $ref: "#/definitions/ByteArray"
            }
          ]
        }
      ]
    }
  }
};

// src/hello-world/offchain.ts
var MeshHelloWorldContract = class extends MeshTxInitiator {
  scriptCbor;
  scriptAddress;
  constructor(inputs) {
    super(inputs);
    this.scriptCbor = this.getScriptCbor();
    this.scriptAddress = this.getScriptAddress(this.scriptCbor);
  }
  getScriptCbor = () => {
    switch (this.version) {
      case 2:
        return applyParamsToScript5(plutus_default7.validators[0].compiledCode, []);
      default:
        return applyParamsToScript5(plutus_default6.validators[0].compiledCode, []);
    }
  };
  lockAsset = async (assets) => {
    const { utxos, walletAddress } = await this.getWalletInfoForTx();
    const signerHash = deserializeAddress3(walletAddress).pubKeyHash;
    await this.mesh.txOut(this.scriptAddress, assets).txOutDatumHashValue(mConStr03([signerHash])).changeAddress(walletAddress).selectUtxosFrom(utxos).complete();
    return this.mesh.txHex;
  };
  unlockAsset = async (scriptUtxo, message) => {
    const { utxos, walletAddress, collateral } = await this.getWalletInfoForTx();
    const signerHash = deserializeAddress3(walletAddress).pubKeyHash;
    await this.mesh.spendingPlutusScript(this.languageVersion).txIn(
      scriptUtxo.input.txHash,
      scriptUtxo.input.outputIndex,
      scriptUtxo.output.amount,
      scriptUtxo.output.address
    ).txInScript(this.scriptCbor).txInRedeemerValue(mConStr03([stringToHex3(message)])).txInDatumValue(mConStr03([signerHash])).requiredSignerHash(signerHash).changeAddress(walletAddress).txInCollateral(
      collateral.input.txHash,
      collateral.input.outputIndex,
      collateral.output.amount,
      collateral.output.address
    ).selectUtxosFrom(utxos).complete();
    return this.mesh.txHex;
  };
  getUtxoByTxHash = async (txHash) => {
    return await this._getUtxoByTxHash(txHash, this.scriptCbor);
  };
};

// src/marketplace/offchain.ts
import {
  conStr0 as conStr02,
  currencySymbol,
  integer,
  mConStr0 as mConStr04,
  mConStr1 as mConStr14,
  parseAssetUnit,
  pubKeyAddress as pubKeyAddress2,
  tokenName
} from "@meshsdk/common";
import {
  deserializeAddress as deserializeAddress4,
  deserializeDatum as deserializeDatum3,
  serializeAddressObj as serializeAddressObj2
} from "@meshsdk/core";
import { applyParamsToScript as applyParamsToScript6 } from "@meshsdk/core-csl";

// src/marketplace/aiken-workspace-v1/plutus.json
var plutus_default8 = {
  preamble: {
    title: "meshjs/marketplace",
    description: "Aiken contracts for project 'meshjs/marketplace'",
    version: "0.0.0",
    plutusVersion: "v2",
    compiler: {
      name: "Aiken",
      version: "v1.0.29-alpha+unknown"
    },
    license: "Apache-2.0"
  },
  validators: [
    {
      title: "marketplace.marketplace",
      datum: {
        title: "datum",
        schema: {
          $ref: "#/definitions/marketplace~1types~1MarketplaceDatum"
        }
      },
      redeemer: {
        title: "redeemer",
        schema: {
          $ref: "#/definitions/marketplace~1types~1MarketplaceRedeemer"
        }
      },
      parameters: [
        {
          title: "owner",
          schema: {
            $ref: "#/definitions/aiken~1transaction~1credential~1Address"
          }
        },
        {
          title: "fee_percentage_basis_point",
          schema: {
            $ref: "#/definitions/Int"
          }
        }
      ],
      compiledCode: "59082f01000032323232323232223223232322322533300b3232533300d3007300e375400226464a64666020601660226ea80204c94ccc044c030c048dd500089919191919191919299980c99299980e8008a501533301d302000114a22940cc88c8cc00400400c894ccc08000452f5c026464a66603e66ebcc044c084dd5180a18109baa00200513302300233004004001133004004001302400230220013758601660366ea8c02cc06cdd50079805980d9baa300e301b37540102a6660320022004294052819801998011bac3004301a3754601460346ea803805cc018cdc199b82375a601a60346ea805005520a09c0133002330013758600660326ea8c024c064dd50069804980c9baa0133005337006eb4c030c064dd50099998021bab300c30193754601860326ea801922010048810022323300100100322533301d00114bd6f7b63009991299980e19baf300e301e375400400a2646660020020046eacc048c07cdd50019112999811001080089919980200218130019991191980080080291299981380089981419bb037520086e9800d2f5bded8c0264646464a66605066e400200084cc0b0cdd81ba9008374c00e00a2a66605066e3c0200084c94ccc0a4c090c0a8dd500089981699bb03752012605c60566ea80040104010c94ccc0a54ccc0b00045288a5014c0103d87a80001301a3302d374c00297ae032333001001008002222533302e0021001132333004004303200333223233001001005225333033001133034337606ea4010dd4001a5eb7bdb1804c8c8c8c94ccc0d0cdc800400109981c19bb037520106ea001c01454ccc0d0cdc7804001099299981a9818181b1baa001133039337606ea4024c0e8c0dcdd5000802080219299981a98180008a60103d87a80001302633039375000297ae03370000e00226607066ec0dd48011ba800133006006003375a606a0066eb8c0cc008c0dc008c0d4004dd718168009bad302e001303000213302c337606ea4008dd3000998030030019bab3029003375c604e004605600460520026eb8c084004dd5981100098120010800980f800998010011810000911919800800991980080080191299980e8008a5eb804c8ccc888c8cc00400400c894ccc08c004400c4c8cc094dd3998129ba90063302530220013302530230014bd7019801801981380118128009bae301c0013756603a002660060066042004603e00244a66603800229444c94ccc068c8cdc49bad3007001333008006375c601a0026eb8c040004dd6180f8010998018018008a50301f0012301a301b301b0012223253330173011301837540022900009bad301c3019375400264a66602e602260306ea8004530103d87a8000132330010013756603a60346ea8008894ccc070004530103d87a8000132323232533301d337220100042a66603a66e3c0200084c038cc084dd4000a5eb80530103d87a8000133006006003375a603c0066eb8c070008c080008c078004c8cc004004010894ccc06c0045300103d87a8000132323232533301c337220100042a66603866e3c0200084c034cc080dd3000a5eb80530103d87a80001330060060033756603a0066eb8c06c008c07c008c07400494ccc04cc03800452f5bded8c0264646600200297adef6c6022533301900113301a337609801014000374c00697adef6c60132323232533301a3372091010000213301e337609801014000374c00e00a2a66603466e3d2210000213301e337609801014000374c00e00626603c66ec0dd48011ba600133006006003375660360066eb8c064008c074008c06c004c8cc0040052f5bded8c044a66603000226603266ec13001014000375000697adef6c6013232323253330193372091010000213301d337609801014000375000e00a2a66603266e3d2210000213301d337609801014000375000e00626603a66ec0dd48011ba800133006006003375a60340066eb8c060008c070008c068004c058c04cdd50008b19198008009bac300330133754600660266ea801c894ccc054004530103d87a80001323253330143375e600c602c6ea800801c4c014cc0600092f5c02660080080026032004602e002264a666022601860246ea80044cc88c8cc00400400c894ccc060004528099299980b19b8f375c603600400829444cc00c00c004c06c004dd6180b180b980b980b980b980b980b980b980b98099baa30033013375400e6eb8c058c04cdd50008b192999808980618091baa001130023301530163013375400297ae014c0103d87a8000300230123754600460246ea8030dd2a4000460280026024601e6ea8004528180098071baa00223011301200114984d958c94ccc028c01400454ccc034c030dd50010a4c2c2a66601460080022a66601a60186ea80085261616300a375400264a666010600660126ea80104c8c8c8c8c8c8c8c94ccc04cc0580084c9265333010300b3011375400e264646464a66602e6034004264649319299980b180880089919299980d980f00109924c64a666032602800226464a66603c604200426493180a0008b180f800980d9baa002153330193013001132323232323253330223025002149858dd6981180098118011bad30210013021002375a603e00260366ea800858c064dd50008b180e000980c1baa00315333016301000115333019301837540062930b0b180b1baa002300d003163018001301800230160013012375400e2c2c6eb8c050004c050008dd7180900098090011bad30100013010002300e001300a37540082c464a666012600800226464a66601c60220042930b1bae300f001300b37540042a666012600600226464a66601c60220042930b1bae300f001300b37540042c60126ea8004dc3a40046e1d2000375a002ae6955ceaab9e5573eae815d0aba21",
      hash: "96dbc09c69d812e157d42967587c459b60f5dd21b1902312045586c4"
    }
  ],
  definitions: {
    ByteArray: {
      dataType: "bytes"
    },
    Int: {
      dataType: "integer"
    },
    "Option$aiken/transaction/credential/Referenced$aiken/transaction/credential/Credential": {
      title: "Optional",
      anyOf: [
        {
          title: "Some",
          description: "An optional value.",
          dataType: "constructor",
          index: 0,
          fields: [
            {
              $ref: "#/definitions/aiken~1transaction~1credential~1Referenced$aiken~1transaction~1credential~1Credential"
            }
          ]
        },
        {
          title: "None",
          description: "Nothing.",
          dataType: "constructor",
          index: 1,
          fields: []
        }
      ]
    },
    "aiken/transaction/credential/Address": {
      title: "Address",
      description: "A Cardano `Address` typically holding one or two credential references.\n\n Note that legacy bootstrap addresses (a.k.a. 'Byron addresses') are\n completely excluded from Plutus contexts. Thus, from an on-chain\n perspective only exists addresses of type 00, 01, ..., 07 as detailed\n in [CIP-0019 :: Shelley Addresses](https://cips.cardano.org/cip/CIP-19).",
      anyOf: [
        {
          title: "Address",
          dataType: "constructor",
          index: 0,
          fields: [
            {
              title: "payment_credential",
              $ref: "#/definitions/aiken~1transaction~1credential~1Credential"
            },
            {
              title: "stake_credential",
              $ref: "#/definitions/Option$aiken~1transaction~1credential~1Referenced$aiken~1transaction~1credential~1Credential"
            }
          ]
        }
      ]
    },
    "aiken/transaction/credential/Credential": {
      title: "Credential",
      description: "A general structure for representing an on-chain `Credential`.\n\n Credentials are always one of two kinds: a direct public/private key\n pair, or a script (native or Plutus).",
      anyOf: [
        {
          title: "VerificationKeyCredential",
          dataType: "constructor",
          index: 0,
          fields: [
            {
              $ref: "#/definitions/ByteArray"
            }
          ]
        },
        {
          title: "ScriptCredential",
          dataType: "constructor",
          index: 1,
          fields: [
            {
              $ref: "#/definitions/ByteArray"
            }
          ]
        }
      ]
    },
    "aiken/transaction/credential/Referenced$aiken/transaction/credential/Credential": {
      title: "Referenced",
      description: "Represent a type of object that can be represented either inline (by hash)\n or via a reference (i.e. a pointer to an on-chain location).\n\n This is mainly use for capturing pointers to a stake credential\n registration certificate in the case of so-called pointer addresses.",
      anyOf: [
        {
          title: "Inline",
          dataType: "constructor",
          index: 0,
          fields: [
            {
              $ref: "#/definitions/aiken~1transaction~1credential~1Credential"
            }
          ]
        },
        {
          title: "Pointer",
          dataType: "constructor",
          index: 1,
          fields: [
            {
              title: "slot_number",
              $ref: "#/definitions/Int"
            },
            {
              title: "transaction_index",
              $ref: "#/definitions/Int"
            },
            {
              title: "certificate_index",
              $ref: "#/definitions/Int"
            }
          ]
        }
      ]
    },
    "marketplace/types/MarketplaceDatum": {
      title: "MarketplaceDatum",
      anyOf: [
        {
          title: "MarketplaceDatum",
          dataType: "constructor",
          index: 0,
          fields: [
            {
              title: "seller",
              $ref: "#/definitions/aiken~1transaction~1credential~1Address"
            },
            {
              title: "price",
              $ref: "#/definitions/Int"
            },
            {
              title: "policy",
              $ref: "#/definitions/ByteArray"
            },
            {
              title: "tokenName",
              $ref: "#/definitions/ByteArray"
            }
          ]
        }
      ]
    },
    "marketplace/types/MarketplaceRedeemer": {
      title: "MarketplaceRedeemer",
      anyOf: [
        {
          title: "Buy",
          dataType: "constructor",
          index: 0,
          fields: []
        },
        {
          title: "Close",
          dataType: "constructor",
          index: 1,
          fields: []
        }
      ]
    }
  }
};

// src/marketplace/aiken-workspace-v2/plutus.json
var plutus_default9 = {
  preamble: {
    title: "meshjs/marketplace",
    description: "Aiken contracts for project 'meshjs/marketplace'",
    version: "0.0.0",
    plutusVersion: "v3",
    compiler: {
      name: "Aiken",
      version: "v1.1.0+unknown"
    },
    license: "Apache-2.0"
  },
  validators: [
    {
      title: "marketplace.marketplace.spend",
      datum: {
        title: "datum_opt",
        schema: {
          $ref: "#/definitions/marketplace~1MarketplaceDatum"
        }
      },
      redeemer: {
        title: "redeemer",
        schema: {
          $ref: "#/definitions/marketplace~1MarketplaceRedeemer"
        }
      },
      parameters: [
        {
          title: "owner",
          schema: {
            $ref: "#/definitions/cardano~1address~1Address"
          }
        },
        {
          title: "fee_percentage_basis_point",
          schema: {
            $ref: "#/definitions/Int"
          }
        }
      ],
      compiledCode: "5906f401010032323232323232223225333005323232323253323300b3001300c37540042646464646464a66602260060022a66602860266ea8024540085854ccc044c01c00454ccc050c04cdd50048a8010b0b18089baa0081533300f30013010375400426464a64666024600860266ea80284c94ccc04cc014c050dd50008991919191919191919299980e1929998100008a5015333020302300114a22940cc88c8cc00400400c894ccc08c00452f5c026464a66604466ebcc048c090dd5180718121baa002005133026002330040040011330040040013027002302500137586018603c6ea8058c030c078dd51804180f1baa0091533301c001100214a02940cc00ccc008dd61802180e9baa01501a30063370666e08dd69803980e9baa00c018482827004cc008cc004dd61801980e1baa014300a301c3754016600a66e00dd69803180e1baa00b3330043756600c60386ea8c018c070dd5003a450048810022323300100100322533302000114bd6f7b63009991299980f99baf300f3021375400400a2646660020020046eacc030c088dd50019112999812801080089919980200218148019991191980080080291299981500089981599bb037520086e9800d2f5bded8c0264646464a66605666e400200084cc0bccdd81ba9008374c00e00a2a66605666e3c0200084c94ccc0b0c078c0b4dd500089981819bb037520126062605c6ea80040104010c94ccc0b14ccc0bc0045288a5014c0103d87a80001301b33030374c00297ae03233300100100800222253330310021001132333004004303500333223233001001005225333036001133037337606ea4010dd4001a5eb7bdb1804c8c8c8c94ccc0dccdc800400109981d99bb037520106ea001c01454ccc0dccdc7804001099299981c1815181c9baa00113303c337606ea4024c0f4c0e8dd5000802080219299981c18150008a60103d87a8000130273303c375000297ae03370000e00226607666ec0dd48011ba800133006006003375a60700066eb8c0d8008c0e8008c0e0004dd718180009bad3031001303300213302f337606ea4008dd3000998030030019bab302c003375c6054004605c00460580026eb8c090004dd5981280098138010800981100099801001181180091191980080099198008008019129998100008a5eb804c8ccc888c8cc00400400c894ccc098004400c4c8cc0a0dd3998141ba90063302830250013302830260014bd7019801801981500118140009bae301f00137566040002660060066048004604400244a66603e00229444c94ccc074c8cdc49bad3007001333008006375c601c0026eb8c028004dd618110010998018018008a5030220012301d301e301e00122232533301a3010301b37540022900009bad301f301c375400264a666034602060366ea8004530103d87a80001323300100137566040603a6ea8008894ccc07c004530103d87a80001323232325333020337220100042a66604066e3c0200084c03ccc090dd4000a5eb80530103d87a8000133006006003375a60420066eb8c07c008c08c008c084004c8cc004004010894ccc0780045300103d87a8000132323232533301f337220100042a66603e66e3c0200084c038cc08cdd3000a5eb80530103d87a8000133006006003375660400066eb8c078008c088008c08000494ccc058c02000452f5bded8c0264646600200297adef6c6022533301c00113301d337609801014000374c00697adef6c60132323232533301d33720910100002133021337609801014000374c00e00a2a66603a66e3d22100002133021337609801014000374c00e00626604266ec0dd48011ba6001330060060033756603c0066eb8c070008c080008c078004c8cc0040052f5bded8c044a66603600226603866ec13001014000375000697adef6c60132323232533301c33720910100002133020337609801014000375000e00a2a66603866e3d22100002133020337609801014000375000e00626604066ec0dd48011ba800133006006003375a603a0066eb8c06c008c07c008c0740048c068c06c004c060c054dd50008b19198008009bac30033015375401a44a66602e002298103d87a80001323253330163375e600c60306ea80080284c014cc0680092f5c026600800800260360046032002264a666026600a60286ea80044cc88c8cc00400400c894ccc068004528099299980c19b8f375c603a00400829444cc00c00c004c074004dd6180c180c980c980c980c980c980c980c980c980a9baa00d375c6030602a6ea800458c94ccc04cc014c050dd5000898011980b980c180a9baa0014bd700a60103d87a8000300230143754600460286ea800cdd2a40004602c002602860226ea800858dc3a4000602460260046022002601a6ea8008dc3a40042c601c601e004601a002601a0046016002600e6ea800452613656375a002ae6955ceaab9e5573eae815d0aba201",
      hash: "464b45f4a6b3b34e2583796622c329a7f084eb47a6b0c1fc2bd08ad8"
    },
    {
      title: "marketplace.marketplace.else",
      parameters: [
        {
          title: "owner",
          schema: {
            $ref: "#/definitions/cardano~1address~1Address"
          }
        },
        {
          title: "fee_percentage_basis_point",
          schema: {
            $ref: "#/definitions/Int"
          }
        }
      ],
      compiledCode: "5906f401010032323232323232223225333005323232323253323300b3001300c37540042646464646464a66602260060022a66602860266ea8024540085854ccc044c01c00454ccc050c04cdd50048a8010b0b18089baa0081533300f30013010375400426464a64666024600860266ea80284c94ccc04cc014c050dd50008991919191919191919299980e1929998100008a5015333020302300114a22940cc88c8cc00400400c894ccc08c00452f5c026464a66604466ebcc048c090dd5180718121baa002005133026002330040040011330040040013027002302500137586018603c6ea8058c030c078dd51804180f1baa0091533301c001100214a02940cc00ccc008dd61802180e9baa01501a30063370666e08dd69803980e9baa00c018482827004cc008cc004dd61801980e1baa014300a301c3754016600a66e00dd69803180e1baa00b3330043756600c60386ea8c018c070dd5003a450048810022323300100100322533302000114bd6f7b63009991299980f99baf300f3021375400400a2646660020020046eacc030c088dd50019112999812801080089919980200218148019991191980080080291299981500089981599bb037520086e9800d2f5bded8c0264646464a66605666e400200084cc0bccdd81ba9008374c00e00a2a66605666e3c0200084c94ccc0b0c078c0b4dd500089981819bb037520126062605c6ea80040104010c94ccc0b14ccc0bc0045288a5014c0103d87a80001301b33030374c00297ae03233300100100800222253330310021001132333004004303500333223233001001005225333036001133037337606ea4010dd4001a5eb7bdb1804c8c8c8c94ccc0dccdc800400109981d99bb037520106ea001c01454ccc0dccdc7804001099299981c1815181c9baa00113303c337606ea4024c0f4c0e8dd5000802080219299981c18150008a60103d87a8000130273303c375000297ae03370000e00226607666ec0dd48011ba800133006006003375a60700066eb8c0d8008c0e8008c0e0004dd718180009bad3031001303300213302f337606ea4008dd3000998030030019bab302c003375c6054004605c00460580026eb8c090004dd5981280098138010800981100099801001181180091191980080099198008008019129998100008a5eb804c8ccc888c8cc00400400c894ccc098004400c4c8cc0a0dd3998141ba90063302830250013302830260014bd7019801801981500118140009bae301f00137566040002660060066048004604400244a66603e00229444c94ccc074c8cdc49bad3007001333008006375c601c0026eb8c028004dd618110010998018018008a5030220012301d301e301e00122232533301a3010301b37540022900009bad301f301c375400264a666034602060366ea8004530103d87a80001323300100137566040603a6ea8008894ccc07c004530103d87a80001323232325333020337220100042a66604066e3c0200084c03ccc090dd4000a5eb80530103d87a8000133006006003375a60420066eb8c07c008c08c008c084004c8cc004004010894ccc0780045300103d87a8000132323232533301f337220100042a66603e66e3c0200084c038cc08cdd3000a5eb80530103d87a8000133006006003375660400066eb8c078008c088008c08000494ccc058c02000452f5bded8c0264646600200297adef6c6022533301c00113301d337609801014000374c00697adef6c60132323232533301d33720910100002133021337609801014000374c00e00a2a66603a66e3d22100002133021337609801014000374c00e00626604266ec0dd48011ba6001330060060033756603c0066eb8c070008c080008c078004c8cc0040052f5bded8c044a66603600226603866ec13001014000375000697adef6c60132323232533301c33720910100002133020337609801014000375000e00a2a66603866e3d22100002133020337609801014000375000e00626604066ec0dd48011ba800133006006003375a603a0066eb8c06c008c07c008c0740048c068c06c004c060c054dd50008b19198008009bac30033015375401a44a66602e002298103d87a80001323253330163375e600c60306ea80080284c014cc0680092f5c026600800800260360046032002264a666026600a60286ea80044cc88c8cc00400400c894ccc068004528099299980c19b8f375c603a00400829444cc00c00c004c074004dd6180c180c980c980c980c980c980c980c980c980a9baa00d375c6030602a6ea800458c94ccc04cc014c050dd5000898011980b980c180a9baa0014bd700a60103d87a8000300230143754600460286ea800cdd2a40004602c002602860226ea800858dc3a4000602460260046022002601a6ea8008dc3a40042c601c601e004601a002601a0046016002600e6ea800452613656375a002ae6955ceaab9e5573eae815d0aba201",
      hash: "464b45f4a6b3b34e2583796622c329a7f084eb47a6b0c1fc2bd08ad8"
    }
  ],
  definitions: {
    ByteArray: {
      dataType: "bytes"
    },
    Int: {
      dataType: "integer"
    },
    Option$StakeCredential: {
      title: "Option",
      anyOf: [
        {
          title: "Some",
          description: "An optional value.",
          dataType: "constructor",
          index: 0,
          fields: [
            {
              $ref: "#/definitions/StakeCredential"
            }
          ]
        },
        {
          title: "None",
          description: "Nothing.",
          dataType: "constructor",
          index: 1,
          fields: []
        }
      ]
    },
    PaymentCredential: {
      title: "PaymentCredential",
      description: "A general structure for representing an on-chain `Credential`.\n\n Credentials are always one of two kinds: a direct public/private key\n pair, or a script (native or Plutus).",
      anyOf: [
        {
          title: "VerificationKey",
          dataType: "constructor",
          index: 0,
          fields: [
            {
              $ref: "#/definitions/VerificationKeyHash"
            }
          ]
        },
        {
          title: "Script",
          dataType: "constructor",
          index: 1,
          fields: [
            {
              $ref: "#/definitions/ScriptHash"
            }
          ]
        }
      ]
    },
    ScriptHash: {
      title: "ScriptHash",
      dataType: "bytes"
    },
    StakeCredential: {
      title: "StakeCredential",
      description: "Represent a type of object that can be represented either inline (by hash)\n or via a reference (i.e. a pointer to an on-chain location).\n\n This is mainly use for capturing pointers to a stake credential\n registration certificate in the case of so-called pointer addresses.",
      anyOf: [
        {
          title: "Inline",
          dataType: "constructor",
          index: 0,
          fields: [
            {
              $ref: "#/definitions/cardano~1address~1Credential"
            }
          ]
        },
        {
          title: "Pointer",
          dataType: "constructor",
          index: 1,
          fields: [
            {
              title: "slot_number",
              $ref: "#/definitions/Int"
            },
            {
              title: "transaction_index",
              $ref: "#/definitions/Int"
            },
            {
              title: "certificate_index",
              $ref: "#/definitions/Int"
            }
          ]
        }
      ]
    },
    VerificationKeyHash: {
      title: "VerificationKeyHash",
      dataType: "bytes"
    },
    "cardano/address/Address": {
      title: "Address",
      description: "A Cardano `Address` typically holding one or two credential references.\n\n Note that legacy bootstrap addresses (a.k.a. 'Byron addresses') are\n completely excluded from Plutus contexts. Thus, from an on-chain\n perspective only exists addresses of type 00, 01, ..., 07 as detailed\n in [CIP-0019 :: Shelley Addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019/#shelley-addresses).",
      anyOf: [
        {
          title: "Address",
          dataType: "constructor",
          index: 0,
          fields: [
            {
              title: "payment_credential",
              $ref: "#/definitions/PaymentCredential"
            },
            {
              title: "stake_credential",
              $ref: "#/definitions/Option$StakeCredential"
            }
          ]
        }
      ]
    },
    "cardano/address/Credential": {
      title: "Credential",
      description: "A general structure for representing an on-chain `Credential`.\n\n Credentials are always one of two kinds: a direct public/private key\n pair, or a script (native or Plutus).",
      anyOf: [
        {
          title: "VerificationKey",
          dataType: "constructor",
          index: 0,
          fields: [
            {
              $ref: "#/definitions/VerificationKeyHash"
            }
          ]
        },
        {
          title: "Script",
          dataType: "constructor",
          index: 1,
          fields: [
            {
              $ref: "#/definitions/ScriptHash"
            }
          ]
        }
      ]
    },
    "marketplace/MarketplaceDatum": {
      title: "MarketplaceDatum",
      anyOf: [
        {
          title: "MarketplaceDatum",
          dataType: "constructor",
          index: 0,
          fields: [
            {
              title: "seller",
              $ref: "#/definitions/cardano~1address~1Address"
            },
            {
              title: "price",
              $ref: "#/definitions/Int"
            },
            {
              title: "policy",
              $ref: "#/definitions/ByteArray"
            },
            {
              title: "tokenName",
              $ref: "#/definitions/ByteArray"
            }
          ]
        }
      ]
    },
    "marketplace/MarketplaceRedeemer": {
      title: "MarketplaceRedeemer",
      anyOf: [
        {
          title: "Buy",
          dataType: "constructor",
          index: 0,
          fields: []
        },
        {
          title: "Close",
          dataType: "constructor",
          index: 1,
          fields: []
        }
      ]
    }
  }
};

// src/marketplace/offchain.ts
var marketplaceDatum = (sellerAddress, lovelaceFee, assetHex) => {
  const { pubKeyHash, stakeCredentialHash } = deserializeAddress4(sellerAddress);
  const { policyId, assetName } = parseAssetUnit(assetHex);
  return conStr02([
    pubKeyAddress2(pubKeyHash, stakeCredentialHash),
    integer(lovelaceFee),
    currencySymbol(policyId),
    tokenName(assetName)
  ]);
};
var MeshMarketplaceContract = class extends MeshTxInitiator {
  ownerAddress;
  feePercentageBasisPoint;
  scriptCbor;
  scriptAddress;
  constructor(inputs, ownerAddress, feePercentageBasisPoint) {
    super(inputs);
    this.ownerAddress = ownerAddress;
    this.feePercentageBasisPoint = feePercentageBasisPoint;
    const { pubKeyHash, stakeCredentialHash } = deserializeAddress4(ownerAddress);
    this.scriptCbor = this.getScriptCbor(
      pubKeyHash,
      stakeCredentialHash,
      feePercentageBasisPoint
    );
    this.scriptAddress = this.getScriptAddress(this.scriptCbor);
  }
  getScriptCbor = (pubKeyHash, stakeCredentialHash, feePercentageBasisPoint) => {
    switch (this.version) {
      case 2:
        return applyParamsToScript6(
          plutus_default9.validators[0].compiledCode,
          [
            pubKeyAddress2(pubKeyHash, stakeCredentialHash),
            integer(feePercentageBasisPoint)
          ],
          "JSON"
        );
      default:
        return applyParamsToScript6(
          plutus_default8.validators[0].compiledCode,
          [
            pubKeyAddress2(pubKeyHash, stakeCredentialHash),
            integer(feePercentageBasisPoint)
          ],
          "JSON"
        );
    }
  };
  listAsset = async (asset, price) => {
    const { utxos, walletAddress } = await this.getWalletInfoForTx();
    const assetMap = /* @__PURE__ */ new Map();
    assetMap.set(asset, "1");
    const tokenForSale = [{ unit: asset, quantity: "1" }];
    const outputDatum = marketplaceDatum(walletAddress, price, asset);
    await this.mesh.txOut(this.scriptAddress, tokenForSale).txOutInlineDatumValue(outputDatum, "JSON").changeAddress(walletAddress).selectUtxosFrom(utxos).complete();
    return this.mesh.txHex;
  };
  delistAsset = async (marketplaceUtxo) => {
    const { utxos, walletAddress, collateral } = await this.getWalletInfoForTx();
    await this.mesh.spendingPlutusScript(this.languageVersion).txIn(
      marketplaceUtxo.input.txHash,
      marketplaceUtxo.input.outputIndex,
      marketplaceUtxo.output.amount,
      marketplaceUtxo.output.address
    ).spendingReferenceTxInInlineDatumPresent().spendingReferenceTxInRedeemerValue(mConStr14([])).txInScript(this.scriptCbor).changeAddress(walletAddress).requiredSignerHash(deserializeAddress4(walletAddress).pubKeyHash).txInCollateral(
      collateral.input.txHash,
      collateral.input.outputIndex,
      collateral.output.amount,
      collateral.output.address
    ).selectUtxosFrom(utxos).complete();
    return this.mesh.txHex;
  };
  purchaseAsset = async (marketplaceUtxo) => {
    const { utxos, walletAddress, collateral } = await this.getWalletInfoForTx();
    const inputDatum = deserializeDatum3(
      marketplaceUtxo.output.plutusData
    );
    const inputLovelace = marketplaceUtxo.output.amount.find(
      (a) => a.unit === "lovelace"
    ).quantity;
    const tx = this.mesh.spendingPlutusScript(this.languageVersion).txIn(
      marketplaceUtxo.input.txHash,
      marketplaceUtxo.input.outputIndex,
      marketplaceUtxo.output.amount,
      marketplaceUtxo.output.address
    ).spendingReferenceTxInInlineDatumPresent().spendingReferenceTxInRedeemerValue(mConStr04([])).txInScript(this.scriptCbor).changeAddress(walletAddress).txInCollateral(
      collateral.input.txHash,
      collateral.input.outputIndex,
      collateral.output.amount,
      collateral.output.address
    ).selectUtxosFrom(utxos);
    let ownerToReceiveLovelace = inputDatum.fields[1].int * this.feePercentageBasisPoint / 1e4;
    if (this.feePercentageBasisPoint > 0 && ownerToReceiveLovelace < 1e6) {
      ownerToReceiveLovelace = 1e6;
    }
    if (ownerToReceiveLovelace > 0) {
      const ownerToReceive = [
        {
          unit: "lovelace",
          quantity: Math.ceil(ownerToReceiveLovelace).toString()
        }
      ];
      tx.txOut(this.ownerAddress, ownerToReceive);
    }
    const sellerToReceiveLovelace = inputDatum.fields[1].int + Number(inputLovelace);
    if (sellerToReceiveLovelace > 0) {
      const sellerAddress = serializeAddressObj2(
        inputDatum.fields[0],
        this.networkId
      );
      const sellerToReceive = [
        {
          unit: "lovelace",
          quantity: sellerToReceiveLovelace.toString()
        }
      ];
      tx.txOut(sellerAddress, sellerToReceive);
    }
    await tx.complete();
    return this.mesh.txHex;
  };
  relistAsset = async (marketplaceUtxo, newPrice) => {
    const { utxos, walletAddress, collateral } = await this.getWalletInfoForTx();
    const inputAsset = marketplaceUtxo.output.amount.find(
      (a) => a.unit !== "lovelace"
    ).unit;
    const tokenForSale = [{ unit: inputAsset, quantity: "1" }];
    const outputDatum = marketplaceDatum(walletAddress, newPrice, inputAsset);
    await this.mesh.spendingPlutusScript(this.languageVersion).txIn(
      marketplaceUtxo.input.txHash,
      marketplaceUtxo.input.outputIndex,
      marketplaceUtxo.output.amount,
      marketplaceUtxo.output.address
    ).spendingReferenceTxInInlineDatumPresent().spendingReferenceTxInRedeemerValue(mConStr14([])).txInScript(this.scriptCbor).txOut(this.scriptAddress, tokenForSale).txOutInlineDatumValue(outputDatum, "JSON").changeAddress(walletAddress).requiredSignerHash(deserializeAddress4(walletAddress).pubKeyHash).txInCollateral(
      collateral.input.txHash,
      collateral.input.outputIndex,
      collateral.output.amount,
      collateral.output.address
    ).selectUtxosFrom(utxos).complete();
    return this.mesh.txHex;
  };
  getUtxoByTxHash = async (txHash) => {
    return await this._getUtxoByTxHash(txHash, this.scriptCbor);
  };
  static getCompiledCode = (version = 2) => {
    switch (version) {
      case 2:
        return plutus_default9.validators[0].compiledCode;
      default:
        return plutus_default8.validators[0].compiledCode;
    }
  };
};

// src/payment-splitter/offchain.ts
import { builtinByteString as builtinByteString3, list } from "@meshsdk/common";
import {
  deserializeAddress as deserializeAddress5,
  Transaction
} from "@meshsdk/core";
import { applyParamsToScript as applyParamsToScript7 } from "@meshsdk/core-csl";

// src/payment-splitter/aiken-workspace-v1/plutus.json
var plutus_default10 = {
  preamble: {
    title: "fabianbormann/payment-splitter",
    description: "Aiken contracts for project 'fabianbormann/payment-splitter'",
    version: "0.1.0",
    plutusVersion: "v2",
    compiler: {
      name: "Aiken",
      version: "v1.0.29-alpha+unknown"
    },
    license: "Apache-2.0"
  },
  validators: [
    {
      title: "payment_splitter.payout",
      datum: {
        title: "_datum",
        schema: {
          $ref: "#/definitions/payment_splitter~1Datum"
        }
      },
      redeemer: {
        title: "_redeemer",
        schema: {
          $ref: "#/definitions/payment_splitter~1Redeemer"
        }
      },
      parameters: [
        {
          title: "scriptHashes",
          schema: {
            $ref: "#/definitions/List$ByteArray"
          }
        }
      ],
      compiledCode: "5903a5010000323232323232322322322322533300832323232323232323232323253330143375e6e9cccc8c0040048894ccc06800440084ccc00c00cc8c8cc004004010894ccc07400452f5c026464a66603866ebc00801440044cc080008cc010010004c084008c07c004c070004c074004cc8c004004894ccc06400452f5c026466036002660060066600e603a004466603066ebc00400928251301b001323300100100722533301900114bd7009980d1806180c1baa300c3018375460360026600400460380020169801018000100114a0646600200200444a66603000229444c94ccc058cdc39bad301b00233005533301900414c0103d87a80001300e3301a301b0044bd70240002660060060022940c06c004c8cc004004028894ccc05c00452f5c02660306ea0c8c8c8c8c8c94ccc068cdc424000002266e04008cdc08009802005880119980119804806919baf3010301c3754602060386ea8c014c070dd5000803240004466e00004c014dd59803180e9baa3006301d375400466600266010014466ebcc03cc06cdd51807980d9baa0010054800088cdc000098021bab3005301c3754004444646600200200844a66603e0022008266006604200266004004604400246600c64a66603066e1d200230193754002298103d87a8000132330010013756603c60366ea8008894ccc074004530103d87a8000132323232533301e33722911000021533301e3371e9101000021301633022375000297ae014c0103d87a8000133006006003375a603e0066eb8c074008c084008c07c004c8cc004004008894ccc0700045300103d87a8000132323232533301d33722911000021533301d3371e9101000021301533021374c00297ae014c0103d87a80001330060060033756603c0066eb8c070008c080008c07800520002301b301c001301900133002002301a0012253330133370e9001180a1baa00210011375a6030602a6ea800888c8cc00400400c894ccc05c00452f5c026464a66602c600a00426603400466008008002266008008002603600460320026eacc050c054008dd61809800980998098011bac3011001300d37546002601a6ea80108c040004c8cc004004020894ccc03800452f5c026601e60066601e602000297ae0330020023011001374a90000a4c26caca66600c66e1d20003007375400226464a666016601c0042930b1bae300c001300837540022ca66600866e1d20003005375400226464a66601260180042930b1bae300a001300637540022c6eb00055cd2ab9d5573caae7d5d02ba157441",
      hash: "0776032753d2900f7c1e933af4108c53851e10ca95fa10e34af90277"
    }
  ],
  definitions: {
    ByteArray: {
      dataType: "bytes"
    },
    List$ByteArray: {
      dataType: "list",
      items: {
        $ref: "#/definitions/ByteArray"
      }
    },
    "payment_splitter/Datum": {
      title: "Datum",
      anyOf: [
        {
          title: "Datum",
          dataType: "constructor",
          index: 0,
          fields: [
            {
              title: "owner",
              $ref: "#/definitions/ByteArray"
            }
          ]
        }
      ]
    },
    "payment_splitter/Redeemer": {
      title: "Redeemer",
      anyOf: [
        {
          title: "Redeemer",
          dataType: "constructor",
          index: 0,
          fields: [
            {
              title: "message",
              $ref: "#/definitions/ByteArray"
            }
          ]
        }
      ]
    }
  }
};

// src/payment-splitter/aiken-workspace-v2/plutus.json
var plutus_default11 = {
  preamble: {
    title: "fabianbormann/payment-splitter",
    description: "Aiken contracts for project 'fabianbormann/payment-splitter'",
    version: "0.1.0",
    plutusVersion: "v3",
    compiler: {
      name: "Aiken",
      version: "v1.1.0+unknown"
    },
    license: "Apache-2.0"
  },
  validators: [
    {
      title: "payment_splitter.payout.spend",
      datum: {
        title: "_datum",
        schema: {
          $ref: "#/definitions/payment_splitter~1Datum"
        }
      },
      redeemer: {
        title: "_redeemer",
        schema: {
          $ref: "#/definitions/payment_splitter~1Redeemer"
        }
      },
      parameters: [
        {
          title: "scriptHashes",
          schema: {
            $ref: "#/definitions/List$ByteArray"
          }
        }
      ],
      compiledCode: "5903ac0101003232323232323223225333004323232323253323300a3001300b37540042646464a66601a66e1d2000300e375400c26464a666024602a0042646464646464646464646464a66603666ebcdd3999918008009112999810800880109998018019919198008008021129998120008a5eb804c8c94ccc08ccdd7801002880089981380119802002000981400118130009811800981200099918008009129998100008a5eb804c8cc088004cc00c00ccc01cc0900088ccc07ccdd78008012504a26044002646600200201044a666040002297ae01330213007301f3754600e603e6ea8c088004cc008008c08c00402d3001018000100114a0646600200200444a66603e00229444c94ccc074cdc39bad302200233005533302000414c0103d87a80001300e3302130220044bd70240002660060060022940c088004c8cc004004028894ccc07800452f5c026603e6ea0c8c8c8c8c8c94ccc084cdc424000002266e04008cdc0800806080119980119804807119baf300b30233754601660466ea8c014c08cdd5000803240004466e00004c014dd5980318121baa30063024375400466600266010016466ebcc028c088dd5180518111baa0010054800088cdc000098021bab300530233754004444646600200200844a66604c0022008266006605000266004004605200246600c64a66603e602c60406ea80045300103d87a8000132330010013756604a60446ea8008894ccc090004530103d87a800013232323253330253372291100002153330253371e9101000021301633029375000297ae014c0103d87a8000133006006003375a604c0066eb8c090008c0a0008c098004c8cc004004008894ccc08c0045300103d87a800013232323253330243372291100002153330243371e9101000021301533028374c00297ae014c0103d87a80001330060060033756604a0066eb8c08c008c09c008c0940052000230223023001302000133002002302100122533301a3011301b3754004200226eb4c07cc070dd500111191980080080191299980f0008a5eb804c8c94ccc074c0140084cc084008cc0100100044cc010010004c088008c0800048c070004dd6980d180d8011bac3019001301930190023758602e00260266ea8030c8cc00400403c894ccc05400452f5c026602c60066602c602e00297ae0330020023018001374a90000b1bae3013001300f375400c2c60226024004602000260186ea8008dc3a40042c601a601c004601800260180046014002600c6ea8004526136563758002ae6955ceaab9e5573eae815d0aba21",
      hash: "18dd08b9d716f70842061bc6967787def27aee863ac223e048f68317"
    },
    {
      title: "payment_splitter.payout.else",
      parameters: [
        {
          title: "scriptHashes",
          schema: {
            $ref: "#/definitions/List$ByteArray"
          }
        }
      ],
      compiledCode: "5903ac0101003232323232323223225333004323232323253323300a3001300b37540042646464a66601a66e1d2000300e375400c26464a666024602a0042646464646464646464646464a66603666ebcdd3999918008009112999810800880109998018019919198008008021129998120008a5eb804c8c94ccc08ccdd7801002880089981380119802002000981400118130009811800981200099918008009129998100008a5eb804c8cc088004cc00c00ccc01cc0900088ccc07ccdd78008012504a26044002646600200201044a666040002297ae01330213007301f3754600e603e6ea8c088004cc008008c08c00402d3001018000100114a0646600200200444a66603e00229444c94ccc074cdc39bad302200233005533302000414c0103d87a80001300e3302130220044bd70240002660060060022940c088004c8cc004004028894ccc07800452f5c026603e6ea0c8c8c8c8c8c94ccc084cdc424000002266e04008cdc0800806080119980119804807119baf300b30233754601660466ea8c014c08cdd5000803240004466e00004c014dd5980318121baa30063024375400466600266010016466ebcc028c088dd5180518111baa0010054800088cdc000098021bab300530233754004444646600200200844a66604c0022008266006605000266004004605200246600c64a66603e602c60406ea80045300103d87a8000132330010013756604a60446ea8008894ccc090004530103d87a800013232323253330253372291100002153330253371e9101000021301633029375000297ae014c0103d87a8000133006006003375a604c0066eb8c090008c0a0008c098004c8cc004004008894ccc08c0045300103d87a800013232323253330243372291100002153330243371e9101000021301533028374c00297ae014c0103d87a80001330060060033756604a0066eb8c08c008c09c008c0940052000230223023001302000133002002302100122533301a3011301b3754004200226eb4c07cc070dd500111191980080080191299980f0008a5eb804c8c94ccc074c0140084cc084008cc0100100044cc010010004c088008c0800048c070004dd6980d180d8011bac3019001301930190023758602e00260266ea8030c8cc00400403c894ccc05400452f5c026602c60066602c602e00297ae0330020023018001374a90000b1bae3013001300f375400c2c60226024004602000260186ea8008dc3a40042c601a601c004601800260180046014002600c6ea8004526136563758002ae6955ceaab9e5573eae815d0aba21",
      hash: "18dd08b9d716f70842061bc6967787def27aee863ac223e048f68317"
    }
  ],
  definitions: {
    ByteArray: {
      dataType: "bytes"
    },
    List$ByteArray: {
      dataType: "list",
      items: {
        $ref: "#/definitions/ByteArray"
      }
    },
    VerificationKeyHash: {
      title: "VerificationKeyHash",
      dataType: "bytes"
    },
    "payment_splitter/Datum": {
      title: "Datum",
      anyOf: [
        {
          title: "Datum",
          dataType: "constructor",
          index: 0,
          fields: [
            {
              title: "owner",
              $ref: "#/definitions/VerificationKeyHash"
            }
          ]
        }
      ]
    },
    "payment_splitter/Redeemer": {
      title: "Redeemer",
      anyOf: [
        {
          title: "Redeemer",
          dataType: "constructor",
          index: 0,
          fields: [
            {
              title: "message",
              $ref: "#/definitions/ByteArray"
            }
          ]
        }
      ]
    }
  }
};

// src/payment-splitter/offchain.ts
var MeshPaymentSplitterContract = class extends MeshTxInitiator {
  scriptCbor;
  scriptAddress;
  payees = [];
  wrapPayees = (payees) => list(
    payees.map(
      (payee) => builtinByteString3(deserializeAddress5(payee).pubKeyHash)
    )
  );
  constructor(inputs, payees) {
    super(inputs);
    if (inputs.wallet) {
      inputs.wallet.getUsedAddresses().then((addresses) => {
        this.payees = [addresses[0], ...payees];
      });
    } else {
      this.payees = payees;
      console.warn(
        "Wallet not provided. Therefore the payment address will not be added to the payees list which makes it impossible to trigger the payout."
      );
    }
    this.scriptCbor = this.getScriptCbor();
    this.scriptAddress = this.getScriptAddress(this.scriptCbor);
  }
  getScriptCbor = () => {
    switch (this.version) {
      case 2:
        return applyParamsToScript7(
          plutus_default11.validators[0].compiledCode,
          [this.wrapPayees(this.payees)],
          "JSON"
        );
      default:
        return applyParamsToScript7(
          plutus_default10.validators[0].compiledCode,
          [this.wrapPayees(this.payees)],
          "JSON"
        );
    }
  };
  sendLovelaceToSplitter = async (lovelaceAmount) => {
    if (this.wallet === null || this.wallet === void 0) {
      throw new Error("Wallet not provided");
    }
    const { walletAddress } = await this.getWalletInfoForTx();
    const { pubKeyHash } = deserializeAddress5(walletAddress);
    const datum = {
      alternative: 0,
      fields: [pubKeyHash]
    };
    const tx = new Transaction({ initiator: this.wallet }).sendLovelace(
      {
        address: this.scriptAddress,
        datum: { value: datum }
      },
      lovelaceAmount.toString()
    );
    const unsignedTx = await tx.build();
    return unsignedTx;
  };
  triggerPayout = async () => {
    if (this.wallet === null || this.wallet === void 0) {
      throw new Error("Wallet not provided");
    }
    const { walletAddress, collateral } = await this.getWalletInfoForTx();
    const script = {
      code: this.scriptCbor,
      version: this.languageVersion
    };
    const utxos = await this.fetcher?.fetchAddressUTxOs(this.scriptAddress) || [];
    const { pubKeyHash } = deserializeAddress5(walletAddress);
    const datum = {
      alternative: 0,
      fields: [pubKeyHash]
    };
    const redeemerData = "Hello, World!";
    const redeemer = { data: { alternative: 0, fields: [redeemerData] } };
    let tx = new Transaction({ initiator: this.wallet });
    let split = 0;
    for (const utxo of utxos) {
      const amount = utxo.output?.amount;
      if (amount) {
        let lovelace = amount.find((asset) => asset.unit === "lovelace");
        if (lovelace) {
          split += Math.floor(Number(lovelace.quantity) / this.payees.length);
        }
        tx = tx.redeemValue({
          value: utxo,
          script,
          datum,
          redeemer
        });
      }
    }
    tx = tx.setCollateral([collateral]);
    for (const payee of this.payees) {
      tx = tx.sendLovelace(payee, split.toString());
    }
    tx = tx.setRequiredSigners([walletAddress]);
    const unsignedTx = await tx.build();
    return unsignedTx;
  };
};

// src/plutus-nft/offchain.ts
import {
  conStr0 as conStr03,
  integer as integer2,
  mConStr0 as mConStr05,
  mOutputReference as mOutputReference2,
  mPubKeyAddress,
  stringToHex as stringToHex4
} from "@meshsdk/common";
import {
  deserializeAddress as deserializeAddress6,
  resolveScriptHash as resolveScriptHash4,
  serializeAddressObj as serializeAddressObj3,
  serializePlutusScript as serializePlutusScript3
} from "@meshsdk/core";
import {
  applyCborEncoding,
  applyParamsToScript as applyParamsToScript8,
  parseDatumCbor as parseDatumCbor2
} from "@meshsdk/core-csl";

// src/plutus-nft/aiken-workspace/plutus.json
var plutus_default12 = {
  preamble: {
    title: "meshjs/plutus-nft",
    description: "Aiken contracts for project 'meshjs/plutus-nft'",
    version: "0.0.0",
    plutusVersion: "v3",
    compiler: {
      name: "Aiken",
      version: "v1.1.4+79d0e45"
    },
    license: "Apache-2.0"
  },
  validators: [
    {
      title: "oracle.oracle.spend",
      datum: {
        title: "datum_opt",
        schema: {
          $ref: "#/definitions/oracle~1OracleDatum"
        }
      },
      redeemer: {
        title: "redeemer",
        schema: {
          $ref: "#/definitions/oracle~1OracleRedeemer"
        }
      },
      compiledCode: "590879010100323232323232322533300232323232325332330083001300937540042646464646464a66601c60060022a66602260206ea8024540085854ccc038c01c00454ccc044c040dd50048a8010b0b18071baa008132323232323232533301330083014375401226464646464646464a666036602060386ea80044c8c8c8c8c8c94ccc090c09c0084c8c8c8c8c8c8c94ccc0a0c074c0a4dd50010a9998158018008a99981598170018a9998158020008a9998159817002099191919299981619b8733230010012253330310011480004cdc024004660040046068002601e6eacc040c0b8dd5002240082a6660580042002294052819191980080098082999816981100b8a5eb7bdb1804c8c8cc0040052f5bded8c044a66606600226606866ec13001014000374c00697adef6c60132323232533303433720910100002133038337609801014000374c00e00a2a666068602c00426607066ec13001014000374c00e00626607066ec0dd48011ba6001330060060033756606a0066eb8c0cc008c0dc008c0d4004c8cc0040052f5bded8c044a66606400226606666ec13001014000375003297adef6c60132323232533303333720910100002133037337609801014000375003a00a2a666066602a00426606e66ec13001014000375003a00626606e66ec0dd48011ba800133006006003375a60680066eb8c0c8008c0d8008c0d0004894ccc0c400452889929998179919b89375a600e002664464a666066605860686ea8004520001375a6070606a6ea8004c94ccc0ccc0b0c0d0dd50008a6103d87a80001323300100137566072606c6ea8008894ccc0e0004530103d87a80001323232325333039337220100042a66607266e3c0200084c080cc0f4dd4000a5eb80530103d87a8000133006006003375a60740066eb8c0e0008c0f0008c0e8004c8cc004004020894ccc0dc0045300103d87a80001323232325333038337220100042a66607066e3c0200084c07ccc0f0dd3000a5eb80530103d87a8000133006006003375660720066eb8c0dc008c0ec008c0e4004dd7180c0009bae3014001375860680042660060060022940c0d0004c8cc004004074894ccc0c000452f5bded8c026644a66605e66ebcc05cc0c4dd500100c0991998008008011bab301430323754006444a66606a004200226466600800860720066644646600200200a44a66607400226607666ec0dd48021ba60034bd6f7b630099191919299981d99b9000800213303f337606ea4020dd30038028a99981d99b8f008002132533303c3031303d375400226608066ec0dd48049820981f1baa001004100432533303c533303f00114a22940530103d87a80001302333040374c00297ae03233300100100800222253330410021001132333004004304500333223233001001005225333046001133047337606ea4010dd4001a5eb7bdb1804c8c8c8c94ccc11ccdc800400109982599bb037520106ea001c01454ccc11ccdc78040010992999824181e98249baa00113304c337606ea4024c134c128dd50008020802192999824181e8008a60103d87a80001302f3304c375000297ae03370000e00226609666ec0dd48011ba800133006006003375a60900066eb8c118008c128008c120004dd718200009bad3041001304300213303f337606ea4008dd3000998030030019bab303c003375c6074004607c00460780026eb8c0d0004dd5981a800981b8010800981900099801001181980099baf3001302c375400466e9520043302e30113302e375066e0005920023302e37500286605c02697ae04bd70118179818181800098168020008008008992999814181098149baa0021533302b0030011533302b302e003132533302932533302d00114a02a66605a60600022646464a66605a66e3cdd718190018060a9998169807800899b87002480045280a50375c606260640046eb4c0c0c0c4c0c4004dd618178008a50300c018100114a064646600200203044a66605c00229404c94ccc0b0cdc79bae303100200414a2266006006002606200264a666052604460546ea80044dd7181718159baa0011375c605c60566ea8004c040c0a8dd50088008008a50302b0033758605460560046eb0c0a4c0a8c0a8004c8c8cc0a4080cc0a4dd39980100c1299981319baf300e30283754601460506ea80040104cc008c024dd5980518141baa300a30283754002466e3cdd718078008030a5033029374e6600402c4a66604c66ebcc038c0a0dd500080209980118049bab300a30283754002466e3cdd718078008030a504bd701119198008008019129998158008a50132533302930043758605c00429444cc00c00c004c0b800488c8cc00400400c894ccc0a800452f5c026464a666052600a00426605a00466008008002266008008002605c0046058002601460486ea8c018c090dd50039bae3026001163758604a002646600200260066eacc010c088dd5180218111baa00522533302400114bd7009919299981199981198029bae300b0024a09444cc09cdd38011980200200089980200200098140011bac3026001371e911002323300100100222533302300114bd7009919991119198008008019129998148008801899198159ba73302b375200c66056605000266056605200297ae033003003302d002302b001375c60440026eacc08c004cc00c00cc09c008c0940048c088c08c004c080c074dd50008b191980080080711299980f8008a6103d87a800013232533301e3375e600c60406ea80080544c014cc0880092f5c0266008008002604600460420026e9520002301e001301c301d002375a603600260360046eb4c064004c054dd5180c180a9baa009163758602e60306030603060300046eacc058004c058c058008dd6180a000980a180a0011bac3012001300e37540126e1d2000300f3010002300e001300a37540046e1d200216300b300c002300a001300a00230080013004375400229309b2b2b9a5573aaae7955cfaba05742ae881",
      hash: "975ec6fe46e63846aad882fecd8e1c7c4a41d7ed3a8aae463482935e"
    },
    {
      title: "oracle.oracle.else",
      redeemer: {
        schema: {}
      },
      compiledCode: "590879010100323232323232322533300232323232325332330083001300937540042646464646464a66601c60060022a66602260206ea8024540085854ccc038c01c00454ccc044c040dd50048a8010b0b18071baa008132323232323232533301330083014375401226464646464646464a666036602060386ea80044c8c8c8c8c8c94ccc090c09c0084c8c8c8c8c8c8c94ccc0a0c074c0a4dd50010a9998158018008a99981598170018a9998158020008a9998159817002099191919299981619b8733230010012253330310011480004cdc024004660040046068002601e6eacc040c0b8dd5002240082a6660580042002294052819191980080098082999816981100b8a5eb7bdb1804c8c8cc0040052f5bded8c044a66606600226606866ec13001014000374c00697adef6c60132323232533303433720910100002133038337609801014000374c00e00a2a666068602c00426607066ec13001014000374c00e00626607066ec0dd48011ba6001330060060033756606a0066eb8c0cc008c0dc008c0d4004c8cc0040052f5bded8c044a66606400226606666ec13001014000375003297adef6c60132323232533303333720910100002133037337609801014000375003a00a2a666066602a00426606e66ec13001014000375003a00626606e66ec0dd48011ba800133006006003375a60680066eb8c0c8008c0d8008c0d0004894ccc0c400452889929998179919b89375a600e002664464a666066605860686ea8004520001375a6070606a6ea8004c94ccc0ccc0b0c0d0dd50008a6103d87a80001323300100137566072606c6ea8008894ccc0e0004530103d87a80001323232325333039337220100042a66607266e3c0200084c080cc0f4dd4000a5eb80530103d87a8000133006006003375a60740066eb8c0e0008c0f0008c0e8004c8cc004004020894ccc0dc0045300103d87a80001323232325333038337220100042a66607066e3c0200084c07ccc0f0dd3000a5eb80530103d87a8000133006006003375660720066eb8c0dc008c0ec008c0e4004dd7180c0009bae3014001375860680042660060060022940c0d0004c8cc004004074894ccc0c000452f5bded8c026644a66605e66ebcc05cc0c4dd500100c0991998008008011bab301430323754006444a66606a004200226466600800860720066644646600200200a44a66607400226607666ec0dd48021ba60034bd6f7b630099191919299981d99b9000800213303f337606ea4020dd30038028a99981d99b8f008002132533303c3031303d375400226608066ec0dd48049820981f1baa001004100432533303c533303f00114a22940530103d87a80001302333040374c00297ae03233300100100800222253330410021001132333004004304500333223233001001005225333046001133047337606ea4010dd4001a5eb7bdb1804c8c8c8c94ccc11ccdc800400109982599bb037520106ea001c01454ccc11ccdc78040010992999824181e98249baa00113304c337606ea4024c134c128dd50008020802192999824181e8008a60103d87a80001302f3304c375000297ae03370000e00226609666ec0dd48011ba800133006006003375a60900066eb8c118008c128008c120004dd718200009bad3041001304300213303f337606ea4008dd3000998030030019bab303c003375c6074004607c00460780026eb8c0d0004dd5981a800981b8010800981900099801001181980099baf3001302c375400466e9520043302e30113302e375066e0005920023302e37500286605c02697ae04bd70118179818181800098168020008008008992999814181098149baa0021533302b0030011533302b302e003132533302932533302d00114a02a66605a60600022646464a66605a66e3cdd718190018060a9998169807800899b87002480045280a50375c606260640046eb4c0c0c0c4c0c4004dd618178008a50300c018100114a064646600200203044a66605c00229404c94ccc0b0cdc79bae303100200414a2266006006002606200264a666052604460546ea80044dd7181718159baa0011375c605c60566ea8004c040c0a8dd50088008008a50302b0033758605460560046eb0c0a4c0a8c0a8004c8c8cc0a4080cc0a4dd39980100c1299981319baf300e30283754601460506ea80040104cc008c024dd5980518141baa300a30283754002466e3cdd718078008030a5033029374e6600402c4a66604c66ebcc038c0a0dd500080209980118049bab300a30283754002466e3cdd718078008030a504bd701119198008008019129998158008a50132533302930043758605c00429444cc00c00c004c0b800488c8cc00400400c894ccc0a800452f5c026464a666052600a00426605a00466008008002266008008002605c0046058002601460486ea8c018c090dd50039bae3026001163758604a002646600200260066eacc010c088dd5180218111baa00522533302400114bd7009919299981199981198029bae300b0024a09444cc09cdd38011980200200089980200200098140011bac3026001371e911002323300100100222533302300114bd7009919991119198008008019129998148008801899198159ba73302b375200c66056605000266056605200297ae033003003302d002302b001375c60440026eacc08c004cc00c00cc09c008c0940048c088c08c004c080c074dd50008b191980080080711299980f8008a6103d87a800013232533301e3375e600c60406ea80080544c014cc0880092f5c0266008008002604600460420026e9520002301e001301c301d002375a603600260360046eb4c064004c054dd5180c180a9baa009163758602e60306030603060300046eacc058004c058c058008dd6180a000980a180a0011bac3012001300e37540126e1d2000300f3010002300e001300a37540046e1d200216300b300c002300a001300a00230080013004375400229309b2b2b9a5573aaae7955cfaba05742ae881",
      hash: "975ec6fe46e63846aad882fecd8e1c7c4a41d7ed3a8aae463482935e"
    },
    {
      title: "oracle_nft.oracle_nft.mint",
      redeemer: {
        title: "redeemer",
        schema: {
          $ref: "#/definitions/oracle_nft~1MintPolarity"
        }
      },
      parameters: [
        {
          title: "utxo_ref",
          schema: {
            $ref: "#/definitions/cardano~1transaction~1OutputReference"
          }
        }
      ],
      compiledCode: "59019e0101003232323232323222533300332323232325332330093001300a37540042646464a66601860080022a66601e601c6ea8018540085854ccc030cdc3a40040022a66601e601c6ea8018540085858c030dd50028992999805980198061baa0051533300b3003300c375464660020026eb0c044c038dd50041129998080008a60103d87a800013232533300f3375e01c600a60226ea80084cdd2a40006602600497ae01330040040013014002301200114a229404c8cc004004c8cc004004dd59809180998099809980998079baa00922533301100114bd70099199911191980080080191299980b80088018991980c9ba733019375200c66032602c00266032602e00297ae033003003301b0023019001375c60200026eacc044004cc00c00cc054008c04c004894ccc040004528899299980719299980799b8f375c600a00200c266e20dd6980a180a980a800a40002944dd618098010998018018008a50301300123010001375c601c60166ea8008dc3a40002c6018601a004601600260160046012002600a6ea8004526136565734aae7555cf2ab9f5740ae855d101",
      hash: "55ada3bfe32c4ff89d50cfdd86956e013a011fa28279112e424e596a"
    },
    {
      title: "oracle_nft.oracle_nft.else",
      redeemer: {
        schema: {}
      },
      parameters: [
        {
          title: "utxo_ref",
          schema: {
            $ref: "#/definitions/cardano~1transaction~1OutputReference"
          }
        }
      ],
      compiledCode: "59019e0101003232323232323222533300332323232325332330093001300a37540042646464a66601860080022a66601e601c6ea8018540085854ccc030cdc3a40040022a66601e601c6ea8018540085858c030dd50028992999805980198061baa0051533300b3003300c375464660020026eb0c044c038dd50041129998080008a60103d87a800013232533300f3375e01c600a60226ea80084cdd2a40006602600497ae01330040040013014002301200114a229404c8cc004004c8cc004004dd59809180998099809980998079baa00922533301100114bd70099199911191980080080191299980b80088018991980c9ba733019375200c66032602c00266032602e00297ae033003003301b0023019001375c60200026eacc044004cc00c00cc054008c04c004894ccc040004528899299980719299980799b8f375c600a00200c266e20dd6980a180a980a800a40002944dd618098010998018018008a50301300123010001375c601c60166ea8008dc3a40002c6018601a004601600260160046012002600a6ea8004526136565734aae7555cf2ab9f5740ae855d101",
      hash: "55ada3bfe32c4ff89d50cfdd86956e013a011fa28279112e424e596a"
    },
    {
      title: "plutus_nft.plutus_nft.mint",
      redeemer: {
        title: "redeemer",
        schema: {
          $ref: "#/definitions/plutus_nft~1MintPolarity"
        }
      },
      parameters: [
        {
          title: "collection_name",
          schema: {
            $ref: "#/definitions/ByteArray"
          }
        },
        {
          title: "oracle_nft",
          schema: {
            $ref: "#/definitions/PolicyId"
          }
        }
      ],
      compiledCode: "5904250101003232323232323223223225333006323232323253323300c3001300d3754004264646464a666020600a0022a66602660246ea801c540085854ccc040c00c00454ccc04cc048dd50038a8010b0b18081baa0061323232533301130063012375401026464646464a6660326038004264a66602e66e1d200430183754002264a666030601a60326ea80044c8c8c8c8c8c94ccc084c0900084c94ccc07cc050c080dd500109919191929998131814801099802801899192999812980d0008991929998151816801099192999814980f00089919299981718188010998068008a8020b181780098159baa00315333029301c0011323232323232533303230350021500816375a606600260660046eb4c0c4004c0c4008dd6981780098159baa00316302937540042a0082c6056002604e6ea800c54ccc094c06000454ccc0a0c09cdd50018a8010b0b18129baa00213232533302800114a02a66605060560022646464a66605066e3cdd7181680180e0a99981419b8f0010051301b00214a02940dd7181618168011bad302b302c302c001375860540022940c054048c8c8cdc5000a44101290033714002646466600200201a66600400401a90011112999814180d800899b8b3370000490302450013371666e00cdc1801000a40c066600600666e18008004cdc1800a4028444a66604e66e2000920141001133300300333706004900a19b8200148050cdc5010a4410220280016302700130270023025001302137540042c4464a666042602c00226464a66604c60520042a0082c6eb8c09c004c08cdd50018a999810980a00089919299981318148010a8020b1bae3027001302337540062c60426ea800858c088004c088008dd6981000098100011bad301e001301a37540022c603860326ea800458c020c060dd51801980c1baa00116301a00132330010013758603400844a666032002297ae01323253330183233001001300a3756600c60366ea8c018c06cdd500191299980e8008a50132533301b3371e6eb8c02cdd6181000100b8a51133003003001302000113301c00233004004001133004004001301d002301b00123019301a0013756602e603060306030603000260266ea80284c8cc004004c00cdd5980b980c180c180c180c180a1baa00b22533301600114a2264a66602864a66602a66e3cdd71802800804899b88375a600e00290000a51375860320042660060060022940c0640048c0580048c8cc004004008894ccc05400452f5c0264666444646600200200644a66603600220062646603a6e9ccc074dd48031980e980d0009980e980d800a5eb80cc00c00cc07c008c074004dd7180a0009bab301500133003003301900230170012301430153015001370e90011bae3011300e37540046e1d200016300f3010002300e001300e002300c0013008375400229309b2b1bae001375c002ae6955ceaab9e5573eae815d0aba201",
      hash: "227ea4150bb7c090b84178f7ff40bcaad280298db1611b6911252f33"
    },
    {
      title: "plutus_nft.plutus_nft.else",
      redeemer: {
        schema: {}
      },
      parameters: [
        {
          title: "collection_name",
          schema: {
            $ref: "#/definitions/ByteArray"
          }
        },
        {
          title: "oracle_nft",
          schema: {
            $ref: "#/definitions/PolicyId"
          }
        }
      ],
      compiledCode: "5904250101003232323232323223223225333006323232323253323300c3001300d3754004264646464a666020600a0022a66602660246ea801c540085854ccc040c00c00454ccc04cc048dd50038a8010b0b18081baa0061323232533301130063012375401026464646464a6660326038004264a66602e66e1d200430183754002264a666030601a60326ea80044c8c8c8c8c8c94ccc084c0900084c94ccc07cc050c080dd500109919191929998131814801099802801899192999812980d0008991929998151816801099192999814980f00089919299981718188010998068008a8020b181780098159baa00315333029301c0011323232323232533303230350021500816375a606600260660046eb4c0c4004c0c4008dd6981780098159baa00316302937540042a0082c6056002604e6ea800c54ccc094c06000454ccc0a0c09cdd50018a8010b0b18129baa00213232533302800114a02a66605060560022646464a66605066e3cdd7181680180e0a99981419b8f0010051301b00214a02940dd7181618168011bad302b302c302c001375860540022940c054048c8c8cdc5000a44101290033714002646466600200201a66600400401a90011112999814180d800899b8b3370000490302450013371666e00cdc1801000a40c066600600666e18008004cdc1800a4028444a66604e66e2000920141001133300300333706004900a19b8200148050cdc5010a4410220280016302700130270023025001302137540042c4464a666042602c00226464a66604c60520042a0082c6eb8c09c004c08cdd50018a999810980a00089919299981318148010a8020b1bae3027001302337540062c60426ea800858c088004c088008dd6981000098100011bad301e001301a37540022c603860326ea800458c020c060dd51801980c1baa00116301a00132330010013758603400844a666032002297ae01323253330183233001001300a3756600c60366ea8c018c06cdd500191299980e8008a50132533301b3371e6eb8c02cdd6181000100b8a51133003003001302000113301c00233004004001133004004001301d002301b00123019301a0013756602e603060306030603000260266ea80284c8cc004004c00cdd5980b980c180c180c180c180a1baa00b22533301600114a2264a66602864a66602a66e3cdd71802800804899b88375a600e00290000a51375860320042660060060022940c0640048c0580048c8cc004004008894ccc05400452f5c0264666444646600200200644a66603600220062646603a6e9ccc074dd48031980e980d0009980e980d800a5eb80cc00c00cc07c008c074004dd7180a0009bab301500133003003301900230170012301430153015001370e90011bae3011300e37540046e1d200016300f3010002300e001300e002300c0013008375400229309b2b1bae001375c002ae6955ceaab9e5573eae815d0aba201",
      hash: "227ea4150bb7c090b84178f7ff40bcaad280298db1611b6911252f33"
    }
  ],
  definitions: {
    ByteArray: {
      dataType: "bytes"
    },
    Int: {
      dataType: "integer"
    },
    Option$StakeCredential: {
      title: "Option",
      anyOf: [
        {
          title: "Some",
          description: "An optional value.",
          dataType: "constructor",
          index: 0,
          fields: [
            {
              $ref: "#/definitions/StakeCredential"
            }
          ]
        },
        {
          title: "None",
          description: "Nothing.",
          dataType: "constructor",
          index: 1,
          fields: []
        }
      ]
    },
    PaymentCredential: {
      title: "PaymentCredential",
      description: "A general structure for representing an on-chain `Credential`.\n\n Credentials are always one of two kinds: a direct public/private key\n pair, or a script (native or Plutus).",
      anyOf: [
        {
          title: "VerificationKey",
          dataType: "constructor",
          index: 0,
          fields: [
            {
              $ref: "#/definitions/VerificationKeyHash"
            }
          ]
        },
        {
          title: "Script",
          dataType: "constructor",
          index: 1,
          fields: [
            {
              $ref: "#/definitions/ScriptHash"
            }
          ]
        }
      ]
    },
    PolicyId: {
      title: "PolicyId",
      dataType: "bytes"
    },
    ScriptHash: {
      title: "ScriptHash",
      dataType: "bytes"
    },
    StakeCredential: {
      title: "StakeCredential",
      description: "Represent a type of object that can be represented either inline (by hash)\n or via a reference (i.e. a pointer to an on-chain location).\n\n This is mainly use for capturing pointers to a stake credential\n registration certificate in the case of so-called pointer addresses.",
      anyOf: [
        {
          title: "Inline",
          dataType: "constructor",
          index: 0,
          fields: [
            {
              $ref: "#/definitions/cardano~1address~1Credential"
            }
          ]
        },
        {
          title: "Pointer",
          dataType: "constructor",
          index: 1,
          fields: [
            {
              title: "slot_number",
              $ref: "#/definitions/Int"
            },
            {
              title: "transaction_index",
              $ref: "#/definitions/Int"
            },
            {
              title: "certificate_index",
              $ref: "#/definitions/Int"
            }
          ]
        }
      ]
    },
    VerificationKeyHash: {
      title: "VerificationKeyHash",
      dataType: "bytes"
    },
    "cardano/address/Address": {
      title: "Address",
      description: "A Cardano `Address` typically holding one or two credential references.\n\n Note that legacy bootstrap addresses (a.k.a. 'Byron addresses') are\n completely excluded from Plutus contexts. Thus, from an on-chain\n perspective only exists addresses of type 00, 01, ..., 07 as detailed\n in [CIP-0019 :: Shelley Addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019/#shelley-addresses).",
      anyOf: [
        {
          title: "Address",
          dataType: "constructor",
          index: 0,
          fields: [
            {
              title: "payment_credential",
              $ref: "#/definitions/PaymentCredential"
            },
            {
              title: "stake_credential",
              $ref: "#/definitions/Option$StakeCredential"
            }
          ]
        }
      ]
    },
    "cardano/address/Credential": {
      title: "Credential",
      description: "A general structure for representing an on-chain `Credential`.\n\n Credentials are always one of two kinds: a direct public/private key\n pair, or a script (native or Plutus).",
      anyOf: [
        {
          title: "VerificationKey",
          dataType: "constructor",
          index: 0,
          fields: [
            {
              $ref: "#/definitions/VerificationKeyHash"
            }
          ]
        },
        {
          title: "Script",
          dataType: "constructor",
          index: 1,
          fields: [
            {
              $ref: "#/definitions/ScriptHash"
            }
          ]
        }
      ]
    },
    "cardano/transaction/OutputReference": {
      title: "OutputReference",
      description: "An `OutputReference` is a unique reference to an output on-chain. The `output_index`\n corresponds to the position in the output list of the transaction (identified by its id)\n that produced that output",
      anyOf: [
        {
          title: "OutputReference",
          dataType: "constructor",
          index: 0,
          fields: [
            {
              title: "transaction_id",
              $ref: "#/definitions/ByteArray"
            },
            {
              title: "output_index",
              $ref: "#/definitions/Int"
            }
          ]
        }
      ]
    },
    "oracle/OracleDatum": {
      title: "OracleDatum",
      anyOf: [
        {
          title: "OracleDatum",
          dataType: "constructor",
          index: 0,
          fields: [
            {
              title: "count",
              $ref: "#/definitions/Int"
            },
            {
              title: "lovelace_price",
              $ref: "#/definitions/Int"
            },
            {
              title: "fee_address",
              $ref: "#/definitions/cardano~1address~1Address"
            }
          ]
        }
      ]
    },
    "oracle/OracleRedeemer": {
      title: "OracleRedeemer",
      anyOf: [
        {
          title: "MintPlutusNFT",
          dataType: "constructor",
          index: 0,
          fields: []
        },
        {
          title: "StopOracle",
          dataType: "constructor",
          index: 1,
          fields: []
        }
      ]
    },
    "oracle_nft/MintPolarity": {
      title: "MintPolarity",
      anyOf: [
        {
          title: "RMint",
          dataType: "constructor",
          index: 0,
          fields: []
        },
        {
          title: "RBurn",
          dataType: "constructor",
          index: 1,
          fields: []
        }
      ]
    },
    "plutus_nft/MintPolarity": {
      title: "MintPolarity",
      anyOf: [
        {
          title: "RMint",
          dataType: "constructor",
          index: 0,
          fields: []
        },
        {
          title: "RBurn",
          dataType: "constructor",
          index: 1,
          fields: []
        }
      ]
    }
  }
};

// src/plutus-nft/offchain.ts
var MeshPlutusNFTContract = class extends MeshTxInitiator {
  collectionName;
  paramUtxo = { outputIndex: 0, txHash: "" };
  oracleAddress;
  getOracleCbor = () => {
    return applyCborEncoding(plutus_default12.validators[0].compiledCode);
  };
  getOracleNFTCbor = () => {
    return applyParamsToScript8(plutus_default12.validators[2].compiledCode, [
      mOutputReference2(this.paramUtxo.txHash, this.paramUtxo.outputIndex)
    ]);
  };
  getNFTCbor = () => {
    const oracleNftPolicyId = resolveScriptHash4(this.getOracleNFTCbor(), "V3");
    return applyParamsToScript8(plutus_default12.validators[4].compiledCode, [
      stringToHex4(this.collectionName),
      oracleNftPolicyId
    ]);
  };
  constructor(inputs, contract) {
    super(inputs);
    this.collectionName = contract.collectionName;
    if (contract.paramUtxo) {
      this.paramUtxo = contract.paramUtxo;
    }
    this.oracleAddress = serializePlutusScript3(
      {
        code: applyCborEncoding(plutus_default12.validators[0].compiledCode),
        version: "V3"
      },
      inputs.stakeCredential,
      inputs.networkId
    ).address;
  }
  /**
   * Set up a one-time minting policy by minting an oracle token. This oracle token is essential as it holds the current state and index of the NFTs, acting as a reference for the minting sequence.
   * @param lovelacePrice - Price of the NFT in lovelace
   * @returns - Transaction hex and paramUtxo
   *
   * @example
   * ```typescript
   * const { tx, paramUtxo } = await contract.setupOracle(lovelacePrice);
   * ```
   */
  setupOracle = async (lovelacePrice) => {
    const { utxos, collateral, walletAddress } = await this.getWalletInfoForTx();
    if (utxos?.length <= 0) {
      throw new Error("No UTxOs found");
    }
    const paramUtxo = utxos[0];
    const script = plutus_default12.validators[2].compiledCode;
    const param = mOutputReference2(
      paramUtxo.input.txHash,
      paramUtxo.input.outputIndex
    );
    const paramScript = applyParamsToScript8(script, [param]);
    const policyId = resolveScriptHash4(paramScript, "V3");
    const tokenName2 = "";
    const { pubKeyHash, stakeCredentialHash } = deserializeAddress6(walletAddress);
    const txHex = await this.mesh.txIn(
      paramUtxo.input.txHash,
      paramUtxo.input.outputIndex,
      paramUtxo.output.amount,
      paramUtxo.output.address
    ).mintPlutusScriptV3().mint("1", policyId, tokenName2).mintingScript(paramScript).mintRedeemerValue(mConStr05([])).txOut(this.oracleAddress, [{ unit: policyId, quantity: "1" }]).txOutInlineDatumValue(
      mConStr05([
        0,
        lovelacePrice,
        mPubKeyAddress(pubKeyHash, stakeCredentialHash)
      ])
    ).txInCollateral(
      collateral.input.txHash,
      collateral.input.outputIndex,
      collateral.output.amount,
      collateral.output.address
    ).changeAddress(walletAddress).selectUtxosFrom(utxos).complete();
    this.paramUtxo = paramUtxo.input;
    return { tx: txHex, paramUtxo: paramUtxo.input };
  };
  /**
   * Mint NFT token with an automatically incremented index, which increases by one for each newly minted NFT.
   * @param assetMetadata - Asset metadata
   * @returns - Transaction hex
   *
   * @example
   * ```typescript
   * const assetMetadata = {
   *  ...demoAssetMetadata,
   * name: `Mesh Token ${oracleData.nftIndex}`,
   * };
   * const tx = await contract.mintPlutusNFT(assetMetadata);
   * ```
   */
  mintPlutusNFT = async (assetMetadata) => {
    const { utxos, collateral, walletAddress } = await this.getWalletInfoForTx();
    if (utxos?.length <= 0) {
      throw new Error("No UTxOs found");
    }
    const {
      nftIndex,
      policyId,
      lovelacePrice,
      oracleUtxo,
      oracleNftPolicyId,
      feeCollectorAddress,
      feeCollectorAddressObj
    } = await this.getOracleData();
    const tokenName2 = `${this.collectionName} (${nftIndex})`;
    const tokenNameHex = stringToHex4(tokenName2);
    const updatedOracleDatum = conStr03([
      integer2(nftIndex + 1),
      integer2(lovelacePrice),
      feeCollectorAddressObj
    ]);
    const tx = this.mesh.spendingPlutusScriptV3().txIn(
      oracleUtxo.input.txHash,
      oracleUtxo.input.outputIndex,
      oracleUtxo.output.amount,
      oracleUtxo.output.address
    ).txInRedeemerValue(mConStr05([])).txInScript(this.getOracleCbor()).txInInlineDatumPresent().txOut(this.oracleAddress, [{ unit: oracleNftPolicyId, quantity: "1" }]).txOutInlineDatumValue(updatedOracleDatum, "JSON").mintPlutusScriptV3().mint("1", policyId, tokenNameHex).mintingScript(this.getNFTCbor());
    if (assetMetadata) {
      const metadata = { [policyId]: { [tokenName2]: { ...assetMetadata } } };
      tx.metadataValue(721, metadata);
    }
    tx.mintRedeemerValue(mConStr05([])).txOut(feeCollectorAddress, [
      { unit: "lovelace", quantity: lovelacePrice.toString() }
    ]).txInCollateral(
      collateral.input.txHash,
      collateral.input.outputIndex,
      collateral.output.amount,
      collateral.output.address
    ).changeAddress(walletAddress).selectUtxosFrom(utxos);
    const txHex = await tx.complete();
    return txHex;
  };
  /**
   * Get the current oracle data.
   *
   * @returns - Oracle data
   *
   * @example
   * ```typescript
   * const oracleData = await contract.getOracleData();
   * ```
   */
  getOracleData = async () => {
    const oracleNftPolicyId = resolveScriptHash4(this.getOracleNFTCbor(), "V3");
    const oracleUtxo = (await this.getAddressUtxosWithToken(this.oracleAddress, oracleNftPolicyId))[0];
    const oracleDatum = parseDatumCbor2(
      oracleUtxo.output.plutusData
    );
    const nftIndex = oracleDatum.fields[0].int;
    const lovelacePrice = oracleDatum.fields[1].int;
    const feeCollectorAddressObj = oracleDatum.fields[2];
    const feeCollectorAddress = serializeAddressObj3(
      feeCollectorAddressObj,
      this.networkId
    );
    const policyId = resolveScriptHash4(this.getNFTCbor(), "V3");
    return {
      nftIndex,
      policyId,
      lovelacePrice,
      oracleUtxo,
      oracleNftPolicyId,
      feeCollectorAddress,
      feeCollectorAddressObj
    };
  };
  getUtxoByTxHash = async (txHash) => {
    return await this._getUtxoByTxHash(txHash);
  };
};

// src/swap/offchain.ts
import {
  conStr0 as conStr04,
  mConStr0 as mConStr06,
  mConStr1 as mConStr15,
  MeshValue as MeshValue2,
  pubKeyAddress as pubKeyAddress3,
  value as value2
} from "@meshsdk/common";
import {
  deserializeAddress as deserializeAddress7,
  deserializeDatum as deserializeDatum4,
  serializeAddressObj as serializeAddressObj4
} from "@meshsdk/core";
import { applyParamsToScript as applyParamsToScript9 } from "@meshsdk/core-csl";

// src/swap/aiken-workspace-v1/plutus.json
var plutus_default13 = {
  preamble: {
    title: "meshjs/swap",
    description: "Aiken contracts for project 'meshjs/swap'",
    version: "0.0.0",
    plutusVersion: "v2",
    compiler: {
      name: "Aiken",
      version: "v1.0.29-alpha+unknown"
    },
    license: "Apache-2.0"
  },
  validators: [
    {
      title: "swap.swap",
      datum: {
        title: "datum",
        schema: {
          $ref: "#/definitions/swap~1SwapDatum"
        }
      },
      redeemer: {
        title: "redeemer",
        schema: {
          $ref: "#/definitions/swap~1SwapRedeemer"
        }
      },
      compiledCode: "590827010000323232323232322323232232253330083232533300a3007300b375400226464a6466601a6014601c6ea80204c94ccc038c030c03cdd5000899191919191919191919299980c299980d8048a501533301b301e00914a2294054ccc06000440085280a50330043330030084bd6f7b63011299980c99baf300e301b3754602260366ea800802c4cc010004dd59808980d9baa3011301b37540042002600c6eacc03cc064dd500b19801999119980200125eb7bdb180894ccc068cdd79807980e1baa0020031330050013756602460386ea80084004dd61802180c1baa300b3018375401e601660306ea8054c014dd59802180c1baa0152232333001001003002222533301d00210011323330040043021003333300b002375c60380026eacc074004888c94ccc07d4ccc0880045288a5014c103d87a80001301333023374c00297ae0323330010010030022225333024002100113233300400430280033322323300100100522533302900113302a337606ea4010dd4001a5eb7bdb1804c8c8c8c94ccc0a8cdc800400109981719bb037520106ea001c01454ccc0a8cdc78040010992999815981498161baa00113302f337606ea4024c0c0c0b4dd5000802080219299981598148008a60103d87a80001301f3302f375000297ae03370000e00226605c66ec0dd48011ba800133006006003375a60560066eb8c0a4008c0b4008c0ac004dd718118009bad30240013026002301f002222323300100100422533301c0011004133003301e00133002002301f001223233001001323300100100322533301b00114bd7009919991119198008008019129998108008801899198119ba733023375200c66046604000266046604200297ae03300300330250023023001375c60340026eacc06c004cc00c00cc07c008c074004894ccc068004528899299980c1919b89375a600e002664464a6660386032603a6ea8004520001375a6042603c6ea8004c94ccc070c064c074dd50008a6103d87a80001323300100137566044603e6ea8008894ccc084004530103d87a80001323232325333022337220100042a66604466e3c0200084c058cc098dd4000a5eb80530103d87a8000133006006003375a60460066eb8c084008c094008c08c004c8cc004004024894ccc0800045300103d87a80001323232325333021337220100042a66604266e3c0200084c054cc094dd3000a5eb80530103d87a8000133006006003375660440066eb8c080008c090008c088004dd718070009bae30110013758603a0042660060060022940c0740048c060c064c0640048c8cc004004008894ccc05c00452f5bded8c02664464646666010006004002444c646400464646600200200644a66603c002293099299980f8008a99980e18021bad301e30210021498584c8c8c8c94ccc080cdc81bae3021004375c60420062a666040601000226600e00e660480060042c2c6eb4c08400cc09000cc088008c084008c0840048ccc064c05c00528251375660320066eb8c05c008c064004cc008008c0680048888c8cc004004014894ccc0640044cc068cdd81ba9005374c00897adef6c60132323232533301a3372001200426603c66ec0dd48049ba60080051533301a3371e012004264a666036603260386ea80044cc07ccdd81ba900a3020301d3754002008200866600e01201000226603c66ec0dd48011ba600133006006003375660360066eb8c064008c074008c06c004c8cc004004dd6180298091baa30053012375401244a666028002297ae01323253330133375e6010602a6ea8c02cc054dd500100289980b80119802002000899802002000980c001180b000980198081baa300630103754602660206ea800458c8cc004004dd6180198081baa30033010375400e44a666024002298103d87a80001323253330113375e600c60266ea800801c4c014cc0540092f5c0266008008002602c0046028002264a66601c6018601e6ea80044cc88c8cc00400400c894ccc054004528099299980999b8f375c603000400829444cc00c00c004c060004dd61809980a180a180a180a180a180a180a180a18081baa30033010375400e6eb8c04cc040dd50008b192999807180618079baa001130023301230133010375400297ae014c0103d87a80003002300f37546004601e6ea8030dd2a400046022002601e60186ea8004528180098059baa0022300e300f00114984d958c94ccc01cc01400454ccc028c024dd50010a4c2c2a66600e60080022a66601460126ea80085261616300737540026464a66600c6008600e6ea80144c8c8c8c8c8c94ccc03cc0480084c8c8c926330090032323300b375660240044646eb4c050008dd718090009bae3010001330080042323300a375660220044646eb4c04c008dd718088009bae300f001533300c300a300d375400a264646464a666026602c0042646493192999809180800089919299980b980d00109924c64a66602a602600226464a666034603a0042649318098008b180d800980b9baa0021533301530120011323232323232533301e3021002149858dd6980f800980f8011bad301d001301d002375a6036002602e6ea800858c054dd50008b180c000980a1baa00315333012300f00115333015301437540062930b0b18091baa002300c00316301400130140023012001300e375400a2c2c6eacc040004c040008dd598070009807001180600098041baa0051622323300100100322533300c00114984c8cc00c00cc040008c00cc0380048c94ccc018c0100044c8c94ccc02cc03800852616375c601800260106ea800854ccc018c00c0044c8c94ccc02cc03800852616375c601800260106ea800858c018dd50009b8748008dc3a4000ae6955ceaab9e5573eae815d0aba201",
      hash: "5db0485a71b88eb31dec330bcf994509ea24b709498f90f9b1863902"
    }
  ],
  definitions: {
    ByteArray: {
      dataType: "bytes"
    },
    Int: {
      dataType: "integer"
    },
    List$Pair$ByteArray_Int: {
      dataType: "map",
      keys: {
        $ref: "#/definitions/ByteArray"
      },
      values: {
        $ref: "#/definitions/Int"
      }
    },
    List$Pair$ByteArray_List$Pair$ByteArray_Int: {
      dataType: "map",
      keys: {
        $ref: "#/definitions/ByteArray"
      },
      values: {
        $ref: "#/definitions/List$Pair$ByteArray_Int"
      }
    },
    "Option$aiken/transaction/credential/Referenced$aiken/transaction/credential/Credential": {
      title: "Optional",
      anyOf: [
        {
          title: "Some",
          description: "An optional value.",
          dataType: "constructor",
          index: 0,
          fields: [
            {
              $ref: "#/definitions/aiken~1transaction~1credential~1Referenced$aiken~1transaction~1credential~1Credential"
            }
          ]
        },
        {
          title: "None",
          description: "Nothing.",
          dataType: "constructor",
          index: 1,
          fields: []
        }
      ]
    },
    "aiken/transaction/credential/Address": {
      title: "Address",
      description: "A Cardano `Address` typically holding one or two credential references.\n\n Note that legacy bootstrap addresses (a.k.a. 'Byron addresses') are\n completely excluded from Plutus contexts. Thus, from an on-chain\n perspective only exists addresses of type 00, 01, ..., 07 as detailed\n in [CIP-0019 :: Shelley Addresses](https://cips.cardano.org/cip/CIP-19).",
      anyOf: [
        {
          title: "Address",
          dataType: "constructor",
          index: 0,
          fields: [
            {
              title: "payment_credential",
              $ref: "#/definitions/aiken~1transaction~1credential~1Credential"
            },
            {
              title: "stake_credential",
              $ref: "#/definitions/Option$aiken~1transaction~1credential~1Referenced$aiken~1transaction~1credential~1Credential"
            }
          ]
        }
      ]
    },
    "aiken/transaction/credential/Credential": {
      title: "Credential",
      description: "A general structure for representing an on-chain `Credential`.\n\n Credentials are always one of two kinds: a direct public/private key\n pair, or a script (native or Plutus).",
      anyOf: [
        {
          title: "VerificationKeyCredential",
          dataType: "constructor",
          index: 0,
          fields: [
            {
              $ref: "#/definitions/ByteArray"
            }
          ]
        },
        {
          title: "ScriptCredential",
          dataType: "constructor",
          index: 1,
          fields: [
            {
              $ref: "#/definitions/ByteArray"
            }
          ]
        }
      ]
    },
    "aiken/transaction/credential/Referenced$aiken/transaction/credential/Credential": {
      title: "Referenced",
      description: "Represent a type of object that can be represented either inline (by hash)\n or via a reference (i.e. a pointer to an on-chain location).\n\n This is mainly use for capturing pointers to a stake credential\n registration certificate in the case of so-called pointer addresses.",
      anyOf: [
        {
          title: "Inline",
          dataType: "constructor",
          index: 0,
          fields: [
            {
              $ref: "#/definitions/aiken~1transaction~1credential~1Credential"
            }
          ]
        },
        {
          title: "Pointer",
          dataType: "constructor",
          index: 1,
          fields: [
            {
              title: "slot_number",
              $ref: "#/definitions/Int"
            },
            {
              title: "transaction_index",
              $ref: "#/definitions/Int"
            },
            {
              title: "certificate_index",
              $ref: "#/definitions/Int"
            }
          ]
        }
      ]
    },
    "swap/SwapDatum": {
      title: "SwapDatum",
      anyOf: [
        {
          title: "SwapDatum",
          dataType: "constructor",
          index: 0,
          fields: [
            {
              title: "initiator",
              $ref: "#/definitions/aiken~1transaction~1credential~1Address"
            },
            {
              title: "to_provide",
              $ref: "#/definitions/List$Pair$ByteArray_List$Pair$ByteArray_Int"
            },
            {
              title: "to_receive",
              $ref: "#/definitions/List$Pair$ByteArray_List$Pair$ByteArray_Int"
            }
          ]
        }
      ]
    },
    "swap/SwapRedeemer": {
      title: "SwapRedeemer",
      anyOf: [
        {
          title: "Cancel",
          dataType: "constructor",
          index: 0,
          fields: []
        },
        {
          title: "Swap",
          dataType: "constructor",
          index: 1,
          fields: []
        }
      ]
    }
  }
};

// src/swap/aiken-workspace-v2/plutus.json
var plutus_default14 = {
  preamble: {
    title: "meshjs/swap",
    description: "Aiken contracts for project 'meshjs/swap'",
    version: "0.0.0",
    plutusVersion: "v3",
    compiler: {
      name: "Aiken",
      version: "v1.1.0+unknown"
    },
    license: "Apache-2.0"
  },
  validators: [
    {
      title: "swap.swap.spend",
      datum: {
        title: "datum_opt",
        schema: {
          $ref: "#/definitions/swap~1SwapDatum"
        }
      },
      redeemer: {
        title: "redeemer",
        schema: {
          $ref: "#/definitions/swap~1SwapRedeemer"
        }
      },
      compiledCode: "59069e010100323232323232322533300232323232325332330083001300937540042646464646464a66601c60060022a66602260206ea8024540085854ccc038c01c00454ccc044c040dd50048a8010b0b18071baa0081533300c3001300d375400426464a6466601e601060206ea80284c94ccc040c014c044dd500089919191919191919191919299980da99980f0048a501533301e302100914a2294054ccc06c00440085280a50330043330030084bd6f7b63011299980e19baf300f301e37546018603c6ea800802c4cc010004dd59806180f1baa300c301e37540042002600c6eacc028c070dd500719801999119980200125eb7bdb180894ccc074cdd79808180f9baa0020031330050013756601a603e6ea80084004dd61802180d9baa016300c301b375401a600a6eacc010c06cdd5006911919980080080180111129998100010800899199802002181200199998058011bae301f0013756604000244464a666044a66604a00229445280a60103d87a80001301433026374c00297ae03233300100100300222253330270021001132333004004302b0033322323300100100522533302c00113302d337606ea4010dd4001a5eb7bdb1804c8c8c8c94ccc0b4cdc800400109981899bb037520106ea001c01454ccc0b4cdc78040010992999817181198179baa001133032337606ea4024c0ccc0c0dd5000802080219299981718118008a60103d87a80001302033032375000297ae03370000e00226606266ec0dd48011ba800133006006003375a605c0066eb8c0b0008c0c0008c0b8004dd718130009bad302700130290023022002222323300100100422533301f00110041330033021001330020023022001223233001001323300100100322533301e00114bd7009919991119198008008019129998120008801899198131ba733026375200c6604c60460026604c604800297ae03300300330280023026001375c603a0026eacc078004cc00c00cc088008c080004894ccc074004528899299980d9919b89375a600e002664464a66603e603060406ea8004520001375a604860426ea8004c94ccc07cc060c080dd50008a6103d87a8000132330010013756604a60446ea8008894ccc090004530103d87a80001323232325333025337220100042a66604a66e3c0200084c05ccc0a4dd4000a5eb80530103d87a8000133006006003375a604c0066eb8c090008c0a0008c098004c8cc004004024894ccc08c0045300103d87a80001323232325333024337220100042a66604866e3c0200084c058cc0a0dd3000a5eb80530103d87a80001330060060033756604a0066eb8c08c008c09c008c094004dd718078009bae300c001375860400042660060060022940c0800048c06cc070c0700048c8cc004004008894ccc06800452f5bded8c02664464646666010006004002444c646400464646600200200644a66604200229309929998110008a99980f98021bad302130240021498584c8c8c8c94ccc08ccdc81bae3024004375c60480062a666046601000226600e00e6604e0060042c2c6eb4c09000cc09c00cc094008c090008c0900048ccc070c04400528251375660380066eb8c068008c070004cc008008c0740048888c8cc004004014894ccc0700044cc074cdd81ba9005374c00897adef6c60132323232533301d3372001200426604266ec0dd48049ba60080051533301d3371e012004264a66603c6026603e6ea80044cc088cdd81ba900a302330203754002008200866600e01201000226604266ec0dd48011ba6001330060060033756603c0066eb8c070008c080008c078004c8cc004004dd61803180a9baa01022533301700114bd7009919299980b19baf300930183754600c60306ea80080144cc068008cc0100100044cc010010004c06c008c064004c010c04cdd5180098099baa3016301337540044602c602e0022c64660020026eb0c00cc048dd500691299980a0008a6103d87a80001323253330133375e600c602a6ea80080284c014cc05c0092f5c02660080080026030004602c002264a666020600a60226ea80044cc88c8cc00400400c894ccc05c004528099299980a99b8f375c603400400829444cc00c00c004c068004dd6180a980b180b180b180b180b180b180b180b18091baa00d375c602a60246ea800458c94ccc040c014c044dd5000898011980a180a98091baa0014bd700a60103d87a8000300230113754600460226ea800cdd2a4000460260026022601c6ea800858dc3a4000601e6020004601c00260146ea8008dc3a40042c6016601800460140026014004601000260086ea8004526136565734aae7555cf2ab9f5740ae855d11",
      hash: "cbebe37fa901785755124c23e59812f3aa59b8539096a322727a5003"
    },
    {
      title: "swap.swap.else",
      compiledCode: "59069e010100323232323232322533300232323232325332330083001300937540042646464646464a66601c60060022a66602260206ea8024540085854ccc038c01c00454ccc044c040dd50048a8010b0b18071baa0081533300c3001300d375400426464a6466601e601060206ea80284c94ccc040c014c044dd500089919191919191919191919299980da99980f0048a501533301e302100914a2294054ccc06c00440085280a50330043330030084bd6f7b63011299980e19baf300f301e37546018603c6ea800802c4cc010004dd59806180f1baa300c301e37540042002600c6eacc028c070dd500719801999119980200125eb7bdb180894ccc074cdd79808180f9baa0020031330050013756601a603e6ea80084004dd61802180d9baa016300c301b375401a600a6eacc010c06cdd5006911919980080080180111129998100010800899199802002181200199998058011bae301f0013756604000244464a666044a66604a00229445280a60103d87a80001301433026374c00297ae03233300100100300222253330270021001132333004004302b0033322323300100100522533302c00113302d337606ea4010dd4001a5eb7bdb1804c8c8c8c94ccc0b4cdc800400109981899bb037520106ea001c01454ccc0b4cdc78040010992999817181198179baa001133032337606ea4024c0ccc0c0dd5000802080219299981718118008a60103d87a80001302033032375000297ae03370000e00226606266ec0dd48011ba800133006006003375a605c0066eb8c0b0008c0c0008c0b8004dd718130009bad302700130290023022002222323300100100422533301f00110041330033021001330020023022001223233001001323300100100322533301e00114bd7009919991119198008008019129998120008801899198131ba733026375200c6604c60460026604c604800297ae03300300330280023026001375c603a0026eacc078004cc00c00cc088008c080004894ccc074004528899299980d9919b89375a600e002664464a66603e603060406ea8004520001375a604860426ea8004c94ccc07cc060c080dd50008a6103d87a8000132330010013756604a60446ea8008894ccc090004530103d87a80001323232325333025337220100042a66604a66e3c0200084c05ccc0a4dd4000a5eb80530103d87a8000133006006003375a604c0066eb8c090008c0a0008c098004c8cc004004024894ccc08c0045300103d87a80001323232325333024337220100042a66604866e3c0200084c058cc0a0dd3000a5eb80530103d87a80001330060060033756604a0066eb8c08c008c09c008c094004dd718078009bae300c001375860400042660060060022940c0800048c06cc070c0700048c8cc004004008894ccc06800452f5bded8c02664464646666010006004002444c646400464646600200200644a66604200229309929998110008a99980f98021bad302130240021498584c8c8c8c94ccc08ccdc81bae3024004375c60480062a666046601000226600e00e6604e0060042c2c6eb4c09000cc09c00cc094008c090008c0900048ccc070c04400528251375660380066eb8c068008c070004cc008008c0740048888c8cc004004014894ccc0700044cc074cdd81ba9005374c00897adef6c60132323232533301d3372001200426604266ec0dd48049ba60080051533301d3371e012004264a66603c6026603e6ea80044cc088cdd81ba900a302330203754002008200866600e01201000226604266ec0dd48011ba6001330060060033756603c0066eb8c070008c080008c078004c8cc004004dd61803180a9baa01022533301700114bd7009919299980b19baf300930183754600c60306ea80080144cc068008cc0100100044cc010010004c06c008c064004c010c04cdd5180098099baa3016301337540044602c602e0022c64660020026eb0c00cc048dd500691299980a0008a6103d87a80001323253330133375e600c602a6ea80080284c014cc05c0092f5c02660080080026030004602c002264a666020600a60226ea80044cc88c8cc00400400c894ccc05c004528099299980a99b8f375c603400400829444cc00c00c004c068004dd6180a980b180b180b180b180b180b180b180b18091baa00d375c602a60246ea800458c94ccc040c014c044dd5000898011980a180a98091baa0014bd700a60103d87a8000300230113754600460226ea800cdd2a4000460260026022601c6ea800858dc3a4000601e6020004601c00260146ea8008dc3a40042c6016601800460140026014004601000260086ea8004526136565734aae7555cf2ab9f5740ae855d11",
      hash: "cbebe37fa901785755124c23e59812f3aa59b8539096a322727a5003"
    }
  ],
  definitions: {
    AssetName: {
      title: "AssetName",
      dataType: "bytes"
    },
    Int: {
      dataType: "integer"
    },
    MValue: {
      title: "MValue",
      dataType: "map",
      keys: {
        $ref: "#/definitions/PolicyId"
      },
      values: {
        $ref: "#/definitions/Pairs$AssetName_Int"
      }
    },
    Option$StakeCredential: {
      title: "Option",
      anyOf: [
        {
          title: "Some",
          description: "An optional value.",
          dataType: "constructor",
          index: 0,
          fields: [
            {
              $ref: "#/definitions/StakeCredential"
            }
          ]
        },
        {
          title: "None",
          description: "Nothing.",
          dataType: "constructor",
          index: 1,
          fields: []
        }
      ]
    },
    Pairs$AssetName_Int: {
      title: "Pairs<AssetName, Int>",
      dataType: "map",
      keys: {
        $ref: "#/definitions/AssetName"
      },
      values: {
        $ref: "#/definitions/Int"
      }
    },
    PaymentCredential: {
      title: "PaymentCredential",
      description: "A general structure for representing an on-chain `Credential`.\n\n Credentials are always one of two kinds: a direct public/private key\n pair, or a script (native or Plutus).",
      anyOf: [
        {
          title: "VerificationKey",
          dataType: "constructor",
          index: 0,
          fields: [
            {
              $ref: "#/definitions/VerificationKeyHash"
            }
          ]
        },
        {
          title: "Script",
          dataType: "constructor",
          index: 1,
          fields: [
            {
              $ref: "#/definitions/ScriptHash"
            }
          ]
        }
      ]
    },
    PolicyId: {
      title: "PolicyId",
      dataType: "bytes"
    },
    ScriptHash: {
      title: "ScriptHash",
      dataType: "bytes"
    },
    StakeCredential: {
      title: "StakeCredential",
      description: "Represent a type of object that can be represented either inline (by hash)\n or via a reference (i.e. a pointer to an on-chain location).\n\n This is mainly use for capturing pointers to a stake credential\n registration certificate in the case of so-called pointer addresses.",
      anyOf: [
        {
          title: "Inline",
          dataType: "constructor",
          index: 0,
          fields: [
            {
              $ref: "#/definitions/cardano~1address~1Credential"
            }
          ]
        },
        {
          title: "Pointer",
          dataType: "constructor",
          index: 1,
          fields: [
            {
              title: "slot_number",
              $ref: "#/definitions/Int"
            },
            {
              title: "transaction_index",
              $ref: "#/definitions/Int"
            },
            {
              title: "certificate_index",
              $ref: "#/definitions/Int"
            }
          ]
        }
      ]
    },
    VerificationKeyHash: {
      title: "VerificationKeyHash",
      dataType: "bytes"
    },
    "cardano/address/Address": {
      title: "Address",
      description: "A Cardano `Address` typically holding one or two credential references.\n\n Note that legacy bootstrap addresses (a.k.a. 'Byron addresses') are\n completely excluded from Plutus contexts. Thus, from an on-chain\n perspective only exists addresses of type 00, 01, ..., 07 as detailed\n in [CIP-0019 :: Shelley Addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019/#shelley-addresses).",
      anyOf: [
        {
          title: "Address",
          dataType: "constructor",
          index: 0,
          fields: [
            {
              title: "payment_credential",
              $ref: "#/definitions/PaymentCredential"
            },
            {
              title: "stake_credential",
              $ref: "#/definitions/Option$StakeCredential"
            }
          ]
        }
      ]
    },
    "cardano/address/Credential": {
      title: "Credential",
      description: "A general structure for representing an on-chain `Credential`.\n\n Credentials are always one of two kinds: a direct public/private key\n pair, or a script (native or Plutus).",
      anyOf: [
        {
          title: "VerificationKey",
          dataType: "constructor",
          index: 0,
          fields: [
            {
              $ref: "#/definitions/VerificationKeyHash"
            }
          ]
        },
        {
          title: "Script",
          dataType: "constructor",
          index: 1,
          fields: [
            {
              $ref: "#/definitions/ScriptHash"
            }
          ]
        }
      ]
    },
    "swap/SwapDatum": {
      title: "SwapDatum",
      anyOf: [
        {
          title: "SwapDatum",
          dataType: "constructor",
          index: 0,
          fields: [
            {
              title: "initiator",
              $ref: "#/definitions/cardano~1address~1Address"
            },
            {
              title: "to_provide",
              $ref: "#/definitions/MValue"
            },
            {
              title: "to_receive",
              $ref: "#/definitions/MValue"
            }
          ]
        }
      ]
    },
    "swap/SwapRedeemer": {
      title: "SwapRedeemer",
      anyOf: [
        {
          title: "Cancel",
          dataType: "constructor",
          index: 0,
          fields: []
        },
        {
          title: "Swap",
          dataType: "constructor",
          index: 1,
          fields: []
        }
      ]
    }
  }
};

// src/swap/offchain.ts
var MeshSwapContract = class extends MeshTxInitiator {
  scriptCbor;
  scriptAddress;
  constructor(inputs) {
    super(inputs);
    this.scriptCbor = this.getScriptCbor();
    this.scriptAddress = this.getScriptAddress(this.scriptCbor);
  }
  getScriptCbor = () => {
    switch (this.version) {
      case 2:
        return applyParamsToScript9(plutus_default14.validators[0].compiledCode, []);
      default:
        return applyParamsToScript9(plutus_default13.validators[0].compiledCode, []);
    }
  };
  initiateSwap = async (toProvide, toReceive) => {
    const { utxos, walletAddress, collateral } = await this.getWalletInfoForTx();
    const { pubKeyHash, stakeCredentialHash } = deserializeAddress7(walletAddress);
    const swapDatum = conStr04([
      pubKeyAddress3(pubKeyHash, stakeCredentialHash),
      value2(toProvide),
      value2(toReceive)
    ]);
    await this.mesh.txOut(this.scriptAddress, toProvide).txOutInlineDatumValue(swapDatum, "JSON").changeAddress(walletAddress).txInCollateral(
      collateral.input.txHash,
      collateral.input.outputIndex,
      collateral.output.amount,
      collateral.output.address
    ).selectUtxosFrom(utxos).complete();
    return this.mesh.txHex;
  };
  acceptSwap = async (swapUtxo) => {
    const { utxos, walletAddress, collateral } = await this.getWalletInfoForTx();
    const inlineDatum = deserializeDatum4(
      swapUtxo.output.plutusData
    );
    const initiatorAddress = serializeAddressObj4(
      inlineDatum.fields[0],
      this.networkId
    );
    const initiatorToReceive = inlineDatum.fields[2];
    await this.mesh.spendingPlutusScript(this.languageVersion).txIn(
      swapUtxo.input.txHash,
      swapUtxo.input.outputIndex,
      swapUtxo.output.amount,
      swapUtxo.output.address
    ).spendingReferenceTxInInlineDatumPresent().spendingReferenceTxInRedeemerValue(mConStr15([])).txInScript(this.scriptCbor).txOut(
      initiatorAddress,
      MeshValue2.fromValue(initiatorToReceive).toAssets()
    ).changeAddress(walletAddress).txInCollateral(
      collateral.input.txHash,
      collateral.input.outputIndex,
      collateral.output.amount,
      collateral.output.address
    ).selectUtxosFrom(utxos).complete();
    return this.mesh.txHex;
  };
  cancelSwap = async (swapUtxo) => {
    const { utxos, walletAddress, collateral } = await this.getWalletInfoForTx();
    const inlineDatum = deserializeDatum4(
      swapUtxo.output.plutusData
    );
    const initiatorAddress = serializeAddressObj4(
      inlineDatum.fields[0],
      this.networkId
    );
    await this.mesh.spendingPlutusScript(this.languageVersion).txIn(
      swapUtxo.input.txHash,
      swapUtxo.input.outputIndex,
      swapUtxo.output.amount,
      swapUtxo.output.address
    ).spendingReferenceTxInInlineDatumPresent().spendingReferenceTxInRedeemerValue(mConStr06([])).txInScript(this.scriptCbor).changeAddress(walletAddress).txInCollateral(
      collateral.input.txHash,
      collateral.input.outputIndex,
      collateral.output.amount,
      collateral.output.address
    ).requiredSignerHash(deserializeAddress7(initiatorAddress).pubKeyHash).selectUtxosFrom(utxos).complete();
    return this.mesh.txHex;
  };
  getUtxoByTxHash = async (txHash) => {
    return await this._getUtxoByTxHash(txHash, this.scriptCbor);
  };
};

// src/vesting/offchain.ts
import {
  mConStr0 as mConStr07,
  SLOT_CONFIG_NETWORK,
  unixTimeToEnclosingSlot
} from "@meshsdk/common";
import {
  deserializeAddress as deserializeAddress8,
  deserializeDatum as deserializeDatum5
} from "@meshsdk/core";
import { applyParamsToScript as applyParamsToScript10 } from "@meshsdk/core-csl";

// src/vesting/aiken-workspace-v1/plutus.json
var plutus_default15 = {
  preamble: {
    title: "meshjs/vesting",
    description: "Aiken contracts for project 'meshjs/vesting'",
    version: "0.0.0",
    plutusVersion: "v2",
    compiler: {
      name: "Aiken",
      version: "v1.0.29-alpha+unknown"
    },
    license: "Apache-2.0"
  },
  validators: [
    {
      title: "vesting.vesting",
      datum: {
        title: "datum",
        schema: {
          $ref: "#/definitions/vesting~1types~1VestingDatum"
        }
      },
      redeemer: {
        title: "_redeemer",
        schema: {
          $ref: "#/definitions/Data"
        }
      },
      compiledCode: "5901c40100003232323232323223222533300532533233007300130083754600460126ea800c4c8c8c94ccc028cc004dd6180118061baa3003300c375400c6eb8c014c030dd50048a511533300a330013758600460186ea8c00cc030dd50031bae300f30103010300c3754012266446464646464a666022601660246ea80084c94ccc0480104cdc40038008011bad301630133754004002264a666022601660246ea80084c94ccc0480100084cdc48038009bad3016301337540040022940c050008cdc424000601e6ea8c04cc050004cc044c048004cc044ccc034cdc424000601c6ea8c048c04c00530103d87a80004c0103d87980004bd7018071baa3005300e3754004601e602060206020602060206020602060186ea8c00cc030dd50031bad3003300c3754012294088c8cc00400400c894ccc040004528099299980719b8f375c602600400829444cc00c00c004c04c0048c038c03cc03cc03cc03cc03cc03cc03cc03c0048c034004dc3a400429408c02cc0300045261365653330023370e900018019baa0011323232323232533300b300e002149858dd7180600098060011bae300a001300a002375a601000260086ea8004595cd2ab9d5573caae7d5d02ba157441",
      hash: "ac96a3fa3cabf670268a88720402c715ed5fd73ffb3276e6092ead00"
    }
  ],
  definitions: {
    ByteArray: {
      dataType: "bytes"
    },
    Data: {
      title: "Data",
      description: "Any Plutus data."
    },
    Int: {
      dataType: "integer"
    },
    "vesting/types/VestingDatum": {
      title: "VestingDatum",
      anyOf: [
        {
          title: "VestingDatum",
          dataType: "constructor",
          index: 0,
          fields: [
            {
              title: "lock_until",
              description: "POSIX time in second, e.g. 1672843961000",
              $ref: "#/definitions/Int"
            },
            {
              title: "owner",
              description: "Owner's credentials",
              $ref: "#/definitions/ByteArray"
            },
            {
              title: "beneficiary",
              description: "Beneficiary's credentials",
              $ref: "#/definitions/ByteArray"
            }
          ]
        }
      ]
    }
  }
};

// src/vesting/aiken-workspace-v2/plutus.json
var plutus_default16 = {
  preamble: {
    title: "meshjs/vesting",
    description: "Aiken contracts for project 'meshjs/vesting'",
    version: "0.0.0",
    plutusVersion: "v3",
    compiler: {
      name: "Aiken",
      version: "v1.1.0+unknown"
    },
    license: "Apache-2.0"
  },
  validators: [
    {
      title: "vesting.vesting.spend",
      datum: {
        title: "datum_opt",
        schema: {
          $ref: "#/definitions/vesting~1VestingDatum"
        }
      },
      redeemer: {
        title: "_redeemer",
        schema: {
          $ref: "#/definitions/Data"
        }
      },
      compiledCode: "5901a7010100323232323232322533300232323232325332330083001300937540042646464a66601666e1d2000300c37540022646464a66601c660026eb0c008c040dd50059bae3013301430103754006294454ccc038cc004dd6180118081baa00b375c60266028602860206ea800c4c8cc88c8c8c8c8c94ccc058c03cc05cdd5001099299980b802099b88007001002375a603660306ea80080044c94ccc058c03cc05cdd5001099299980b802001099b89007001375a603660306ea8008004528180c8011806180a1baa3018301900133016301700133016333012300b30133754602e603000298103d87a80004c0103d87980004bd7018099baa3003301337540046028602a602a602a602a602a602a602a60226ea8030dd6980098089baa0042301400114a044646600200200644a66602800229404c94ccc048cdc79bae301700200414a2266006006002602e00246024602660266026602660266026602660260026020601a6ea800458c03cc040008c038004c028dd50011b874800858c02cc030008c028004c028008c020004c010dd50008a4c26cacae6955ceaab9e5573eae815d0aba21",
      hash: "d13324c13a48b69d67ccfc88e3e87f046f4417f57f5c740d515249fb"
    },
    {
      title: "vesting.vesting.else",
      compiledCode: "5901a7010100323232323232322533300232323232325332330083001300937540042646464a66601666e1d2000300c37540022646464a66601c660026eb0c008c040dd50059bae3013301430103754006294454ccc038cc004dd6180118081baa00b375c60266028602860206ea800c4c8cc88c8c8c8c8c94ccc058c03cc05cdd5001099299980b802099b88007001002375a603660306ea80080044c94ccc058c03cc05cdd5001099299980b802001099b89007001375a603660306ea8008004528180c8011806180a1baa3018301900133016301700133016333012300b30133754602e603000298103d87a80004c0103d87980004bd7018099baa3003301337540046028602a602a602a602a602a602a602a60226ea8030dd6980098089baa0042301400114a044646600200200644a66602800229404c94ccc048cdc79bae301700200414a2266006006002602e00246024602660266026602660266026602660260026020601a6ea800458c03cc040008c038004c028dd50011b874800858c02cc030008c028004c028008c020004c010dd50008a4c26cacae6955ceaab9e5573eae815d0aba21",
      hash: "d13324c13a48b69d67ccfc88e3e87f046f4417f57f5c740d515249fb"
    }
  ],
  definitions: {
    ByteArray: {
      dataType: "bytes"
    },
    Data: {
      title: "Data",
      description: "Any Plutus data."
    },
    Int: {
      dataType: "integer"
    },
    "vesting/VestingDatum": {
      title: "VestingDatum",
      anyOf: [
        {
          title: "VestingDatum",
          dataType: "constructor",
          index: 0,
          fields: [
            {
              title: "lock_until",
              description: "POSIX time in milliseconds, e.g. 1672843961000",
              $ref: "#/definitions/Int"
            },
            {
              title: "owner",
              description: "Owner's credentials",
              $ref: "#/definitions/ByteArray"
            },
            {
              title: "beneficiary",
              description: "Beneficiary's credentials",
              $ref: "#/definitions/ByteArray"
            }
          ]
        }
      ]
    }
  }
};

// src/vesting/offchain.ts
var MeshVestingContract = class extends MeshTxInitiator {
  scriptCbor;
  scriptAddress;
  constructor(inputs) {
    super(inputs);
    this.scriptCbor = this.getScriptCbor();
    this.scriptAddress = this.getScriptAddress(this.scriptCbor);
  }
  getScriptCbor = () => {
    switch (this.version) {
      case 2:
        return applyParamsToScript10(plutus_default16.validators[0].compiledCode, []);
      default:
        return applyParamsToScript10(plutus_default15.validators[0].compiledCode, []);
    }
  };
  depositFund = async (amount, lockUntilTimeStampMs, beneficiary) => {
    const { utxos, walletAddress } = await this.getWalletInfoForTx();
    const { pubKeyHash: ownerPubKeyHash } = deserializeAddress8(walletAddress);
    const { pubKeyHash: beneficiaryPubKeyHash } = deserializeAddress8(beneficiary);
    await this.mesh.txOut(this.scriptAddress, amount).txOutInlineDatumValue(
      mConStr07([
        lockUntilTimeStampMs,
        ownerPubKeyHash,
        beneficiaryPubKeyHash
      ])
    ).changeAddress(walletAddress).selectUtxosFrom(utxos).complete();
    return this.mesh.txHex;
  };
  withdrawFund = async (vestingUtxo) => {
    const { utxos, walletAddress, collateral } = await this.getWalletInfoForTx();
    const { input: collateralInput, output: collateralOutput } = collateral;
    const { pubKeyHash } = deserializeAddress8(walletAddress);
    const datum = deserializeDatum5(
      vestingUtxo.output.plutusData
    );
    const invalidBefore = unixTimeToEnclosingSlot(
      Math.min(datum.fields[0].int, Date.now() - 15e3),
      this.networkId === 0 ? SLOT_CONFIG_NETWORK.preprod : SLOT_CONFIG_NETWORK.mainnet
    ) + 1;
    await this.mesh.spendingPlutusScript(this.languageVersion).txIn(
      vestingUtxo.input.txHash,
      vestingUtxo.input.outputIndex,
      vestingUtxo.output.amount,
      this.scriptAddress
    ).spendingReferenceTxInInlineDatumPresent().spendingReferenceTxInRedeemerValue("").txInScript(this.scriptCbor).txOut(walletAddress, []).txInCollateral(
      collateralInput.txHash,
      collateralInput.outputIndex,
      collateralOutput.amount,
      collateralOutput.address
    ).invalidBefore(invalidBefore).requiredSignerHash(pubKeyHash).changeAddress(walletAddress).selectUtxosFrom(utxos).complete();
    return this.mesh.txHex;
  };
  getUtxoByTxHash = async (txHash) => {
    return await this._getUtxoByTxHash(txHash, this.scriptCbor);
  };
};
export {
  MeshContentOwnershipContract,
  MeshEscrowContract,
  MeshGiftCardContract,
  MeshHelloWorldContract,
  MeshMarketplaceContract,
  MeshPaymentSplitterContract,
  MeshPlutusNFTContract,
  MeshSwapContract,
  MeshVestingContract,
  activeEscrowDatum,
  initiateEscrowDatum,
  marketplaceDatum,
  recipientDepositRedeemer
};
